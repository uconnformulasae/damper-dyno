
damper dyno.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007584  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007728  08007728  00008728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b6c  08007b6c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007b6c  08007b6c  00008b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b74  08007b74  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b74  08007b74  00008b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b78  08007b78  00008b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007b7c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          0000025c  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000430  20000430  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c627  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bed  00000000  00000000  0001582b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  00017418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081e  00000000  00000000  00017e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c61  00000000  00000000  000186ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e148  00000000  00000000  0003930f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c30bb  00000000  00000000  00047457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a512  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c54  00000000  00000000  0010a558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0010e1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800770c 	.word	0x0800770c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800770c 	.word	0x0800770c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c5c:	b0b4      	sub	sp, #208	@ 0xd0
 8000c5e:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c60:	f000 fd0e 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c64:	f000 f870 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c68:	f000 f932 	bl	8000ed0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c6c:	f000 f8c0 	bl	8000df0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000c70:	f000 f8fe 	bl	8000e70 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Read sensor voltages
	      float linear_pot_voltage = read_linear_pot();
 8000c74:	f000 fab2 	bl	80011dc <read_linear_pot>
 8000c78:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
	      float rotary_pot_voltage = read_rotary_pot();
 8000c7c:	f000 faee 	bl	800125c <read_rotary_pot>
 8000c80:	ed87 0a28 	vstr	s0, [r7, #160]	@ 0xa0
	      float load_cell_voltage  = read_load_cell();
 8000c84:	f000 fa7a 	bl	800117c <read_load_cell>
 8000c88:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c

	      // Convert linear potentiometer voltage to displacement (in mm)
	      float displacement = convert_to_displacement(linear_pot_voltage);
 8000c8c:	ed97 0a29 	vldr	s0, [r7, #164]	@ 0xa4
 8000c90:	f000 f9c2 	bl	8001018 <convert_to_displacement>
 8000c94:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98

	      // Calculate velocity in mm/s (based on successive readings)
	      float velocity = calculate_linear_pot_velocity();
 8000c98:	f000 fa1c 	bl	80010d4 <calculate_linear_pot_velocity>
 8000c9c:	ed87 0a25 	vstr	s0, [r7, #148]	@ 0x94

	      // Format and output the results (ensure printf redirection is set up)
	      sprintf(buffer,
 8000ca0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8000ca4:	f7ff fc58 	bl	8000558 <__aeabi_f2d>
 8000ca8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000cac:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8000cb0:	f7ff fc52 	bl	8000558 <__aeabi_f2d>
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000cbc:	f7ff fc4c 	bl	8000558 <__aeabi_f2d>
 8000cc0:	4680      	mov	r8, r0
 8000cc2:	4689      	mov	r9, r1
 8000cc4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000cc8:	f7ff fc46 	bl	8000558 <__aeabi_f2d>
 8000ccc:	4682      	mov	sl, r0
 8000cce:	468b      	mov	fp, r1
 8000cd0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000cd4:	f7ff fc40 	bl	8000558 <__aeabi_f2d>
 8000cd8:	e9c7 0100 	strd	r0, r1, [r7]
	              linear_pot_voltage,
	              displacement,
	              velocity,
	              rotary_pot_voltage,
	              load_cell_voltage,
	              convert_to_weight(load_cell_voltage));
 8000cdc:	ed97 0a27 	vldr	s0, [r7, #156]	@ 0x9c
 8000ce0:	f000 f9da 	bl	8001098 <convert_to_weight>
 8000ce4:	ee10 3a10 	vmov	r3, s0
	      sprintf(buffer,
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fc35 	bl	8000558 <__aeabi_f2d>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	f107 0014 	add.w	r0, r7, #20
 8000cf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000cfa:	ed97 7b00 	vldr	d7, [r7]
 8000cfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000d02:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000d06:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000d0a:	e9cd 4500 	strd	r4, r5, [sp]
 8000d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d12:	490b      	ldr	r1, [pc, #44]	@ (8000d40 <main+0xe8>)
 8000d14:	f004 fb04 	bl	8005320 <siprintf>

	      HAL_UART_Transmit(&huart2, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff faaf 	bl	8000280 <strlen>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	f107 0114 	add.w	r1, r7, #20
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <main+0xec>)
 8000d30:	f003 fa28 	bl	8004184 <HAL_UART_Transmit>

	      HAL_Delay(DELAY_MS);
 8000d34:	20fa      	movs	r0, #250	@ 0xfa
 8000d36:	f000 fd09 	bl	800174c <HAL_Delay>
  {
 8000d3a:	bf00      	nop
 8000d3c:	e79a      	b.n	8000c74 <main+0x1c>
 8000d3e:	bf00      	nop
 8000d40:	08007728 	.word	0x08007728
 8000d44:	20000244 	.word	0x20000244

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0a6      	sub	sp, #152	@ 0x98
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d52:	2228      	movs	r2, #40	@ 0x28
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 fbc6 	bl	80054e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2258      	movs	r2, #88	@ 0x58
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 fbb8 	bl	80054e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	2310      	movs	r3, #16
 8000d82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 fd57 	bl	8002844 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d9c:	f000 fa8e 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	230f      	movs	r3, #15
 8000da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000da4:	2300      	movs	r3, #0
 8000da6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fd66 	bl	800388c <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dc6:	f000 fa79 	bl	80012bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000dca:	2322      	movs	r3, #34	@ 0x22
 8000dcc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 ff69 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000de4:	f000 fa6a 	bl	80012bc <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3798      	adds	r7, #152	@ 0x98
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000df6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e68 <MX_I2C1_Init+0x78>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e6c <MX_I2C1_Init+0x7c>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e12:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e2a:	480e      	ldr	r0, [pc, #56]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e2c:	f000 ff22 	bl	8001c74 <HAL_I2C_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e36:	f000 fa41 	bl	80012bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4809      	ldr	r0, [pc, #36]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e3e:	f001 fc69 	bl	8002714 <HAL_I2CEx_ConfigAnalogFilter>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e48:	f000 fa38 	bl	80012bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e50:	f001 fcab 	bl	80027aa <HAL_I2CEx_ConfigDigitalFilter>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 fa2f 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001f0 	.word	0x200001f0
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	00201d2b 	.word	0x00201d2b

08000e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e76:	4a15      	ldr	r2, [pc, #84]	@ (8000ecc <MX_USART2_UART_Init+0x5c>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e7c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000eb4:	f003 f918 	bl	80040e8 <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ebe:	f000 f9fd 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000244 	.word	0x20000244
 8000ecc:	40004400 	.word	0x40004400

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <MX_GPIO_Init+0x2c>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a08      	ldr	r2, [pc, #32]	@ (8000efc <MX_GPIO_Init+0x2c>)
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee0:	6153      	str	r3, [r2, #20]
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <MX_GPIO_Init+0x2c>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000

08000f00 <read_ADS1115>:

/* USER CODE BEGIN 4 */
// Read two bytes from the specified ADS1115 register via I2C
int16_t read_ADS1115(uint8_t reg)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, &reg, 1, HAL_MAX_DELAY);
 8000f0a:	1dfa      	adds	r2, r7, #7
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	2190      	movs	r1, #144	@ 0x90
 8000f16:	4814      	ldr	r0, [pc, #80]	@ (8000f68 <read_ADS1115+0x68>)
 8000f18:	f000 ff48 	bl	8001dac <HAL_I2C_Master_Transmit>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK)
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <read_ADS1115+0x2a>
    {
        return 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e01a      	b.n	8000f60 <read_ADS1115+0x60>
    }
    status = HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS << 1, data, 2, HAL_MAX_DELAY);
 8000f2a:	f107 0208 	add.w	r2, r7, #8
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2302      	movs	r3, #2
 8000f36:	2190      	movs	r1, #144	@ 0x90
 8000f38:	480b      	ldr	r0, [pc, #44]	@ (8000f68 <read_ADS1115+0x68>)
 8000f3a:	f001 f84f 	bl	8001fdc <HAL_I2C_Master_Receive>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK)
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <read_ADS1115+0x4c>
    {
        return 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e009      	b.n	8000f60 <read_ADS1115+0x60>
    }
    int16_t result = (int16_t)((data[0] << 8) | data[1]);
 8000f4c:	7a3b      	ldrb	r3, [r7, #8]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	7a7b      	ldrb	r3, [r7, #9]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	81bb      	strh	r3, [r7, #12]
    return result;
 8000f5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200001f0 	.word	0x200001f0

08000f6c <write_ADS1115>:

// Write a 16-bit value to the specified ADS1115 register via I2C
void write_ADS1115(uint8_t reg, uint16_t value)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	80bb      	strh	r3, [r7, #4]
    uint8_t data[3];
    data[0] = reg;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)(value >> 8);
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	737b      	strb	r3, [r7, #13]
    data[2] = (uint8_t)(value & 0xFF);
 8000f8a:	88bb      	ldrh	r3, [r7, #4]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADS1115_ADDRESS << 1, data, 3, HAL_MAX_DELAY);
 8000f90:	f107 020c 	add.w	r2, r7, #12
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	2190      	movs	r1, #144	@ 0x90
 8000f9e:	4803      	ldr	r0, [pc, #12]	@ (8000fac <write_ADS1115+0x40>)
 8000fa0:	f000 ff04 	bl	8001dac <HAL_I2C_Master_Transmit>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200001f0 	.word	0x200001f0

08000fb0 <convert_to_voltage>:

// Convert an ADC reading to a voltage
float convert_to_voltage(int16_t adc_value, float reference_voltage)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	ed87 0a00 	vstr	s0, [r7]
 8000fbc:	80fb      	strh	r3, [r7, #6]
    if (adc_value >= 0)
 8000fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0e      	blt.n	8000fe4 <convert_to_voltage+0x34>
        return ((float)adc_value / MAX_INT16_T_POSITIVE) * reference_voltage;
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	ee07 3a90 	vmov	s15, r3
 8000fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001010 <convert_to_voltage+0x60>
 8000fd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fda:	edd7 7a00 	vldr	s15, [r7]
 8000fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe2:	e00d      	b.n	8001000 <convert_to_voltage+0x50>
    else
        return ((float)adc_value / MAX_INT16_T_NEGATIVE) * reference_voltage;
 8000fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001014 <convert_to_voltage+0x64>
 8000ff4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ff8:	edd7 7a00 	vldr	s15, [r7]
 8000ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001000:	eeb0 0a67 	vmov.f32	s0, s15
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	46fffe00 	.word	0x46fffe00
 8001014:	47000000 	.word	0x47000000

08001018 <convert_to_displacement>:

// Convert a voltage reading to a displacement (mm)
float convert_to_displacement(float voltage)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage < MIN_VOLTAGE)
 8001022:	edd7 7a01 	vldr	s15, [r7, #4]
 8001026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	d503      	bpl.n	8001038 <convert_to_displacement+0x20>
        voltage = MIN_VOLTAGE;
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e00a      	b.n	800104e <convert_to_displacement+0x36>
    else if (voltage > MAX_VOLTAGE)
 8001038:	edd7 7a01 	vldr	s15, [r7, #4]
 800103c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001048:	dd01      	ble.n	800104e <convert_to_displacement+0x36>
        voltage = MAX_VOLTAGE;
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <convert_to_displacement+0x74>)
 800104c:	607b      	str	r3, [r7, #4]
    return ((voltage - MIN_VOLTAGE) / (MAX_VOLTAGE - MIN_VOLTAGE)) * MAX_TRAVEL_MM;
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fa82 	bl	8000558 <__aeabi_f2d>
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <convert_to_displacement+0x78>)
 800105a:	f7ff fbff 	bl	800085c <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <convert_to_displacement+0x7c>)
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fd9e 	bl	8000bb8 <__aeabi_d2f>
 800107c:	4603      	mov	r3, r0
 800107e:	ee07 3a90 	vmov	s15, r3
}
 8001082:	eeb0 0a67 	vmov.f32	s0, s15
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40a00000 	.word	0x40a00000
 8001090:	40140000 	.word	0x40140000
 8001094:	406f4000 	.word	0x406f4000

08001098 <convert_to_weight>:

// Convert a load cell voltage to weight
float convert_to_weight(float voltage)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
    float max_meter_voltage = (LOAD_CELL_MV_V * MAX_VOLTAGE) / 1000.0f;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <convert_to_weight+0x34>)
 80010a4:	60fb      	str	r3, [r7, #12]
    return -(voltage / max_meter_voltage) * MAX_LOAD_CELL_WEIGHT;
 80010a6:	edd7 6a01 	vldr	s13, [r7, #4]
 80010aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b2:	eef1 7a67 	vneg.f32	s15, s15
 80010b6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80010d0 <convert_to_weight+0x38>
 80010ba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010be:	eeb0 0a67 	vmov.f32	s0, s15
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	3c83126f 	.word	0x3c83126f
 80010d0:	43fa0000 	.word	0x43fa0000

080010d4 <calculate_linear_pot_velocity>:

// Calculate velocity (mm/s) from change in displacement over time
float calculate_linear_pot_velocity(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
    if (current_linear_pot_readout_time == last_linear_pot_readout_time)
 80010da:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <calculate_linear_pot_velocity+0x94>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b23      	ldr	r3, [pc, #140]	@ (800116c <calculate_linear_pot_velocity+0x98>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d102      	bne.n	80010ec <calculate_linear_pot_velocity+0x18>
        return 0.0f;
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	e035      	b.n	8001158 <calculate_linear_pot_velocity+0x84>
    float y2 = convert_to_displacement(current_linear_pot_voltage);
 80010ec:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <calculate_linear_pot_velocity+0x9c>)
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	eeb0 0a67 	vmov.f32	s0, s15
 80010f6:	f7ff ff8f 	bl	8001018 <convert_to_displacement>
 80010fa:	ed87 0a03 	vstr	s0, [r7, #12]
    float y1 = convert_to_displacement(last_linear_pot_voltage);
 80010fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <calculate_linear_pot_velocity+0xa0>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	eeb0 0a67 	vmov.f32	s0, s15
 8001108:	f7ff ff86 	bl	8001018 <convert_to_displacement>
 800110c:	ed87 0a02 	vstr	s0, [r7, #8]
    float deltaTime = (current_linear_pot_readout_time - last_linear_pot_readout_time) / 1000.0f;
 8001110:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <calculate_linear_pot_velocity+0x94>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b15      	ldr	r3, [pc, #84]	@ (800116c <calculate_linear_pot_velocity+0x98>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001122:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001178 <calculate_linear_pot_velocity+0xa4>
 8001126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112a:	edc7 7a01 	vstr	s15, [r7, #4]
    float velocity = (y2 - y1) / deltaTime;
 800112e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001132:	edd7 7a02 	vldr	s15, [r7, #8]
 8001136:	ee77 6a67 	vsub.f32	s13, s14, s15
 800113a:	ed97 7a01 	vldr	s14, [r7, #4]
 800113e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001142:	edc7 7a00 	vstr	s15, [r7]
    last_linear_pot_readout_time = current_linear_pot_readout_time;
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <calculate_linear_pot_velocity+0x94>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a08      	ldr	r2, [pc, #32]	@ (800116c <calculate_linear_pot_velocity+0x98>)
 800114c:	6013      	str	r3, [r2, #0]
    last_linear_pot_voltage = current_linear_pot_voltage;
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <calculate_linear_pot_velocity+0x9c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <calculate_linear_pot_velocity+0xa0>)
 8001154:	6013      	str	r3, [r2, #0]
    return velocity;
 8001156:	683b      	ldr	r3, [r7, #0]
}
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eeb0 0a67 	vmov.f32	s0, s15
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200002d8 	.word	0x200002d8
 800116c:	200002d4 	.word	0x200002d4
 8001170:	200002d0 	.word	0x200002d0
 8001174:	200002cc 	.word	0x200002cc
 8001178:	447a0000 	.word	0x447a0000

0800117c <read_load_cell>:

// Read the load cell voltage using ADS1115 with modified config bits
float read_load_cell(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
    const uint16_t mask = ~(0b0111111000000000);
 8001182:	f248 13ff 	movw	r3, #33279	@ 0x81ff
 8001186:	80fb      	strh	r3, [r7, #6]
    const uint16_t new_bits = 0b0000111000000000;
 8001188:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800118c:	80bb      	strh	r3, [r7, #4]
    uint16_t config = (ADS1115_CONFIG & mask) | new_bits;
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	f423 738e 	bic.w	r3, r3, #284	@ 0x11c
 8001194:	051b      	lsls	r3, r3, #20
 8001196:	0d1b      	lsrs	r3, r3, #20
 8001198:	b29a      	uxth	r2, r3
 800119a:	88bb      	ldrh	r3, [r7, #4]
 800119c:	4313      	orrs	r3, r2
 800119e:	807b      	strh	r3, [r7, #2]
    write_ADS1115(CONFIG_REGISTER, config);
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	4619      	mov	r1, r3
 80011a4:	2001      	movs	r0, #1
 80011a6:	f7ff fee1 	bl	8000f6c <write_ADS1115>
    HAL_Delay(5);
 80011aa:	2005      	movs	r0, #5
 80011ac:	f000 face 	bl	800174c <HAL_Delay>
    int16_t readout = read_ADS1115(CONVERSION_REGISTER);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fea5 	bl	8000f00 <read_ADS1115>
 80011b6:	4603      	mov	r3, r0
 80011b8:	803b      	strh	r3, [r7, #0]
    return convert_to_voltage(readout, ADS1115_250MV);
 80011ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011be:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80011d8 <read_load_cell+0x5c>
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fef4 	bl	8000fb0 <convert_to_voltage>
 80011c8:	eef0 7a40 	vmov.f32	s15, s0
}
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	3e83126f 	.word	0x3e83126f

080011dc <read_linear_pot>:

// Read the linear potentiometer voltage
float read_linear_pot(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
    const uint16_t mask = ~(0b0111111000000000);
 80011e2:	f248 13ff 	movw	r3, #33279	@ 0x81ff
 80011e6:	80fb      	strh	r3, [r7, #6]
    const uint16_t new_bits = 0b0110000000000000;
 80011e8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80011ec:	80bb      	strh	r3, [r7, #4]
    uint16_t config = (ADS1115_CONFIG & mask) | new_bits;
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	f423 738e 	bic.w	r3, r3, #284	@ 0x11c
 80011f4:	051b      	lsls	r3, r3, #20
 80011f6:	0d1b      	lsrs	r3, r3, #20
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	807b      	strh	r3, [r7, #2]
    write_ADS1115(CONFIG_REGISTER, config);
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	4619      	mov	r1, r3
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff feb1 	bl	8000f6c <write_ADS1115>
    HAL_Delay(5);
 800120a:	2005      	movs	r0, #5
 800120c:	f000 fa9e 	bl	800174c <HAL_Delay>
    int16_t readout = read_ADS1115(CONVERSION_REGISTER);
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fe75 	bl	8000f00 <read_ADS1115>
 8001216:	4603      	mov	r3, r0
 8001218:	803b      	strh	r3, [r7, #0]
    current_linear_pot_readout_time = HAL_GetTick();
 800121a:	f000 fa8b 	bl	8001734 <HAL_GetTick>
 800121e:	4603      	mov	r3, r0
 8001220:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <read_linear_pot+0x74>)
 8001222:	6013      	str	r3, [r2, #0]
    current_linear_pot_voltage = convert_to_voltage(readout, ADS1115_6V);
 8001224:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001228:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001254 <read_linear_pot+0x78>
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff febf 	bl	8000fb0 <convert_to_voltage>
 8001232:	eef0 7a40 	vmov.f32	s15, s0
 8001236:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <read_linear_pot+0x7c>)
 8001238:	edc3 7a00 	vstr	s15, [r3]
    return current_linear_pot_voltage;
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <read_linear_pot+0x7c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	ee07 3a90 	vmov	s15, r3
}
 8001244:	eeb0 0a67 	vmov.f32	s0, s15
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200002d8 	.word	0x200002d8
 8001254:	40c49ba6 	.word	0x40c49ba6
 8001258:	200002d0 	.word	0x200002d0

0800125c <read_rotary_pot>:

// Read the rotary potentiometer voltage
float read_rotary_pot(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
    const uint16_t mask = ~(0b0111111000000000);
 8001262:	f248 13ff 	movw	r3, #33279	@ 0x81ff
 8001266:	80fb      	strh	r3, [r7, #6]
    const uint16_t new_bits = 0b0111000000000000;
 8001268:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800126c:	80bb      	strh	r3, [r7, #4]
    uint16_t config = (ADS1115_CONFIG & mask) | new_bits;
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	f423 738e 	bic.w	r3, r3, #284	@ 0x11c
 8001274:	051b      	lsls	r3, r3, #20
 8001276:	0d1b      	lsrs	r3, r3, #20
 8001278:	b29a      	uxth	r2, r3
 800127a:	88bb      	ldrh	r3, [r7, #4]
 800127c:	4313      	orrs	r3, r2
 800127e:	807b      	strh	r3, [r7, #2]
    write_ADS1115(CONFIG_REGISTER, config);
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	4619      	mov	r1, r3
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff fe71 	bl	8000f6c <write_ADS1115>
    HAL_Delay(5);
 800128a:	2005      	movs	r0, #5
 800128c:	f000 fa5e 	bl	800174c <HAL_Delay>
    int16_t readout = read_ADS1115(CONVERSION_REGISTER);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fe35 	bl	8000f00 <read_ADS1115>
 8001296:	4603      	mov	r3, r0
 8001298:	803b      	strh	r3, [r7, #0]
    return convert_to_voltage(readout, ADS1115_6V);
 800129a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800129e:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80012b8 <read_rotary_pot+0x5c>
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe84 	bl	8000fb0 <convert_to_voltage>
 80012a8:	eef0 7a40 	vmov.f32	s15, s0
}
 80012ac:	eeb0 0a67 	vmov.f32	s0, s15
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40c49ba6 	.word	0x40c49ba6

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <Error_Handler+0x8>

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_MspInit+0x44>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <HAL_MspInit+0x44>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6193      	str	r3, [r2, #24]
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <HAL_MspInit+0x44>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_MspInit+0x44>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_MspInit+0x44>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_MspInit+0x44>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a18      	ldr	r2, [pc, #96]	@ (8001390 <HAL_I2C_MspInit+0x80>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d129      	bne.n	8001386 <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <HAL_I2C_MspInit+0x84>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	4a17      	ldr	r2, [pc, #92]	@ (8001394 <HAL_I2C_MspInit+0x84>)
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	6153      	str	r3, [r2, #20]
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_I2C_MspInit+0x84>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800134a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001350:	2312      	movs	r3, #18
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800135c:	2304      	movs	r3, #4
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136a:	f000 faf9 	bl	8001960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_I2C_MspInit+0x84>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <HAL_I2C_MspInit+0x84>)
 8001374:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_I2C_MspInit+0x84>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	@ 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40005400 	.word	0x40005400
 8001394:	40021000 	.word	0x40021000

08001398 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_UART_MspInit+0x7c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d128      	bne.n	800140c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <HAL_UART_MspInit+0x80>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a16      	ldr	r2, [pc, #88]	@ (8001418 <HAL_UART_MspInit+0x80>)
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <HAL_UART_MspInit+0x80>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <HAL_UART_MspInit+0x80>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a10      	ldr	r2, [pc, #64]	@ (8001418 <HAL_UART_MspInit+0x80>)
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <HAL_UART_MspInit+0x80>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ea:	230c      	movs	r3, #12
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013fa:	2307      	movs	r3, #7
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001408:	f000 faaa 	bl	8001960 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	@ 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40004400 	.word	0x40004400
 8001418:	40021000 	.word	0x40021000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <NMI_Handler+0x4>

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <MemManage_Handler+0x4>

08001434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <UsageFault_Handler+0x4>

08001444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001472:	f000 f94b 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}

0800147a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  return 1;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_kill>:

int _kill(int pid, int sig)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001494:	f004 f830 	bl	80054f8 <__errno>
 8001498:	4603      	mov	r3, r0
 800149a:	2216      	movs	r2, #22
 800149c:	601a      	str	r2, [r3, #0]
  return -1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_exit>:

void _exit (int status)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014b2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffe7 	bl	800148a <_kill>
  while (1) {}    /* Make sure we hang here */
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <_exit+0x12>

080014c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e00a      	b.n	80014e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014d2:	f3af 8000 	nop.w
 80014d6:	4601      	mov	r1, r0
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60ba      	str	r2, [r7, #8]
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbf0      	blt.n	80014d2 <_read+0x12>
  }

  return len;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e009      	b.n	8001520 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf1      	blt.n	800150c <_write+0x12>
  }
  return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_close>:

int _close(int file)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800155a:	605a      	str	r2, [r3, #4]
  return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_isatty>:

int _isatty(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f003 ff94 	bl	80054f8 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20010000 	.word	0x20010000
 80015fc:	00000400 	.word	0x00000400
 8001600:	200002dc 	.word	0x200002dc
 8001604:	20000430 	.word	0x20000430

08001608 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001664 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001630:	f7ff ffea 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480c      	ldr	r0, [pc, #48]	@ (8001668 <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490d      	ldr	r1, [pc, #52]	@ (800166c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0a      	ldr	r4, [pc, #40]	@ (8001678 <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165a:	f003 ff53 	bl	8005504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800165e:	f7ff fafb 	bl	8000c58 <main>

08001662 <LoopForever>:

LoopForever:
    b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001664:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001670:	08007b7c 	.word	0x08007b7c
  ldr r2, =_sbss
 8001674:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001678:	20000430 	.word	0x20000430

0800167c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_2_IRQHandler>
	...

08001680 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <HAL_Init+0x28>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	@ (80016a8 <HAL_Init+0x28>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f931 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fe14 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f93b 	bl	8001946 <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016e8:	f000 f911 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	@ (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000000 	.word	0x20000000
 8001704:	20000008 	.word	0x20000008
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008
 8001730:	200002e0 	.word	0x200002e0

08001734 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;  
 8001738:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200002e0 	.word	0x200002e0

0800174c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_Delay+0x44>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000008 	.word	0x20000008

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	@ (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	@ (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	@ 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	@ 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff47 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff5c 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffb0 	bl	80018b4 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	e160      	b.n	8001c32 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2101      	movs	r1, #1
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8152 	beq.w	8001c2c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d005      	beq.n	80019a0 <HAL_GPIO_Init+0x40>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d130      	bne.n	8001a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d6:	2201      	movs	r2, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	f003 0201 	and.w	r2, r3, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d017      	beq.n	8001a3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d123      	bne.n	8001a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	08da      	lsrs	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3208      	adds	r2, #8
 8001a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	6939      	ldr	r1, [r7, #16]
 8001a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0203 	and.w	r2, r3, #3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80ac 	beq.w	8001c2c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a5d      	ldr	r2, [pc, #372]	@ (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aec:	4a59      	ldr	r2, [pc, #356]	@ (8001c54 <HAL_GPIO_Init+0x2f4>)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b16:	d025      	beq.n	8001b64 <HAL_GPIO_Init+0x204>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a4f      	ldr	r2, [pc, #316]	@ (8001c58 <HAL_GPIO_Init+0x2f8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d01f      	beq.n	8001b60 <HAL_GPIO_Init+0x200>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a4e      	ldr	r2, [pc, #312]	@ (8001c5c <HAL_GPIO_Init+0x2fc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d019      	beq.n	8001b5c <HAL_GPIO_Init+0x1fc>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a4d      	ldr	r2, [pc, #308]	@ (8001c60 <HAL_GPIO_Init+0x300>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d013      	beq.n	8001b58 <HAL_GPIO_Init+0x1f8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a4c      	ldr	r2, [pc, #304]	@ (8001c64 <HAL_GPIO_Init+0x304>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00d      	beq.n	8001b54 <HAL_GPIO_Init+0x1f4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a4b      	ldr	r2, [pc, #300]	@ (8001c68 <HAL_GPIO_Init+0x308>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d007      	beq.n	8001b50 <HAL_GPIO_Init+0x1f0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a4a      	ldr	r2, [pc, #296]	@ (8001c6c <HAL_GPIO_Init+0x30c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_GPIO_Init+0x1ec>
 8001b48:	2306      	movs	r3, #6
 8001b4a:	e00c      	b.n	8001b66 <HAL_GPIO_Init+0x206>
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	e00a      	b.n	8001b66 <HAL_GPIO_Init+0x206>
 8001b50:	2305      	movs	r3, #5
 8001b52:	e008      	b.n	8001b66 <HAL_GPIO_Init+0x206>
 8001b54:	2304      	movs	r3, #4
 8001b56:	e006      	b.n	8001b66 <HAL_GPIO_Init+0x206>
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e004      	b.n	8001b66 <HAL_GPIO_Init+0x206>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e002      	b.n	8001b66 <HAL_GPIO_Init+0x206>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_GPIO_Init+0x206>
 8001b64:	2300      	movs	r3, #0
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	f002 0203 	and.w	r2, r2, #3
 8001b6c:	0092      	lsls	r2, r2, #2
 8001b6e:	4093      	lsls	r3, r2
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b76:	4937      	ldr	r1, [pc, #220]	@ (8001c54 <HAL_GPIO_Init+0x2f4>)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b84:	4b3a      	ldr	r3, [pc, #232]	@ (8001c70 <HAL_GPIO_Init+0x310>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ba8:	4a31      	ldr	r2, [pc, #196]	@ (8001c70 <HAL_GPIO_Init+0x310>)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bae:	4b30      	ldr	r3, [pc, #192]	@ (8001c70 <HAL_GPIO_Init+0x310>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bd2:	4a27      	ldr	r2, [pc, #156]	@ (8001c70 <HAL_GPIO_Init+0x310>)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <HAL_GPIO_Init+0x310>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8001c70 <HAL_GPIO_Init+0x310>)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c02:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_GPIO_Init+0x310>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c26:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <HAL_GPIO_Init+0x310>)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f47f ae97 	bne.w	8001970 <HAL_GPIO_Init+0x10>
  }
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010000 	.word	0x40010000
 8001c58:	48000400 	.word	0x48000400
 8001c5c:	48000800 	.word	0x48000800
 8001c60:	48000c00 	.word	0x48000c00
 8001c64:	48001000 	.word	0x48001000
 8001c68:	48001400 	.word	0x48001400
 8001c6c:	48001800 	.word	0x48001800
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e08d      	b.n	8001da2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d106      	bne.n	8001ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fb38 	bl	8001310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2224      	movs	r2, #36	@ 0x24
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d107      	bne.n	8001cee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	e006      	b.n	8001cfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001cfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d108      	bne.n	8001d16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	e007      	b.n	8001d26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69d9      	ldr	r1, [r3, #28]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1a      	ldr	r2, [r3, #32]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	461a      	mov	r2, r3
 8001db8:	460b      	mov	r3, r1
 8001dba:	817b      	strh	r3, [r7, #10]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	f040 80fd 	bne.w	8001fc8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_I2C_Master_Transmit+0x30>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e0f6      	b.n	8001fca <HAL_I2C_Master_Transmit+0x21e>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001de4:	f7ff fca6 	bl	8001734 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2319      	movs	r3, #25
 8001df0:	2201      	movs	r2, #1
 8001df2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 fa0a 	bl	8002210 <I2C_WaitOnFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0e1      	b.n	8001fca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2221      	movs	r2, #33	@ 0x21
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2210      	movs	r2, #16
 8001e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	893a      	ldrh	r2, [r7, #8]
 8001e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2bff      	cmp	r3, #255	@ 0xff
 8001e36:	d906      	bls.n	8001e46 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	22ff      	movs	r2, #255	@ 0xff
 8001e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001e3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	e007      	b.n	8001e56 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001e50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e54:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d024      	beq.n	8001ea8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	3301      	adds	r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	8979      	ldrh	r1, [r7, #10]
 8001e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001fd4 <HAL_I2C_Master_Transmit+0x228>)
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 fc05 	bl	80026b0 <I2C_TransferConfig>
 8001ea6:	e066      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	8979      	ldrh	r1, [r7, #10]
 8001eb0:	4b48      	ldr	r3, [pc, #288]	@ (8001fd4 <HAL_I2C_Master_Transmit+0x228>)
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 fbfa 	bl	80026b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ebc:	e05b      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	6a39      	ldr	r1, [r7, #32]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f9fd 	bl	80022c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e07b      	b.n	8001fca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d034      	beq.n	8001f76 <HAL_I2C_Master_Transmit+0x1ca>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d130      	bne.n	8001f76 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2180      	movs	r1, #128	@ 0x80
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f976 	bl	8002210 <I2C_WaitOnFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e04d      	b.n	8001fca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2bff      	cmp	r3, #255	@ 0xff
 8001f36:	d90e      	bls.n	8001f56 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	22ff      	movs	r2, #255	@ 0xff
 8001f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	8979      	ldrh	r1, [r7, #10]
 8001f46:	2300      	movs	r3, #0
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fbae 	bl	80026b0 <I2C_TransferConfig>
 8001f54:	e00f      	b.n	8001f76 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fb9d 	bl	80026b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d19e      	bne.n	8001ebe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	6a39      	ldr	r1, [r7, #32]
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f9e3 	bl	8002350 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e01a      	b.n	8001fca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6859      	ldr	r1, [r3, #4]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <HAL_I2C_Master_Transmit+0x22c>)
 8001fa8:	400b      	ands	r3, r1
 8001faa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	80002000 	.word	0x80002000
 8001fd8:	fe00e800 	.word	0xfe00e800

08001fdc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	460b      	mov	r3, r1
 8001fea:	817b      	strh	r3, [r7, #10]
 8001fec:	4613      	mov	r3, r2
 8001fee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	f040 80db 	bne.w	80021b4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_I2C_Master_Receive+0x30>
 8002008:	2302      	movs	r3, #2
 800200a:	e0d4      	b.n	80021b6 <HAL_I2C_Master_Receive+0x1da>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002014:	f7ff fb8e 	bl	8001734 <HAL_GetTick>
 8002018:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2319      	movs	r3, #25
 8002020:	2201      	movs	r2, #1
 8002022:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f8f2 	bl	8002210 <I2C_WaitOnFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0bf      	b.n	80021b6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2222      	movs	r2, #34	@ 0x22
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2210      	movs	r2, #16
 8002042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	893a      	ldrh	r2, [r7, #8]
 8002056:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	2bff      	cmp	r3, #255	@ 0xff
 8002066:	d90e      	bls.n	8002086 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002072:	b2da      	uxtb	r2, r3
 8002074:	8979      	ldrh	r1, [r7, #10]
 8002076:	4b52      	ldr	r3, [pc, #328]	@ (80021c0 <HAL_I2C_Master_Receive+0x1e4>)
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fb16 	bl	80026b0 <I2C_TransferConfig>
 8002084:	e06d      	b.n	8002162 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002094:	b2da      	uxtb	r2, r3
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	4b49      	ldr	r3, [pc, #292]	@ (80021c0 <HAL_I2C_Master_Receive+0x1e4>)
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fb05 	bl	80026b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80020a6:	e05c      	b.n	8002162 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	6a39      	ldr	r1, [r7, #32]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f993 	bl	80023d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e07c      	b.n	80021b6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d034      	beq.n	8002162 <HAL_I2C_Master_Receive+0x186>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d130      	bne.n	8002162 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	2200      	movs	r2, #0
 8002108:	2180      	movs	r1, #128	@ 0x80
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f880 	bl	8002210 <I2C_WaitOnFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e04d      	b.n	80021b6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	2bff      	cmp	r3, #255	@ 0xff
 8002122:	d90e      	bls.n	8002142 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	22ff      	movs	r2, #255	@ 0xff
 8002128:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212e:	b2da      	uxtb	r2, r3
 8002130:	8979      	ldrh	r1, [r7, #10]
 8002132:	2300      	movs	r3, #0
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 fab8 	bl	80026b0 <I2C_TransferConfig>
 8002140:	e00f      	b.n	8002162 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002150:	b2da      	uxtb	r2, r3
 8002152:	8979      	ldrh	r1, [r7, #10]
 8002154:	2300      	movs	r3, #0
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 faa7 	bl	80026b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d19d      	bne.n	80020a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	6a39      	ldr	r1, [r7, #32]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f8ed 	bl	8002350 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e01a      	b.n	80021b6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2220      	movs	r2, #32
 8002186:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <HAL_I2C_Master_Receive+0x1e8>)
 8002194:	400b      	ands	r3, r1
 8002196:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	80002400 	.word	0x80002400
 80021c4:	fe00e800 	.word	0xfe00e800

080021c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d103      	bne.n	80021e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d007      	beq.n	8002204 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	619a      	str	r2, [r3, #24]
  }
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002220:	e03b      	b.n	800229a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	6839      	ldr	r1, [r7, #0]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f962 	bl	80024f0 <I2C_IsErrorOccurred>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e041      	b.n	80022ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800223c:	d02d      	beq.n	800229a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223e:	f7ff fa79 	bl	8001734 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d302      	bcc.n	8002254 <I2C_WaitOnFlagUntilTimeout+0x44>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d122      	bne.n	800229a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4013      	ands	r3, r2
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	429a      	cmp	r2, r3
 8002270:	d113      	bne.n	800229a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	f043 0220 	orr.w	r2, r3, #32
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4013      	ands	r3, r2
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d0b4      	beq.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022ce:	e033      	b.n	8002338 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f90b 	bl	80024f0 <I2C_IsErrorOccurred>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e031      	b.n	8002348 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022ea:	d025      	beq.n	8002338 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ec:	f7ff fa22 	bl	8001734 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d302      	bcc.n	8002302 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d11a      	bne.n	8002338 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b02      	cmp	r3, #2
 800230e:	d013      	beq.n	8002338 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002314:	f043 0220 	orr.w	r2, r3, #32
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e007      	b.n	8002348 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b02      	cmp	r3, #2
 8002344:	d1c4      	bne.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800235c:	e02f      	b.n	80023be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f8c4 	bl	80024f0 <I2C_IsErrorOccurred>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e02d      	b.n	80023ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002372:	f7ff f9df 	bl	8001734 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	429a      	cmp	r2, r3
 8002380:	d302      	bcc.n	8002388 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d11a      	bne.n	80023be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b20      	cmp	r3, #32
 8002394:	d013      	beq.n	80023be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	f043 0220 	orr.w	r2, r3, #32
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e007      	b.n	80023ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d1c8      	bne.n	800235e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80023e8:	e071      	b.n	80024ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f87e 	bl	80024f0 <I2C_IsErrorOccurred>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b20      	cmp	r3, #32
 800240a:	d13b      	bne.n	8002484 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d138      	bne.n	8002484 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b04      	cmp	r3, #4
 800241e:	d105      	bne.n	800242c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b10      	cmp	r3, #16
 8002438:	d121      	bne.n	800247e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2210      	movs	r2, #16
 8002440:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2204      	movs	r2, #4
 8002446:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2220      	movs	r2, #32
 800244e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800245c:	400b      	ands	r3, r1
 800245e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	75fb      	strb	r3, [r7, #23]
 800247c:	e002      	b.n	8002484 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002484:	f7ff f956 	bl	8001734 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	429a      	cmp	r2, r3
 8002492:	d302      	bcc.n	800249a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d119      	bne.n	80024ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800249a:	7dfb      	ldrb	r3, [r7, #23]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d116      	bne.n	80024ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d00f      	beq.n	80024ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	f043 0220 	orr.w	r2, r3, #32
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d002      	beq.n	80024e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d083      	beq.n	80023ea <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	fe00e800 	.word	0xfe00e800

080024f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	@ 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d068      	beq.n	80025ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2210      	movs	r2, #16
 8002522:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002524:	e049      	b.n	80025ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800252c:	d045      	beq.n	80025ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800252e:	f7ff f901 	bl	8001734 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <I2C_IsErrorOccurred+0x54>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d13a      	bne.n	80025ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002556:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002566:	d121      	bne.n	80025ac <I2C_IsErrorOccurred+0xbc>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800256e:	d01d      	beq.n	80025ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	2b20      	cmp	r3, #32
 8002574:	d01a      	beq.n	80025ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002584:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002586:	f7ff f8d5 	bl	8001734 <HAL_GetTick>
 800258a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800258c:	e00e      	b.n	80025ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800258e:	f7ff f8d1 	bl	8001734 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b19      	cmp	r3, #25
 800259a:	d907      	bls.n	80025ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	f043 0320 	orr.w	r3, r3, #32
 80025a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80025aa:	e006      	b.n	80025ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d1e9      	bne.n	800258e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d003      	beq.n	80025d0 <I2C_IsErrorOccurred+0xe0>
 80025c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0aa      	beq.n	8002526 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2220      	movs	r2, #32
 80025de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00b      	beq.n	8002618 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002610:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f043 0308 	orr.w	r3, r3, #8
 8002628:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002632:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002654:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800265c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01c      	beq.n	800269e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7ff fdaf 	bl	80021c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <I2C_IsErrorOccurred+0x1bc>)
 8002676:	400b      	ands	r3, r1
 8002678:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	431a      	orrs	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800269e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3728      	adds	r7, #40	@ 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	fe00e800 	.word	0xfe00e800

080026b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	817b      	strh	r3, [r7, #10]
 80026be:	4613      	mov	r3, r2
 80026c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026c2:	897b      	ldrh	r3, [r7, #10]
 80026c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026c8:	7a7b      	ldrb	r3, [r7, #9]
 80026ca:	041b      	lsls	r3, r3, #16
 80026cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	4313      	orrs	r3, r2
 80026da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	0d5b      	lsrs	r3, r3, #21
 80026ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <I2C_TransferConfig+0x60>)
 80026f0:	430b      	orrs	r3, r1
 80026f2:	43db      	mvns	r3, r3
 80026f4:	ea02 0103 	and.w	r1, r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	03ff63ff 	.word	0x03ff63ff

08002714 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b20      	cmp	r3, #32
 8002728:	d138      	bne.n	800279c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002734:	2302      	movs	r3, #2
 8002736:	e032      	b.n	800279e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2224      	movs	r2, #36	@ 0x24
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002766:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e000      	b.n	800279e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800279c:	2302      	movs	r3, #2
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d139      	bne.n	8002834 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e033      	b.n	8002836 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2224      	movs	r2, #36	@ 0x24
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800284a:	af00      	add	r7, sp, #0
 800284c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002850:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002854:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002856:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800285a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	f001 b80a 	b.w	800387e <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8161 	beq.w	8002b42 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002880:	4bae      	ldr	r3, [pc, #696]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b04      	cmp	r3, #4
 800288a:	d00c      	beq.n	80028a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800288c:	4bab      	ldr	r3, [pc, #684]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b08      	cmp	r3, #8
 8002896:	d157      	bne.n	8002948 <HAL_RCC_OscConfig+0x104>
 8002898:	4ba8      	ldr	r3, [pc, #672]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a4:	d150      	bne.n	8002948 <HAL_RCC_OscConfig+0x104>
 80028a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028aa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80028c6:	d802      	bhi.n	80028ce <HAL_RCC_OscConfig+0x8a>
 80028c8:	4b9c      	ldr	r3, [pc, #624]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0xb6>
 80028ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028d2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80028e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028e6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80028ea:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80028f6:	4b91      	ldr	r3, [pc, #580]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028fe:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002902:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002906:	fa92 f2a2 	rbit	r2, r2
 800290a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800290e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002912:	fab2 f282 	clz	r2, r2
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f042 0220 	orr.w	r2, r2, #32
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	f002 021f 	and.w	r2, r2, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f202 	lsl.w	r2, r1, r2
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8108 	beq.w	8002b40 <HAL_RCC_OscConfig+0x2fc>
 8002930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002934:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f040 80ff 	bne.w	8002b40 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	f000 bf9b 	b.w	800387e <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800294c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002958:	d106      	bne.n	8002968 <HAL_RCC_OscConfig+0x124>
 800295a:	4b78      	ldr	r3, [pc, #480]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a77      	ldr	r2, [pc, #476]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e036      	b.n	80029d6 <HAL_RCC_OscConfig+0x192>
 8002968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800296c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10c      	bne.n	8002992 <HAL_RCC_OscConfig+0x14e>
 8002978:	4b70      	ldr	r3, [pc, #448]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a6f      	ldr	r2, [pc, #444]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 800297e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b6d      	ldr	r3, [pc, #436]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a6c      	ldr	r2, [pc, #432]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 800298a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e021      	b.n	80029d6 <HAL_RCC_OscConfig+0x192>
 8002992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002996:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029a2:	d10c      	bne.n	80029be <HAL_RCC_OscConfig+0x17a>
 80029a4:	4b65      	ldr	r3, [pc, #404]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a64      	ldr	r2, [pc, #400]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 80029aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b62      	ldr	r3, [pc, #392]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a61      	ldr	r2, [pc, #388]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	e00b      	b.n	80029d6 <HAL_RCC_OscConfig+0x192>
 80029be:	4b5f      	ldr	r3, [pc, #380]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 80029c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b5c      	ldr	r3, [pc, #368]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5b      	ldr	r2, [pc, #364]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 80029d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d054      	beq.n	8002a90 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe fea5 	bl	8001734 <HAL_GetTick>
 80029ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fea0 	bl	8001734 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b64      	cmp	r3, #100	@ 0x64
 80029fe:	d902      	bls.n	8002a06 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	f000 bf3c 	b.w	800387e <HAL_RCC_OscConfig+0x103a>
 8002a06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a0a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002a1a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a26:	d802      	bhi.n	8002a2e <HAL_RCC_OscConfig+0x1ea>
 8002a28:	4b44      	ldr	r3, [pc, #272]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	e015      	b.n	8002a5a <HAL_RCC_OscConfig+0x216>
 8002a2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a32:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002a42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a46:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002a4a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002a56:	4b39      	ldr	r3, [pc, #228]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a5e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002a62:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002a66:	fa92 f2a2 	rbit	r2, r2
 8002a6a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002a6e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002a72:	fab2 f282 	clz	r2, r2
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f042 0220 	orr.w	r2, r2, #32
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f002 021f 	and.w	r2, r2, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0b0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x1ac>
 8002a8e:	e058      	b.n	8002b42 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe fe50 	bl	8001734 <HAL_GetTick>
 8002a94:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a9a:	f7fe fe4b 	bl	8001734 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	@ 0x64
 8002aa8:	d902      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	f000 bee7 	b.w	800387e <HAL_RCC_OscConfig+0x103a>
 8002ab0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ab4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002ac4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ad0:	d802      	bhi.n	8002ad8 <HAL_RCC_OscConfig+0x294>
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	e015      	b.n	8002b04 <HAL_RCC_OscConfig+0x2c0>
 8002ad8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002adc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002aec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002af0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002af4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002b00:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <HAL_RCC_OscConfig+0x2f8>)
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b08:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002b0c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002b10:	fa92 f2a2 	rbit	r2, r2
 8002b14:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002b18:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002b1c:	fab2 f282 	clz	r2, r2
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	f042 0220 	orr.w	r2, r2, #32
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f002 021f 	and.w	r2, r2, #31
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1b0      	bne.n	8002a9a <HAL_RCC_OscConfig+0x256>
 8002b38:	e003      	b.n	8002b42 <HAL_RCC_OscConfig+0x2fe>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 816d 	beq.w	8002e32 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b58:	4bcd      	ldr	r3, [pc, #820]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00c      	beq.n	8002b7e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b64:	4bca      	ldr	r3, [pc, #808]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d16e      	bne.n	8002c4e <HAL_RCC_OscConfig+0x40a>
 8002b70:	4bc7      	ldr	r3, [pc, #796]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b7c:	d167      	bne.n	8002c4e <HAL_RCC_OscConfig+0x40a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002b90:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b9c:	d802      	bhi.n	8002ba4 <HAL_RCC_OscConfig+0x360>
 8002b9e:	4bbc      	ldr	r3, [pc, #752]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	e013      	b.n	8002bcc <HAL_RCC_OscConfig+0x388>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002bbc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002bc8:	4bb1      	ldr	r3, [pc, #708]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002bd2:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002bd6:	fa92 f2a2 	rbit	r2, r2
 8002bda:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002bde:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002be2:	fab2 f282 	clz	r2, r2
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f042 0220 	orr.w	r2, r2, #32
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	f002 021f 	and.w	r2, r2, #31
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCC_OscConfig+0x3d0>
 8002bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d002      	beq.n	8002c14 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f000 be35 	b.w	800387e <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c14:	4b9e      	ldr	r3, [pc, #632]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	21f8      	movs	r1, #248	@ 0xf8
 8002c2a:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002c32:	fa91 f1a1 	rbit	r1, r1
 8002c36:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002c3a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002c3e:	fab1 f181 	clz	r1, r1
 8002c42:	b2c9      	uxtb	r1, r1
 8002c44:	408b      	lsls	r3, r1
 8002c46:	4992      	ldr	r1, [pc, #584]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4c:	e0f1      	b.n	8002e32 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8083 	beq.w	8002d66 <HAL_RCC_OscConfig+0x522>
 8002c60:	2301      	movs	r3, #1
 8002c62:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002c72:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	461a      	mov	r2, r3
 8002c88:	2301      	movs	r3, #1
 8002c8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fd52 	bl	8001734 <HAL_GetTick>
 8002c90:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c96:	f7fe fd4d 	bl	8001734 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	f000 bde9 	b.w	800387e <HAL_RCC_OscConfig+0x103a>
 8002cac:	2302      	movs	r3, #2
 8002cae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002cbe:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cca:	d802      	bhi.n	8002cd2 <HAL_RCC_OscConfig+0x48e>
 8002ccc:	4b70      	ldr	r3, [pc, #448]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	e013      	b.n	8002cfa <HAL_RCC_OscConfig+0x4b6>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002cea:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002cf6:	4b66      	ldr	r3, [pc, #408]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002d00:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002d0c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002d10:	fab2 f282 	clz	r2, r2
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	f042 0220 	orr.w	r2, r2, #32
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	f002 021f 	and.w	r2, r2, #31
 8002d20:	2101      	movs	r1, #1
 8002d22:	fa01 f202 	lsl.w	r2, r1, r2
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0b4      	beq.n	8002c96 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b58      	ldr	r3, [pc, #352]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	21f8      	movs	r1, #248	@ 0xf8
 8002d42:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002d4a:	fa91 f1a1 	rbit	r1, r1
 8002d4e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002d52:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002d56:	fab1 f181 	clz	r1, r1
 8002d5a:	b2c9      	uxtb	r1, r1
 8002d5c:	408b      	lsls	r3, r1
 8002d5e:	494c      	ldr	r1, [pc, #304]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
 8002d64:	e065      	b.n	8002e32 <HAL_RCC_OscConfig+0x5ee>
 8002d66:	2301      	movs	r3, #1
 8002d68:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002d78:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d86:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fe fccf 	bl	8001734 <HAL_GetTick>
 8002d96:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7fe fcca 	bl	8001734 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d902      	bls.n	8002db2 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	f000 bd66 	b.w	800387e <HAL_RCC_OscConfig+0x103a>
 8002db2:	2302      	movs	r3, #2
 8002db4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002dc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dd0:	d802      	bhi.n	8002dd8 <HAL_RCC_OscConfig+0x594>
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	e013      	b.n	8002e00 <HAL_RCC_OscConfig+0x5bc>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002dea:	2302      	movs	r3, #2
 8002dec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002df0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002dfc:	4b24      	ldr	r3, [pc, #144]	@ (8002e90 <HAL_RCC_OscConfig+0x64c>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	2202      	movs	r2, #2
 8002e02:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002e06:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002e0a:	fa92 f2a2 	rbit	r2, r2
 8002e0e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002e12:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002e16:	fab2 f282 	clz	r2, r2
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f042 0220 	orr.w	r2, r2, #32
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	f002 021f 	and.w	r2, r2, #31
 8002e26:	2101      	movs	r1, #1
 8002e28:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1b4      	bne.n	8002d9c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e36:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8119 	beq.w	800307a <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8082 	beq.w	8002f5e <HAL_RCC_OscConfig+0x71a>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002e6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_RCC_OscConfig+0x650>)
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2301      	movs	r3, #1
 8002e82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e84:	f7fe fc56 	bl	8001734 <HAL_GetTick>
 8002e88:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8c:	e00f      	b.n	8002eae <HAL_RCC_OscConfig+0x66a>
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fe fc4c 	bl	8001734 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d902      	bls.n	8002eae <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	f000 bce8 	b.w	800387e <HAL_RCC_OscConfig+0x103a>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002eb8:	fa93 f2a3 	rbit	r2, r3
 8002ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ece:	2202      	movs	r2, #2
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	fa93 f2a3 	rbit	r2, r3
 8002ee0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002efa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	fa93 f2a3 	rbit	r2, r3
 8002f04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4bb0      	ldr	r3, [pc, #704]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8002f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	6019      	str	r1, [r3, #0]
 8002f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f1a3 	rbit	r1, r3
 8002f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f30:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f34:	6019      	str	r1, [r3, #0]
  return result;
 8002f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d09d      	beq.n	8002e98 <HAL_RCC_OscConfig+0x654>
 8002f5c:	e08d      	b.n	800307a <HAL_RCC_OscConfig+0x836>
 8002f5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f62:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f6e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	fa93 f2a3 	rbit	r2, r3
 8002f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f80:	601a      	str	r2, [r3, #0]
  return result;
 8002f82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f86:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f8a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	4b8f      	ldr	r3, [pc, #572]	@ (80031d4 <HAL_RCC_OscConfig+0x990>)
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7fe fbc8 	bl	8001734 <HAL_GetTick>
 8002fa4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fe fbc3 	bl	8001734 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d902      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	f000 bc5f 	b.w	800387e <HAL_RCC_OscConfig+0x103a>
 8002fc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002fc8:	2202      	movs	r2, #2
 8002fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f2a3 	rbit	r2, r3
 8002fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fde:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002fec:	2202      	movs	r2, #2
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003002:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800300c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003010:	2202      	movs	r2, #2
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003018:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	fa93 f2a3 	rbit	r2, r3
 8003022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003026:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800302a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302c:	4b68      	ldr	r3, [pc, #416]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 800302e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003034:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003038:	2102      	movs	r1, #2
 800303a:	6019      	str	r1, [r3, #0]
 800303c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003040:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f1a3 	rbit	r1, r3
 800304a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800304e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003052:	6019      	str	r1, [r3, #0]
  return result;
 8003054:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003058:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d197      	bne.n	8002faa <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800307e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 819c 	beq.w	80033c8 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003090:	2300      	movs	r3, #0
 8003092:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003096:	4b4e      	ldr	r3, [pc, #312]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d116      	bne.n	80030d0 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	4b4b      	ldr	r3, [pc, #300]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4a4a      	ldr	r2, [pc, #296]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	61d3      	str	r3, [r2, #28]
 80030ae:	4b48      	ldr	r3, [pc, #288]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80030b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030c8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	4b41      	ldr	r3, [pc, #260]	@ (80031d8 <HAL_RCC_OscConfig+0x994>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d11a      	bne.n	8003112 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030dc:	4b3e      	ldr	r3, [pc, #248]	@ (80031d8 <HAL_RCC_OscConfig+0x994>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3d      	ldr	r2, [pc, #244]	@ (80031d8 <HAL_RCC_OscConfig+0x994>)
 80030e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e8:	f7fe fb24 	bl	8001734 <HAL_GetTick>
 80030ec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	e009      	b.n	8003106 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f2:	f7fe fb1f 	bl	8001734 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	@ 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e3bb      	b.n	800387e <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	4b34      	ldr	r3, [pc, #208]	@ (80031d8 <HAL_RCC_OscConfig+0x994>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ef      	beq.n	80030f2 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003116:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d106      	bne.n	8003130 <HAL_RCC_OscConfig+0x8ec>
 8003122:	4b2b      	ldr	r3, [pc, #172]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a2a      	ldr	r2, [pc, #168]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6213      	str	r3, [r2, #32]
 800312e:	e035      	b.n	800319c <HAL_RCC_OscConfig+0x958>
 8003130:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003134:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10c      	bne.n	800315a <HAL_RCC_OscConfig+0x916>
 8003140:	4b23      	ldr	r3, [pc, #140]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4a22      	ldr	r2, [pc, #136]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6213      	str	r3, [r2, #32]
 800314c:	4b20      	ldr	r3, [pc, #128]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4a1f      	ldr	r2, [pc, #124]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8003152:	f023 0304 	bic.w	r3, r3, #4
 8003156:	6213      	str	r3, [r2, #32]
 8003158:	e020      	b.n	800319c <HAL_RCC_OscConfig+0x958>
 800315a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800315e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b05      	cmp	r3, #5
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x940>
 800316a:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a18      	ldr	r2, [pc, #96]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8003170:	f043 0304 	orr.w	r3, r3, #4
 8003174:	6213      	str	r3, [r2, #32]
 8003176:	4b16      	ldr	r3, [pc, #88]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	4a15      	ldr	r2, [pc, #84]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6213      	str	r3, [r2, #32]
 8003182:	e00b      	b.n	800319c <HAL_RCC_OscConfig+0x958>
 8003184:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4a11      	ldr	r2, [pc, #68]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	6213      	str	r3, [r2, #32]
 8003190:	4b0f      	ldr	r3, [pc, #60]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4a0e      	ldr	r2, [pc, #56]	@ (80031d0 <HAL_RCC_OscConfig+0x98c>)
 8003196:	f023 0304 	bic.w	r3, r3, #4
 800319a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800319c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8085 	beq.w	80032b8 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fe fac1 	bl	8001734 <HAL_GetTick>
 80031b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	e011      	b.n	80031dc <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fe fabc 	bl	8001734 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d907      	bls.n	80031dc <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e356      	b.n	800387e <HAL_RCC_OscConfig+0x103a>
 80031d0:	40021000 	.word	0x40021000
 80031d4:	10908120 	.word	0x10908120
 80031d8:	40007000 	.word	0x40007000
 80031dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80031e4:	2202      	movs	r2, #2
 80031e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031fa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003204:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003208:	2202      	movs	r2, #2
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003210:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	fa93 f2a3 	rbit	r2, r3
 800321a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800321e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003222:	601a      	str	r2, [r3, #0]
  return result;
 8003224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003228:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800322c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <HAL_RCC_OscConfig+0xa00>
 800323e:	4b98      	ldr	r3, [pc, #608]	@ (80034a0 <HAL_RCC_OscConfig+0xc5c>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	e013      	b.n	800326c <HAL_RCC_OscConfig+0xa28>
 8003244:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003248:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800324c:	2202      	movs	r2, #2
 800324e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003254:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003262:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	4b8d      	ldr	r3, [pc, #564]	@ (80034a0 <HAL_RCC_OscConfig+0xc5c>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003270:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003274:	2102      	movs	r1, #2
 8003276:	6011      	str	r1, [r2, #0]
 8003278:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800327c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	fa92 f1a2 	rbit	r1, r2
 8003286:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800328a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800328e:	6011      	str	r1, [r2, #0]
  return result;
 8003290:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003294:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	fab2 f282 	clz	r2, r2
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	f002 021f 	and.w	r2, r2, #31
 80032aa:	2101      	movs	r1, #1
 80032ac:	fa01 f202 	lsl.w	r2, r1, r2
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d080      	beq.n	80031b8 <HAL_RCC_OscConfig+0x974>
 80032b6:	e07d      	b.n	80033b4 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b8:	f7fe fa3c 	bl	8001734 <HAL_GetTick>
 80032bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	e00b      	b.n	80032da <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fe fa37 	bl	8001734 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e2d1      	b.n	800387e <HAL_RCC_OscConfig+0x103a>
 80032da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032de:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80032e2:	2202      	movs	r2, #2
 80032e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ea:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	fa93 f2a3 	rbit	r2, r3
 80032f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003302:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003306:	2202      	movs	r2, #2
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003320:	601a      	str	r2, [r3, #0]
  return result;
 8003322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003326:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800332a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <HAL_RCC_OscConfig+0xafe>
 800333c:	4b58      	ldr	r3, [pc, #352]	@ (80034a0 <HAL_RCC_OscConfig+0xc5c>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	e013      	b.n	800336a <HAL_RCC_OscConfig+0xb26>
 8003342:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003346:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800334a:	2202      	movs	r2, #2
 800334c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003352:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003360:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	4b4e      	ldr	r3, [pc, #312]	@ (80034a0 <HAL_RCC_OscConfig+0xc5c>)
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800336e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003372:	2102      	movs	r1, #2
 8003374:	6011      	str	r1, [r2, #0]
 8003376:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800337a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	fa92 f1a2 	rbit	r1, r2
 8003384:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003388:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800338c:	6011      	str	r1, [r2, #0]
  return result;
 800338e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003392:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	fab2 f282 	clz	r2, r2
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f002 021f 	and.w	r2, r2, #31
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f202 	lsl.w	r2, r1, r2
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d186      	bne.n	80032c2 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033b4:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033bc:	4b38      	ldr	r3, [pc, #224]	@ (80034a0 <HAL_RCC_OscConfig+0xc5c>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4a37      	ldr	r2, [pc, #220]	@ (80034a0 <HAL_RCC_OscConfig+0xc5c>)
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8251 	beq.w	800387c <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033da:	4b31      	ldr	r3, [pc, #196]	@ (80034a0 <HAL_RCC_OscConfig+0xc5c>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	f000 820f 	beq.w	8003806 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	f040 8165 	bne.w	80036c4 <HAL_RCC_OscConfig+0xe80>
 80033fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033fe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003402:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800340c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800341a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800341e:	601a      	str	r2, [r3, #0]
  return result;
 8003420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003424:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003428:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003434:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	461a      	mov	r2, r3
 800343c:	2300      	movs	r3, #0
 800343e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe f978 	bl	8001734 <HAL_GetTick>
 8003444:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003448:	e009      	b.n	800345e <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe f973 	bl	8001734 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e20f      	b.n	800387e <HAL_RCC_OscConfig+0x103a>
 800345e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003462:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003466:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800346a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003470:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	fa93 f2a3 	rbit	r2, r3
 800347a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800347e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003482:	601a      	str	r2, [r3, #0]
  return result;
 8003484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003488:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800348c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b3f      	cmp	r3, #63	@ 0x3f
 8003496:	d805      	bhi.n	80034a4 <HAL_RCC_OscConfig+0xc60>
 8003498:	4b01      	ldr	r3, [pc, #4]	@ (80034a0 <HAL_RCC_OscConfig+0xc5c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	e02a      	b.n	80034f4 <HAL_RCC_OscConfig+0xcb0>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80034ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034c4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ce:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80034d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034dc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	fa93 f2a3 	rbit	r2, r3
 80034e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ea:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	4bca      	ldr	r3, [pc, #808]	@ (800381c <HAL_RCC_OscConfig+0xfd8>)
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034f8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80034fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003500:	6011      	str	r1, [r2, #0]
 8003502:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003506:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	fa92 f1a2 	rbit	r1, r2
 8003510:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003514:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003518:	6011      	str	r1, [r2, #0]
  return result;
 800351a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800351e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	fab2 f282 	clz	r2, r2
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	f042 0220 	orr.w	r2, r2, #32
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f002 021f 	and.w	r2, r2, #31
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f202 	lsl.w	r2, r1, r2
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d184      	bne.n	800344a <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003540:	4bb6      	ldr	r3, [pc, #728]	@ (800381c <HAL_RCC_OscConfig+0xfd8>)
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	f023 020f 	bic.w	r2, r3, #15
 8003548:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800354c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	49b1      	ldr	r1, [pc, #708]	@ (800381c <HAL_RCC_OscConfig+0xfd8>)
 8003556:	4313      	orrs	r3, r2
 8003558:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800355a:	4bb0      	ldr	r3, [pc, #704]	@ (800381c <HAL_RCC_OscConfig+0xfd8>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003566:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6a19      	ldr	r1, [r3, #32]
 800356e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003572:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	430b      	orrs	r3, r1
 800357c:	49a7      	ldr	r1, [pc, #668]	@ (800381c <HAL_RCC_OscConfig+0xfd8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
 8003582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003586:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800358a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800358e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003594:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f2a3 	rbit	r2, r3
 800359e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80035a6:	601a      	str	r2, [r3, #0]
  return result;
 80035a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80035b0:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	461a      	mov	r2, r3
 80035c4:	2301      	movs	r3, #1
 80035c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe f8b4 	bl	8001734 <HAL_GetTick>
 80035cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d0:	e009      	b.n	80035e6 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fe f8af 	bl	8001734 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e14b      	b.n	800387e <HAL_RCC_OscConfig+0x103a>
 80035e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80035ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035f8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	fa93 f2a3 	rbit	r2, r3
 8003602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003606:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800360a:	601a      	str	r2, [r3, #0]
  return result;
 800360c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003610:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003614:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b3f      	cmp	r3, #63	@ 0x3f
 800361e:	d802      	bhi.n	8003626 <HAL_RCC_OscConfig+0xde2>
 8003620:	4b7e      	ldr	r3, [pc, #504]	@ (800381c <HAL_RCC_OscConfig+0xfd8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	e027      	b.n	8003676 <HAL_RCC_OscConfig+0xe32>
 8003626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800362a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800362e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003638:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	fa93 f2a3 	rbit	r2, r3
 8003642:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003646:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003650:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003654:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800365e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	fa93 f2a3 	rbit	r2, r3
 8003668:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800366c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	4b6a      	ldr	r3, [pc, #424]	@ (800381c <HAL_RCC_OscConfig+0xfd8>)
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800367a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800367e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003682:	6011      	str	r1, [r2, #0]
 8003684:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003688:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	fa92 f1a2 	rbit	r1, r2
 8003692:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003696:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800369a:	6011      	str	r1, [r2, #0]
  return result;
 800369c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036a0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	fab2 f282 	clz	r2, r2
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	f042 0220 	orr.w	r2, r2, #32
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	f002 021f 	and.w	r2, r2, #31
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f202 	lsl.w	r2, r1, r2
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d087      	beq.n	80035d2 <HAL_RCC_OscConfig+0xd8e>
 80036c2:	e0db      	b.n	800387c <HAL_RCC_OscConfig+0x1038>
 80036c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80036cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	fa93 f2a3 	rbit	r2, r3
 80036e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036e4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80036e8:	601a      	str	r2, [r3, #0]
  return result;
 80036ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80036f2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f4:	fab3 f383 	clz	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036fe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	461a      	mov	r2, r3
 8003706:	2300      	movs	r3, #0
 8003708:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe f813 	bl	8001734 <HAL_GetTick>
 800370e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003712:	e009      	b.n	8003728 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe f80e 	bl	8001734 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e0aa      	b.n	800387e <HAL_RCC_OscConfig+0x103a>
 8003728:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800372c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003730:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800373a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	fa93 f2a3 	rbit	r2, r3
 8003744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003748:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800374c:	601a      	str	r2, [r3, #0]
  return result;
 800374e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003752:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003756:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003760:	d802      	bhi.n	8003768 <HAL_RCC_OscConfig+0xf24>
 8003762:	4b2e      	ldr	r3, [pc, #184]	@ (800381c <HAL_RCC_OscConfig+0xfd8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	e027      	b.n	80037b8 <HAL_RCC_OscConfig+0xf74>
 8003768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800376c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003770:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800377a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	fa93 f2a3 	rbit	r2, r3
 8003784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003788:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003792:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003796:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037a0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	fa93 f2a3 	rbit	r2, r3
 80037aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ae:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	4b19      	ldr	r3, [pc, #100]	@ (800381c <HAL_RCC_OscConfig+0xfd8>)
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037bc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80037c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037c4:	6011      	str	r1, [r2, #0]
 80037c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037ca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	fa92 f1a2 	rbit	r1, r2
 80037d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037d8:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80037dc:	6011      	str	r1, [r2, #0]
  return result;
 80037de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037e2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	fab2 f282 	clz	r2, r2
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	f042 0220 	orr.w	r2, r2, #32
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	f002 021f 	and.w	r2, r2, #31
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f202 	lsl.w	r2, r1, r2
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d187      	bne.n	8003714 <HAL_RCC_OscConfig+0xed0>
 8003804:	e03a      	b.n	800387c <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003806:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800380a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d104      	bne.n	8003820 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e031      	b.n	800387e <HAL_RCC_OscConfig+0x103a>
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003820:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <HAL_RCC_OscConfig+0x1044>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003828:	4b17      	ldr	r3, [pc, #92]	@ (8003888 <HAL_RCC_OscConfig+0x1044>)
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003830:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003834:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003838:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800383c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	429a      	cmp	r2, r3
 8003846:	d117      	bne.n	8003878 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003848:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800384c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003850:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003854:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800385c:	429a      	cmp	r2, r3
 800385e:	d10b      	bne.n	8003878 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003860:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800386c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000

0800388c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b09e      	sub	sp, #120	@ 0x78
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e154      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a4:	4b89      	ldr	r3, [pc, #548]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d910      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b86      	ldr	r3, [pc, #536]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 0207 	bic.w	r2, r3, #7
 80038ba:	4984      	ldr	r1, [pc, #528]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b82      	ldr	r3, [pc, #520]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e13c      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4978      	ldr	r1, [pc, #480]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80cd 	beq.w	8003a9a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d137      	bne.n	8003978 <HAL_RCC_ClockConfig+0xec>
 8003908:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800390c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003916:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003918:	fab3 f383 	clz	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003920:	d802      	bhi.n	8003928 <HAL_RCC_ClockConfig+0x9c>
 8003922:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e00f      	b.n	8003948 <HAL_RCC_ClockConfig+0xbc>
 8003928:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800392c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	667b      	str	r3, [r7, #100]	@ 0x64
 8003936:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800393a:	663b      	str	r3, [r7, #96]	@ 0x60
 800393c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003944:	4b62      	ldr	r3, [pc, #392]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800394c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800394e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003950:	fa92 f2a2 	rbit	r2, r2
 8003954:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003956:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003958:	fab2 f282 	clz	r2, r2
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f042 0220 	orr.w	r2, r2, #32
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	f002 021f 	and.w	r2, r2, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f202 	lsl.w	r2, r1, r2
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d171      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0ea      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d137      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x164>
 8003980:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003984:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003988:	fa93 f3a3 	rbit	r3, r3
 800398c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800398e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003990:	fab3 f383 	clz	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b3f      	cmp	r3, #63	@ 0x3f
 8003998:	d802      	bhi.n	80039a0 <HAL_RCC_ClockConfig+0x114>
 800399a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	e00f      	b.n	80039c0 <HAL_RCC_ClockConfig+0x134>
 80039a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80039b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039bc:	4b44      	ldr	r3, [pc, #272]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039c4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80039c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039c8:	fa92 f2a2 	rbit	r2, r2
 80039cc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80039ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039d0:	fab2 f282 	clz	r2, r2
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	f042 0220 	orr.w	r2, r2, #32
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	f002 021f 	and.w	r2, r2, #31
 80039e0:	2101      	movs	r1, #1
 80039e2:	fa01 f202 	lsl.w	r2, r1, r2
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d135      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0ae      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2c2>
 80039f0:	2302      	movs	r3, #2
 80039f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80039fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a06:	d802      	bhi.n	8003a0e <HAL_RCC_ClockConfig+0x182>
 8003a08:	4b31      	ldr	r3, [pc, #196]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	e00d      	b.n	8003a2a <HAL_RCC_ClockConfig+0x19e>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	623b      	str	r3, [r7, #32]
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	61ba      	str	r2, [r7, #24]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	fa92 f2a2 	rbit	r2, r2
 8003a34:	617a      	str	r2, [r7, #20]
  return result;
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	fab2 f282 	clz	r2, r2
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	f042 0220 	orr.w	r2, r2, #32
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f002 021f 	and.w	r2, r2, #31
 8003a48:	2101      	movs	r1, #1
 8003a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e07a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 0203 	bic.w	r2, r3, #3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	491a      	ldr	r1, [pc, #104]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a6a:	f7fd fe63 	bl	8001734 <HAL_GetTick>
 8003a6e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a72:	f7fd fe5f 	bl	8001734 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e062      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a88:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 020c 	and.w	r2, r3, #12
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d1eb      	bne.n	8003a72 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d215      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa8:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 0207 	bic.w	r2, r3, #7
 8003ab0:	4906      	ldr	r1, [pc, #24]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d006      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e041      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2c2>
 8003aca:	bf00      	nop
 8003acc:	40022000 	.word	0x40022000
 8003ad0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b58 <HAL_RCC_ClockConfig+0x2cc>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	491a      	ldr	r1, [pc, #104]	@ (8003b58 <HAL_RCC_ClockConfig+0x2cc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afe:	4b16      	ldr	r3, [pc, #88]	@ (8003b58 <HAL_RCC_ClockConfig+0x2cc>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4912      	ldr	r1, [pc, #72]	@ (8003b58 <HAL_RCC_ClockConfig+0x2cc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b12:	f000 f829 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8003b16:	4601      	mov	r1, r0
 8003b18:	4b0f      	ldr	r3, [pc, #60]	@ (8003b58 <HAL_RCC_ClockConfig+0x2cc>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b20:	22f0      	movs	r2, #240	@ 0xf0
 8003b22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	fa92 f2a2 	rbit	r2, r2
 8003b2a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	fab2 f282 	clz	r2, r2
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	40d3      	lsrs	r3, r2
 8003b36:	4a09      	ldr	r2, [pc, #36]	@ (8003b5c <HAL_RCC_ClockConfig+0x2d0>)
 8003b38:	5cd3      	ldrb	r3, [r2, r3]
 8003b3a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b3e:	4a08      	ldr	r2, [pc, #32]	@ (8003b60 <HAL_RCC_ClockConfig+0x2d4>)
 8003b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b42:	4b08      	ldr	r3, [pc, #32]	@ (8003b64 <HAL_RCC_ClockConfig+0x2d8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd fdb0 	bl	80016ac <HAL_InitTick>
  
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3778      	adds	r7, #120	@ 0x78
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	080077bc 	.word	0x080077bc
 8003b60:	20000000 	.word	0x20000000
 8003b64:	20000004 	.word	0x20000004

08003b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003b82:	4b1f      	ldr	r3, [pc, #124]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d002      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x30>
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d003      	beq.n	8003b9e <HAL_RCC_GetSysClockFreq+0x36>
 8003b96:	e029      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b98:	4b1a      	ldr	r3, [pc, #104]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b9a:	613b      	str	r3, [r7, #16]
      break;
 8003b9c:	e029      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	0c9b      	lsrs	r3, r3, #18
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	4a18      	ldr	r2, [pc, #96]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ba8:	5cd3      	ldrb	r3, [r2, r3]
 8003baa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003bac:	4b14      	ldr	r3, [pc, #80]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	4a15      	ldr	r2, [pc, #84]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e007      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	613b      	str	r3, [r7, #16]
      break;
 8003bea:	e002      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bec:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bee:	613b      	str	r3, [r7, #16]
      break;
 8003bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf2:	693b      	ldr	r3, [r7, #16]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40021000 	.word	0x40021000
 8003c04:	007a1200 	.word	0x007a1200
 8003c08:	080077d4 	.word	0x080077d4
 8003c0c:	080077e4 	.word	0x080077e4

08003c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c14:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000000 	.word	0x20000000

08003c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c2e:	f7ff ffef 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c32:	4601      	mov	r1, r0
 8003c34:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c3c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003c40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	fa92 f2a2 	rbit	r2, r2
 8003c48:	603a      	str	r2, [r7, #0]
  return result;
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	fab2 f282 	clz	r2, r2
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	40d3      	lsrs	r3, r2
 8003c54:	4a04      	ldr	r2, [pc, #16]	@ (8003c68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c56:	5cd3      	ldrb	r3, [r2, r3]
 8003c58:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	080077cc 	.word	0x080077cc

08003c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c72:	f7ff ffcd 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c76:	4601      	mov	r1, r0
 8003c78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003c80:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003c84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	fa92 f2a2 	rbit	r2, r2
 8003c8c:	603a      	str	r2, [r7, #0]
  return result;
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	fab2 f282 	clz	r2, r2
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	40d3      	lsrs	r3, r2
 8003c98:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c9a:	5cd3      	ldrb	r3, [r2, r3]
 8003c9c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	080077cc 	.word	0x080077cc

08003cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b092      	sub	sp, #72	@ 0x48
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80d2 	beq.w	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10e      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	4a49      	ldr	r2, [pc, #292]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	61d3      	str	r3, [r2, #28]
 8003cec:	4b47      	ldr	r3, [pc, #284]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfe:	4b44      	ldr	r3, [pc, #272]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d118      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0a:	4b41      	ldr	r3, [pc, #260]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a40      	ldr	r2, [pc, #256]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7fd fd0d 	bl	8001734 <HAL_GetTick>
 8003d1a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	e008      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fd fd09 	bl	8001734 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b64      	cmp	r3, #100	@ 0x64
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e1d4      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	4b37      	ldr	r3, [pc, #220]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d3c:	4b33      	ldr	r3, [pc, #204]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8082 	beq.w	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d07a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b25      	ldr	r3, [pc, #148]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	461a      	mov	r2, r3
 8003d86:	2301      	movs	r3, #1
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	461a      	mov	r2, r3
 8003daa:	2300      	movs	r3, #0
 8003dac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dae:	4a17      	ldr	r2, [pc, #92]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d049      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7fd fcb9 	bl	8001734 <HAL_GetTick>
 8003dc2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fd fcb5 	bl	8001734 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e17e      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de8:	2302      	movs	r3, #2
 8003dea:	623b      	str	r3, [r7, #32]
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	61fb      	str	r3, [r7, #28]
  return result;
 8003df4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d108      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003e06:	4b01      	ldr	r3, [pc, #4]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	e00d      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40007000 	.word	0x40007000
 8003e14:	10908100 	.word	0x10908100
 8003e18:	2302      	movs	r3, #2
 8003e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	4b9a      	ldr	r3, [pc, #616]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	2202      	movs	r2, #2
 8003e2a:	613a      	str	r2, [r7, #16]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	fa92 f2a2 	rbit	r2, r2
 8003e32:	60fa      	str	r2, [r7, #12]
  return result;
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	fab2 f282 	clz	r2, r2
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	f002 021f 	and.w	r2, r2, #31
 8003e46:	2101      	movs	r1, #1
 8003e48:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0b9      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e52:	4b8f      	ldr	r3, [pc, #572]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	498c      	ldr	r1, [pc, #560]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b88      	ldr	r3, [pc, #544]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	4a87      	ldr	r2, [pc, #540]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e84:	4b82      	ldr	r3, [pc, #520]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	f023 0203 	bic.w	r2, r3, #3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	497f      	ldr	r1, [pc, #508]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	4978      	ldr	r1, [pc, #480]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec0:	4b73      	ldr	r3, [pc, #460]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	4970      	ldr	r1, [pc, #448]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ede:	4b6c      	ldr	r3, [pc, #432]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	f023 0210 	bic.w	r2, r3, #16
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4969      	ldr	r1, [pc, #420]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003efc:	4b64      	ldr	r3, [pc, #400]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f08:	4961      	ldr	r1, [pc, #388]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	f023 0220 	bic.w	r2, r3, #32
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	495a      	ldr	r1, [pc, #360]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f38:	4b55      	ldr	r3, [pc, #340]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	4952      	ldr	r1, [pc, #328]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f56:	4b4e      	ldr	r3, [pc, #312]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	494b      	ldr	r1, [pc, #300]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f74:	4b46      	ldr	r3, [pc, #280]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4943      	ldr	r1, [pc, #268]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f92:	4b3f      	ldr	r3, [pc, #252]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	493c      	ldr	r1, [pc, #240]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fb0:	4b37      	ldr	r3, [pc, #220]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	4934      	ldr	r1, [pc, #208]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003fce:	4b30      	ldr	r3, [pc, #192]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	492d      	ldr	r1, [pc, #180]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003fec:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff8:	4925      	ldr	r1, [pc, #148]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800400a:	4b21      	ldr	r3, [pc, #132]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	491e      	ldr	r1, [pc, #120]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004018:	4313      	orrs	r3, r2
 800401a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004028:	4b19      	ldr	r3, [pc, #100]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	4916      	ldr	r1, [pc, #88]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004036:	4313      	orrs	r3, r2
 8004038:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004046:	4b12      	ldr	r3, [pc, #72]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004052:	490f      	ldr	r1, [pc, #60]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004054:	4313      	orrs	r3, r2
 8004056:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004064:	4b0a      	ldr	r3, [pc, #40]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004068:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004070:	4907      	ldr	r1, [pc, #28]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00c      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004082:	4b03      	ldr	r3, [pc, #12]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	e002      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	4913      	ldr	r1, [pc, #76]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004098:	4313      	orrs	r3, r2
 800409a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80040a8:	4b0e      	ldr	r3, [pc, #56]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b4:	490b      	ldr	r1, [pc, #44]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80040c6:	4b07      	ldr	r3, [pc, #28]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d2:	4904      	ldr	r1, [pc, #16]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3748      	adds	r7, #72	@ 0x48
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000

080040e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e040      	b.n	800417c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fd f944 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2224      	movs	r2, #36	@ 0x24
 8004114:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fa86 	bl	8004640 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8af 	bl	8004298 <UART_SetConfig>
 800413a:	4603      	mov	r3, r0
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e01b      	b.n	800417c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fb05 	bl	8004784 <UART_CheckIdleState>
 800417a:	4603      	mov	r3, r0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	@ 0x28
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004198:	2b20      	cmp	r3, #32
 800419a:	d177      	bne.n	800428c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_UART_Transmit+0x24>
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e070      	b.n	800428e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2221      	movs	r2, #33	@ 0x21
 80041b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ba:	f7fd fabb 	bl	8001734 <HAL_GetTick>
 80041be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d8:	d108      	bne.n	80041ec <HAL_UART_Transmit+0x68>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e003      	b.n	80041f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041f4:	e02f      	b.n	8004256 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2200      	movs	r2, #0
 80041fe:	2180      	movs	r1, #128	@ 0x80
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fb67 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e03b      	b.n	800428e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004228:	b292      	uxth	r2, r2
 800422a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	3302      	adds	r3, #2
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	e007      	b.n	8004244 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3301      	adds	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1c9      	bne.n	80041f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	2140      	movs	r1, #64	@ 0x40
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fb31 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e005      	b.n	800428e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b92      	ldr	r3, [pc, #584]	@ (800450c <UART_SetConfig+0x274>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	6979      	ldr	r1, [r7, #20]
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	430a      	orrs	r2, r1
 8004308:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a80      	ldr	r2, [pc, #512]	@ (8004510 <UART_SetConfig+0x278>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d120      	bne.n	8004356 <UART_SetConfig+0xbe>
 8004314:	4b7f      	ldr	r3, [pc, #508]	@ (8004514 <UART_SetConfig+0x27c>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	2b03      	cmp	r3, #3
 800431e:	d817      	bhi.n	8004350 <UART_SetConfig+0xb8>
 8004320:	a201      	add	r2, pc, #4	@ (adr r2, 8004328 <UART_SetConfig+0x90>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	08004339 	.word	0x08004339
 800432c:	08004345 	.word	0x08004345
 8004330:	0800434b 	.word	0x0800434b
 8004334:	0800433f 	.word	0x0800433f
 8004338:	2301      	movs	r3, #1
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e0b5      	b.n	80044aa <UART_SetConfig+0x212>
 800433e:	2302      	movs	r3, #2
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e0b2      	b.n	80044aa <UART_SetConfig+0x212>
 8004344:	2304      	movs	r3, #4
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e0af      	b.n	80044aa <UART_SetConfig+0x212>
 800434a:	2308      	movs	r3, #8
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e0ac      	b.n	80044aa <UART_SetConfig+0x212>
 8004350:	2310      	movs	r3, #16
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e0a9      	b.n	80044aa <UART_SetConfig+0x212>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6f      	ldr	r2, [pc, #444]	@ (8004518 <UART_SetConfig+0x280>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d124      	bne.n	80043aa <UART_SetConfig+0x112>
 8004360:	4b6c      	ldr	r3, [pc, #432]	@ (8004514 <UART_SetConfig+0x27c>)
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004368:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800436c:	d011      	beq.n	8004392 <UART_SetConfig+0xfa>
 800436e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004372:	d817      	bhi.n	80043a4 <UART_SetConfig+0x10c>
 8004374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004378:	d011      	beq.n	800439e <UART_SetConfig+0x106>
 800437a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800437e:	d811      	bhi.n	80043a4 <UART_SetConfig+0x10c>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <UART_SetConfig+0xf4>
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004388:	d006      	beq.n	8004398 <UART_SetConfig+0x100>
 800438a:	e00b      	b.n	80043a4 <UART_SetConfig+0x10c>
 800438c:	2300      	movs	r3, #0
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e08b      	b.n	80044aa <UART_SetConfig+0x212>
 8004392:	2302      	movs	r3, #2
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e088      	b.n	80044aa <UART_SetConfig+0x212>
 8004398:	2304      	movs	r3, #4
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e085      	b.n	80044aa <UART_SetConfig+0x212>
 800439e:	2308      	movs	r3, #8
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e082      	b.n	80044aa <UART_SetConfig+0x212>
 80043a4:	2310      	movs	r3, #16
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e07f      	b.n	80044aa <UART_SetConfig+0x212>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a5b      	ldr	r2, [pc, #364]	@ (800451c <UART_SetConfig+0x284>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d124      	bne.n	80043fe <UART_SetConfig+0x166>
 80043b4:	4b57      	ldr	r3, [pc, #348]	@ (8004514 <UART_SetConfig+0x27c>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80043bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80043c0:	d011      	beq.n	80043e6 <UART_SetConfig+0x14e>
 80043c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80043c6:	d817      	bhi.n	80043f8 <UART_SetConfig+0x160>
 80043c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043cc:	d011      	beq.n	80043f2 <UART_SetConfig+0x15a>
 80043ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043d2:	d811      	bhi.n	80043f8 <UART_SetConfig+0x160>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <UART_SetConfig+0x148>
 80043d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043dc:	d006      	beq.n	80043ec <UART_SetConfig+0x154>
 80043de:	e00b      	b.n	80043f8 <UART_SetConfig+0x160>
 80043e0:	2300      	movs	r3, #0
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	e061      	b.n	80044aa <UART_SetConfig+0x212>
 80043e6:	2302      	movs	r3, #2
 80043e8:	77fb      	strb	r3, [r7, #31]
 80043ea:	e05e      	b.n	80044aa <UART_SetConfig+0x212>
 80043ec:	2304      	movs	r3, #4
 80043ee:	77fb      	strb	r3, [r7, #31]
 80043f0:	e05b      	b.n	80044aa <UART_SetConfig+0x212>
 80043f2:	2308      	movs	r3, #8
 80043f4:	77fb      	strb	r3, [r7, #31]
 80043f6:	e058      	b.n	80044aa <UART_SetConfig+0x212>
 80043f8:	2310      	movs	r3, #16
 80043fa:	77fb      	strb	r3, [r7, #31]
 80043fc:	e055      	b.n	80044aa <UART_SetConfig+0x212>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a47      	ldr	r2, [pc, #284]	@ (8004520 <UART_SetConfig+0x288>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d124      	bne.n	8004452 <UART_SetConfig+0x1ba>
 8004408:	4b42      	ldr	r3, [pc, #264]	@ (8004514 <UART_SetConfig+0x27c>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004410:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004414:	d011      	beq.n	800443a <UART_SetConfig+0x1a2>
 8004416:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800441a:	d817      	bhi.n	800444c <UART_SetConfig+0x1b4>
 800441c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004420:	d011      	beq.n	8004446 <UART_SetConfig+0x1ae>
 8004422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004426:	d811      	bhi.n	800444c <UART_SetConfig+0x1b4>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <UART_SetConfig+0x19c>
 800442c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004430:	d006      	beq.n	8004440 <UART_SetConfig+0x1a8>
 8004432:	e00b      	b.n	800444c <UART_SetConfig+0x1b4>
 8004434:	2300      	movs	r3, #0
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e037      	b.n	80044aa <UART_SetConfig+0x212>
 800443a:	2302      	movs	r3, #2
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	e034      	b.n	80044aa <UART_SetConfig+0x212>
 8004440:	2304      	movs	r3, #4
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e031      	b.n	80044aa <UART_SetConfig+0x212>
 8004446:	2308      	movs	r3, #8
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e02e      	b.n	80044aa <UART_SetConfig+0x212>
 800444c:	2310      	movs	r3, #16
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e02b      	b.n	80044aa <UART_SetConfig+0x212>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a33      	ldr	r2, [pc, #204]	@ (8004524 <UART_SetConfig+0x28c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d124      	bne.n	80044a6 <UART_SetConfig+0x20e>
 800445c:	4b2d      	ldr	r3, [pc, #180]	@ (8004514 <UART_SetConfig+0x27c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004464:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004468:	d011      	beq.n	800448e <UART_SetConfig+0x1f6>
 800446a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800446e:	d817      	bhi.n	80044a0 <UART_SetConfig+0x208>
 8004470:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004474:	d011      	beq.n	800449a <UART_SetConfig+0x202>
 8004476:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800447a:	d811      	bhi.n	80044a0 <UART_SetConfig+0x208>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <UART_SetConfig+0x1f0>
 8004480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004484:	d006      	beq.n	8004494 <UART_SetConfig+0x1fc>
 8004486:	e00b      	b.n	80044a0 <UART_SetConfig+0x208>
 8004488:	2300      	movs	r3, #0
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e00d      	b.n	80044aa <UART_SetConfig+0x212>
 800448e:	2302      	movs	r3, #2
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e00a      	b.n	80044aa <UART_SetConfig+0x212>
 8004494:	2304      	movs	r3, #4
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e007      	b.n	80044aa <UART_SetConfig+0x212>
 800449a:	2308      	movs	r3, #8
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e004      	b.n	80044aa <UART_SetConfig+0x212>
 80044a0:	2310      	movs	r3, #16
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e001      	b.n	80044aa <UART_SetConfig+0x212>
 80044a6:	2310      	movs	r3, #16
 80044a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b2:	d16b      	bne.n	800458c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80044b4:	7ffb      	ldrb	r3, [r7, #31]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d838      	bhi.n	800452c <UART_SetConfig+0x294>
 80044ba:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <UART_SetConfig+0x228>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	080044ed 	.word	0x080044ed
 80044c8:	080044f5 	.word	0x080044f5
 80044cc:	0800452d 	.word	0x0800452d
 80044d0:	080044fb 	.word	0x080044fb
 80044d4:	0800452d 	.word	0x0800452d
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	0800452d 	.word	0x0800452d
 80044e0:	08004503 	.word	0x08004503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e4:	f7ff fba0 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 80044e8:	61b8      	str	r0, [r7, #24]
        break;
 80044ea:	e024      	b.n	8004536 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ec:	f7ff fbbe 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 80044f0:	61b8      	str	r0, [r7, #24]
        break;
 80044f2:	e020      	b.n	8004536 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004528 <UART_SetConfig+0x290>)
 80044f6:	61bb      	str	r3, [r7, #24]
        break;
 80044f8:	e01d      	b.n	8004536 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fa:	f7ff fb35 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 80044fe:	61b8      	str	r0, [r7, #24]
        break;
 8004500:	e019      	b.n	8004536 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004506:	61bb      	str	r3, [r7, #24]
        break;
 8004508:	e015      	b.n	8004536 <UART_SetConfig+0x29e>
 800450a:	bf00      	nop
 800450c:	efff69f3 	.word	0xefff69f3
 8004510:	40013800 	.word	0x40013800
 8004514:	40021000 	.word	0x40021000
 8004518:	40004400 	.word	0x40004400
 800451c:	40004800 	.word	0x40004800
 8004520:	40004c00 	.word	0x40004c00
 8004524:	40005000 	.word	0x40005000
 8004528:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	77bb      	strb	r3, [r7, #30]
        break;
 8004534:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d073      	beq.n	8004624 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	005a      	lsls	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	441a      	add	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b0f      	cmp	r3, #15
 8004556:	d916      	bls.n	8004586 <UART_SetConfig+0x2ee>
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800455e:	d212      	bcs.n	8004586 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f023 030f 	bic.w	r3, r3, #15
 8004568:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	b29b      	uxth	r3, r3
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	b29a      	uxth	r2, r3
 8004576:	89fb      	ldrh	r3, [r7, #14]
 8004578:	4313      	orrs	r3, r2
 800457a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	89fa      	ldrh	r2, [r7, #14]
 8004582:	60da      	str	r2, [r3, #12]
 8004584:	e04e      	b.n	8004624 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	77bb      	strb	r3, [r7, #30]
 800458a:	e04b      	b.n	8004624 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800458c:	7ffb      	ldrb	r3, [r7, #31]
 800458e:	2b08      	cmp	r3, #8
 8004590:	d827      	bhi.n	80045e2 <UART_SetConfig+0x34a>
 8004592:	a201      	add	r2, pc, #4	@ (adr r2, 8004598 <UART_SetConfig+0x300>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	080045e3 	.word	0x080045e3
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	080045e3 	.word	0x080045e3
 80045b0:	080045e3 	.word	0x080045e3
 80045b4:	080045e3 	.word	0x080045e3
 80045b8:	080045db 	.word	0x080045db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045bc:	f7ff fb34 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 80045c0:	61b8      	str	r0, [r7, #24]
        break;
 80045c2:	e013      	b.n	80045ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7ff fb52 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 80045c8:	61b8      	str	r0, [r7, #24]
        break;
 80045ca:	e00f      	b.n	80045ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045cc:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <UART_SetConfig+0x3a4>)
 80045ce:	61bb      	str	r3, [r7, #24]
        break;
 80045d0:	e00c      	b.n	80045ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d2:	f7ff fac9 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 80045d6:	61b8      	str	r0, [r7, #24]
        break;
 80045d8:	e008      	b.n	80045ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045de:	61bb      	str	r3, [r7, #24]
        break;
 80045e0:	e004      	b.n	80045ec <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	77bb      	strb	r3, [r7, #30]
        break;
 80045ea:	bf00      	nop
    }

    if (pclk != 0U)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d018      	beq.n	8004624 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	085a      	lsrs	r2, r3, #1
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	441a      	add	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b0f      	cmp	r3, #15
 800460a:	d909      	bls.n	8004620 <UART_SetConfig+0x388>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004612:	d205      	bcs.n	8004620 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	b29a      	uxth	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	e001      	b.n	8004624 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004630:	7fbb      	ldrb	r3, [r7, #30]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	007a1200 	.word	0x007a1200

08004640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800473e:	d10a      	bne.n	8004756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b098      	sub	sp, #96	@ 0x60
 8004788:	af02      	add	r7, sp, #8
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004794:	f7fc ffce 	bl	8001734 <HAL_GetTick>
 8004798:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d12e      	bne.n	8004806 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f88c 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d021      	beq.n	8004806 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047e8:	e841 2300 	strex	r3, r2, [r1]
 80047ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e6      	bne.n	80047c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e062      	b.n	80048cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b04      	cmp	r3, #4
 8004812:	d149      	bne.n	80048a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004814:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800481c:	2200      	movs	r2, #0
 800481e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f856 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d03c      	beq.n	80048a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	623b      	str	r3, [r7, #32]
   return(result);
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800484c:	633b      	str	r3, [r7, #48]	@ 0x30
 800484e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e6      	bne.n	800482e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3308      	adds	r3, #8
 800487e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004880:	61fa      	str	r2, [r7, #28]
 8004882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	69b9      	ldr	r1, [r7, #24]
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	617b      	str	r3, [r7, #20]
   return(result);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e5      	bne.n	8004860 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e011      	b.n	80048cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3758      	adds	r7, #88	@ 0x58
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e4:	e04f      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048ec:	d04b      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ee:	f7fc ff21 	bl	8001734 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <UART_WaitOnFlagUntilTimeout+0x30>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e04e      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d037      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b80      	cmp	r3, #128	@ 0x80
 800491a:	d034      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b40      	cmp	r3, #64	@ 0x40
 8004920:	d031      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b08      	cmp	r3, #8
 800492e:	d110      	bne.n	8004952 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2208      	movs	r2, #8
 8004936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f838 	bl	80049ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2208      	movs	r2, #8
 8004942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e029      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800495c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004960:	d111      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800496a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f81e 	bl	80049ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e00f      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d0a0      	beq.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b095      	sub	sp, #84	@ 0x54
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80049d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e6      	bne.n	80049b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3308      	adds	r3, #8
 80049ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3308      	adds	r3, #8
 8004a06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e5      	bne.n	80049e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d118      	bne.n	8004a56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f023 0310 	bic.w	r3, r3, #16
 8004a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	6979      	ldr	r1, [r7, #20]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e6      	bne.n	8004a24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a6a:	bf00      	nop
 8004a6c:	3754      	adds	r7, #84	@ 0x54
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <__cvt>:
 8004a76:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a7a:	ec57 6b10 	vmov	r6, r7, d0
 8004a7e:	2f00      	cmp	r7, #0
 8004a80:	460c      	mov	r4, r1
 8004a82:	4619      	mov	r1, r3
 8004a84:	463b      	mov	r3, r7
 8004a86:	bfbb      	ittet	lt
 8004a88:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004a8c:	461f      	movlt	r7, r3
 8004a8e:	2300      	movge	r3, #0
 8004a90:	232d      	movlt	r3, #45	@ 0x2d
 8004a92:	700b      	strb	r3, [r1, #0]
 8004a94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a96:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004a9a:	4691      	mov	r9, r2
 8004a9c:	f023 0820 	bic.w	r8, r3, #32
 8004aa0:	bfbc      	itt	lt
 8004aa2:	4632      	movlt	r2, r6
 8004aa4:	4616      	movlt	r6, r2
 8004aa6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004aaa:	d005      	beq.n	8004ab8 <__cvt+0x42>
 8004aac:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ab0:	d100      	bne.n	8004ab4 <__cvt+0x3e>
 8004ab2:	3401      	adds	r4, #1
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	e000      	b.n	8004aba <__cvt+0x44>
 8004ab8:	2103      	movs	r1, #3
 8004aba:	ab03      	add	r3, sp, #12
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	ab02      	add	r3, sp, #8
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	ec47 6b10 	vmov	d0, r6, r7
 8004ac6:	4653      	mov	r3, sl
 8004ac8:	4622      	mov	r2, r4
 8004aca:	f000 fdd1 	bl	8005670 <_dtoa_r>
 8004ace:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	d119      	bne.n	8004b0a <__cvt+0x94>
 8004ad6:	f019 0f01 	tst.w	r9, #1
 8004ada:	d00e      	beq.n	8004afa <__cvt+0x84>
 8004adc:	eb00 0904 	add.w	r9, r0, r4
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	4639      	mov	r1, r7
 8004ae8:	f7fb fff6 	bl	8000ad8 <__aeabi_dcmpeq>
 8004aec:	b108      	cbz	r0, 8004af2 <__cvt+0x7c>
 8004aee:	f8cd 900c 	str.w	r9, [sp, #12]
 8004af2:	2230      	movs	r2, #48	@ 0x30
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	454b      	cmp	r3, r9
 8004af8:	d31e      	bcc.n	8004b38 <__cvt+0xc2>
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004afe:	1b5b      	subs	r3, r3, r5
 8004b00:	4628      	mov	r0, r5
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	b004      	add	sp, #16
 8004b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b0e:	eb00 0904 	add.w	r9, r0, r4
 8004b12:	d1e5      	bne.n	8004ae0 <__cvt+0x6a>
 8004b14:	7803      	ldrb	r3, [r0, #0]
 8004b16:	2b30      	cmp	r3, #48	@ 0x30
 8004b18:	d10a      	bne.n	8004b30 <__cvt+0xba>
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4630      	mov	r0, r6
 8004b20:	4639      	mov	r1, r7
 8004b22:	f7fb ffd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b26:	b918      	cbnz	r0, 8004b30 <__cvt+0xba>
 8004b28:	f1c4 0401 	rsb	r4, r4, #1
 8004b2c:	f8ca 4000 	str.w	r4, [sl]
 8004b30:	f8da 3000 	ldr.w	r3, [sl]
 8004b34:	4499      	add	r9, r3
 8004b36:	e7d3      	b.n	8004ae0 <__cvt+0x6a>
 8004b38:	1c59      	adds	r1, r3, #1
 8004b3a:	9103      	str	r1, [sp, #12]
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	e7d9      	b.n	8004af4 <__cvt+0x7e>

08004b40 <__exponent>:
 8004b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b42:	2900      	cmp	r1, #0
 8004b44:	bfba      	itte	lt
 8004b46:	4249      	neglt	r1, r1
 8004b48:	232d      	movlt	r3, #45	@ 0x2d
 8004b4a:	232b      	movge	r3, #43	@ 0x2b
 8004b4c:	2909      	cmp	r1, #9
 8004b4e:	7002      	strb	r2, [r0, #0]
 8004b50:	7043      	strb	r3, [r0, #1]
 8004b52:	dd29      	ble.n	8004ba8 <__exponent+0x68>
 8004b54:	f10d 0307 	add.w	r3, sp, #7
 8004b58:	461d      	mov	r5, r3
 8004b5a:	270a      	movs	r7, #10
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b62:	fb07 1416 	mls	r4, r7, r6, r1
 8004b66:	3430      	adds	r4, #48	@ 0x30
 8004b68:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	2c63      	cmp	r4, #99	@ 0x63
 8004b70:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004b74:	4631      	mov	r1, r6
 8004b76:	dcf1      	bgt.n	8004b5c <__exponent+0x1c>
 8004b78:	3130      	adds	r1, #48	@ 0x30
 8004b7a:	1e94      	subs	r4, r2, #2
 8004b7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b80:	1c41      	adds	r1, r0, #1
 8004b82:	4623      	mov	r3, r4
 8004b84:	42ab      	cmp	r3, r5
 8004b86:	d30a      	bcc.n	8004b9e <__exponent+0x5e>
 8004b88:	f10d 0309 	add.w	r3, sp, #9
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	42ac      	cmp	r4, r5
 8004b90:	bf88      	it	hi
 8004b92:	2300      	movhi	r3, #0
 8004b94:	3302      	adds	r3, #2
 8004b96:	4403      	add	r3, r0
 8004b98:	1a18      	subs	r0, r3, r0
 8004b9a:	b003      	add	sp, #12
 8004b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b9e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ba2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ba6:	e7ed      	b.n	8004b84 <__exponent+0x44>
 8004ba8:	2330      	movs	r3, #48	@ 0x30
 8004baa:	3130      	adds	r1, #48	@ 0x30
 8004bac:	7083      	strb	r3, [r0, #2]
 8004bae:	70c1      	strb	r1, [r0, #3]
 8004bb0:	1d03      	adds	r3, r0, #4
 8004bb2:	e7f1      	b.n	8004b98 <__exponent+0x58>

08004bb4 <_printf_float>:
 8004bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb8:	b08d      	sub	sp, #52	@ 0x34
 8004bba:	460c      	mov	r4, r1
 8004bbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	461f      	mov	r7, r3
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	f000 fcc5 	bl	8005554 <_localeconv_r>
 8004bca:	6803      	ldr	r3, [r0, #0]
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fb fb56 	bl	8000280 <strlen>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004bdc:	9005      	str	r0, [sp, #20]
 8004bde:	3307      	adds	r3, #7
 8004be0:	f023 0307 	bic.w	r3, r3, #7
 8004be4:	f103 0208 	add.w	r2, r3, #8
 8004be8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004bec:	f8d4 b000 	ldr.w	fp, [r4]
 8004bf0:	f8c8 2000 	str.w	r2, [r8]
 8004bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004bfc:	9307      	str	r3, [sp, #28]
 8004bfe:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8004e7c <_printf_float+0x2c8>)
 8004c0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c10:	f7fb ff94 	bl	8000b3c <__aeabi_dcmpun>
 8004c14:	bb70      	cbnz	r0, 8004c74 <_printf_float+0xc0>
 8004c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c1a:	4b98      	ldr	r3, [pc, #608]	@ (8004e7c <_printf_float+0x2c8>)
 8004c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c20:	f7fb ff6e 	bl	8000b00 <__aeabi_dcmple>
 8004c24:	bb30      	cbnz	r0, 8004c74 <_printf_float+0xc0>
 8004c26:	2200      	movs	r2, #0
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	f7fb ff5d 	bl	8000aec <__aeabi_dcmplt>
 8004c32:	b110      	cbz	r0, 8004c3a <_printf_float+0x86>
 8004c34:	232d      	movs	r3, #45	@ 0x2d
 8004c36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c3a:	4a91      	ldr	r2, [pc, #580]	@ (8004e80 <_printf_float+0x2cc>)
 8004c3c:	4b91      	ldr	r3, [pc, #580]	@ (8004e84 <_printf_float+0x2d0>)
 8004c3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c42:	bf8c      	ite	hi
 8004c44:	4690      	movhi	r8, r2
 8004c46:	4698      	movls	r8, r3
 8004c48:	2303      	movs	r3, #3
 8004c4a:	6123      	str	r3, [r4, #16]
 8004c4c:	f02b 0304 	bic.w	r3, fp, #4
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	f04f 0900 	mov.w	r9, #0
 8004c56:	9700      	str	r7, [sp, #0]
 8004c58:	4633      	mov	r3, r6
 8004c5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 f9d2 	bl	8005008 <_printf_common>
 8004c64:	3001      	adds	r0, #1
 8004c66:	f040 808d 	bne.w	8004d84 <_printf_float+0x1d0>
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c6e:	b00d      	add	sp, #52	@ 0x34
 8004c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	4640      	mov	r0, r8
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	f7fb ff5e 	bl	8000b3c <__aeabi_dcmpun>
 8004c80:	b140      	cbz	r0, 8004c94 <_printf_float+0xe0>
 8004c82:	464b      	mov	r3, r9
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bfbc      	itt	lt
 8004c88:	232d      	movlt	r3, #45	@ 0x2d
 8004c8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e88 <_printf_float+0x2d4>)
 8004c90:	4b7e      	ldr	r3, [pc, #504]	@ (8004e8c <_printf_float+0x2d8>)
 8004c92:	e7d4      	b.n	8004c3e <_printf_float+0x8a>
 8004c94:	6863      	ldr	r3, [r4, #4]
 8004c96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004c9a:	9206      	str	r2, [sp, #24]
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	d13b      	bne.n	8004d18 <_printf_float+0x164>
 8004ca0:	2306      	movs	r3, #6
 8004ca2:	6063      	str	r3, [r4, #4]
 8004ca4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6022      	str	r2, [r4, #0]
 8004cac:	9303      	str	r3, [sp, #12]
 8004cae:	ab0a      	add	r3, sp, #40	@ 0x28
 8004cb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004cb4:	ab09      	add	r3, sp, #36	@ 0x24
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	6861      	ldr	r1, [r4, #4]
 8004cba:	ec49 8b10 	vmov	d0, r8, r9
 8004cbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f7ff fed7 	bl	8004a76 <__cvt>
 8004cc8:	9b06      	ldr	r3, [sp, #24]
 8004cca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ccc:	2b47      	cmp	r3, #71	@ 0x47
 8004cce:	4680      	mov	r8, r0
 8004cd0:	d129      	bne.n	8004d26 <_printf_float+0x172>
 8004cd2:	1cc8      	adds	r0, r1, #3
 8004cd4:	db02      	blt.n	8004cdc <_printf_float+0x128>
 8004cd6:	6863      	ldr	r3, [r4, #4]
 8004cd8:	4299      	cmp	r1, r3
 8004cda:	dd41      	ble.n	8004d60 <_printf_float+0x1ac>
 8004cdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ce0:	fa5f fa8a 	uxtb.w	sl, sl
 8004ce4:	3901      	subs	r1, #1
 8004ce6:	4652      	mov	r2, sl
 8004ce8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004cec:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cee:	f7ff ff27 	bl	8004b40 <__exponent>
 8004cf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004cf4:	1813      	adds	r3, r2, r0
 8004cf6:	2a01      	cmp	r2, #1
 8004cf8:	4681      	mov	r9, r0
 8004cfa:	6123      	str	r3, [r4, #16]
 8004cfc:	dc02      	bgt.n	8004d04 <_printf_float+0x150>
 8004cfe:	6822      	ldr	r2, [r4, #0]
 8004d00:	07d2      	lsls	r2, r2, #31
 8004d02:	d501      	bpl.n	8004d08 <_printf_float+0x154>
 8004d04:	3301      	adds	r3, #1
 8004d06:	6123      	str	r3, [r4, #16]
 8004d08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0a2      	beq.n	8004c56 <_printf_float+0xa2>
 8004d10:	232d      	movs	r3, #45	@ 0x2d
 8004d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d16:	e79e      	b.n	8004c56 <_printf_float+0xa2>
 8004d18:	9a06      	ldr	r2, [sp, #24]
 8004d1a:	2a47      	cmp	r2, #71	@ 0x47
 8004d1c:	d1c2      	bne.n	8004ca4 <_printf_float+0xf0>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1c0      	bne.n	8004ca4 <_printf_float+0xf0>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e7bd      	b.n	8004ca2 <_printf_float+0xee>
 8004d26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d2a:	d9db      	bls.n	8004ce4 <_printf_float+0x130>
 8004d2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d30:	d118      	bne.n	8004d64 <_printf_float+0x1b0>
 8004d32:	2900      	cmp	r1, #0
 8004d34:	6863      	ldr	r3, [r4, #4]
 8004d36:	dd0b      	ble.n	8004d50 <_printf_float+0x19c>
 8004d38:	6121      	str	r1, [r4, #16]
 8004d3a:	b913      	cbnz	r3, 8004d42 <_printf_float+0x18e>
 8004d3c:	6822      	ldr	r2, [r4, #0]
 8004d3e:	07d0      	lsls	r0, r2, #31
 8004d40:	d502      	bpl.n	8004d48 <_printf_float+0x194>
 8004d42:	3301      	adds	r3, #1
 8004d44:	440b      	add	r3, r1
 8004d46:	6123      	str	r3, [r4, #16]
 8004d48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d4a:	f04f 0900 	mov.w	r9, #0
 8004d4e:	e7db      	b.n	8004d08 <_printf_float+0x154>
 8004d50:	b913      	cbnz	r3, 8004d58 <_printf_float+0x1a4>
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	07d2      	lsls	r2, r2, #31
 8004d56:	d501      	bpl.n	8004d5c <_printf_float+0x1a8>
 8004d58:	3302      	adds	r3, #2
 8004d5a:	e7f4      	b.n	8004d46 <_printf_float+0x192>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e7f2      	b.n	8004d46 <_printf_float+0x192>
 8004d60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d66:	4299      	cmp	r1, r3
 8004d68:	db05      	blt.n	8004d76 <_printf_float+0x1c2>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	6121      	str	r1, [r4, #16]
 8004d6e:	07d8      	lsls	r0, r3, #31
 8004d70:	d5ea      	bpl.n	8004d48 <_printf_float+0x194>
 8004d72:	1c4b      	adds	r3, r1, #1
 8004d74:	e7e7      	b.n	8004d46 <_printf_float+0x192>
 8004d76:	2900      	cmp	r1, #0
 8004d78:	bfd4      	ite	le
 8004d7a:	f1c1 0202 	rsble	r2, r1, #2
 8004d7e:	2201      	movgt	r2, #1
 8004d80:	4413      	add	r3, r2
 8004d82:	e7e0      	b.n	8004d46 <_printf_float+0x192>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	055a      	lsls	r2, r3, #21
 8004d88:	d407      	bmi.n	8004d9a <_printf_float+0x1e6>
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4628      	mov	r0, r5
 8004d92:	47b8      	blx	r7
 8004d94:	3001      	adds	r0, #1
 8004d96:	d12b      	bne.n	8004df0 <_printf_float+0x23c>
 8004d98:	e767      	b.n	8004c6a <_printf_float+0xb6>
 8004d9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d9e:	f240 80dd 	bls.w	8004f5c <_printf_float+0x3a8>
 8004da2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004da6:	2200      	movs	r2, #0
 8004da8:	2300      	movs	r3, #0
 8004daa:	f7fb fe95 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d033      	beq.n	8004e1a <_printf_float+0x266>
 8004db2:	4a37      	ldr	r2, [pc, #220]	@ (8004e90 <_printf_float+0x2dc>)
 8004db4:	2301      	movs	r3, #1
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	f43f af54 	beq.w	8004c6a <_printf_float+0xb6>
 8004dc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004dc6:	4543      	cmp	r3, r8
 8004dc8:	db02      	blt.n	8004dd0 <_printf_float+0x21c>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	07d8      	lsls	r0, r3, #31
 8004dce:	d50f      	bpl.n	8004df0 <_printf_float+0x23c>
 8004dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f af45 	beq.w	8004c6a <_printf_float+0xb6>
 8004de0:	f04f 0900 	mov.w	r9, #0
 8004de4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004de8:	f104 0a1a 	add.w	sl, r4, #26
 8004dec:	45c8      	cmp	r8, r9
 8004dee:	dc09      	bgt.n	8004e04 <_printf_float+0x250>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	079b      	lsls	r3, r3, #30
 8004df4:	f100 8103 	bmi.w	8004ffe <_printf_float+0x44a>
 8004df8:	68e0      	ldr	r0, [r4, #12]
 8004dfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dfc:	4298      	cmp	r0, r3
 8004dfe:	bfb8      	it	lt
 8004e00:	4618      	movlt	r0, r3
 8004e02:	e734      	b.n	8004c6e <_printf_float+0xba>
 8004e04:	2301      	movs	r3, #1
 8004e06:	4652      	mov	r2, sl
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f43f af2b 	beq.w	8004c6a <_printf_float+0xb6>
 8004e14:	f109 0901 	add.w	r9, r9, #1
 8004e18:	e7e8      	b.n	8004dec <_printf_float+0x238>
 8004e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	dc39      	bgt.n	8004e94 <_printf_float+0x2e0>
 8004e20:	4a1b      	ldr	r2, [pc, #108]	@ (8004e90 <_printf_float+0x2dc>)
 8004e22:	2301      	movs	r3, #1
 8004e24:	4631      	mov	r1, r6
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f43f af1d 	beq.w	8004c6a <_printf_float+0xb6>
 8004e30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004e34:	ea59 0303 	orrs.w	r3, r9, r3
 8004e38:	d102      	bne.n	8004e40 <_printf_float+0x28c>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	07d9      	lsls	r1, r3, #31
 8004e3e:	d5d7      	bpl.n	8004df0 <_printf_float+0x23c>
 8004e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e44:	4631      	mov	r1, r6
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b8      	blx	r7
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f af0d 	beq.w	8004c6a <_printf_float+0xb6>
 8004e50:	f04f 0a00 	mov.w	sl, #0
 8004e54:	f104 0b1a 	add.w	fp, r4, #26
 8004e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e5a:	425b      	negs	r3, r3
 8004e5c:	4553      	cmp	r3, sl
 8004e5e:	dc01      	bgt.n	8004e64 <_printf_float+0x2b0>
 8004e60:	464b      	mov	r3, r9
 8004e62:	e793      	b.n	8004d8c <_printf_float+0x1d8>
 8004e64:	2301      	movs	r3, #1
 8004e66:	465a      	mov	r2, fp
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	47b8      	blx	r7
 8004e6e:	3001      	adds	r0, #1
 8004e70:	f43f aefb 	beq.w	8004c6a <_printf_float+0xb6>
 8004e74:	f10a 0a01 	add.w	sl, sl, #1
 8004e78:	e7ee      	b.n	8004e58 <_printf_float+0x2a4>
 8004e7a:	bf00      	nop
 8004e7c:	7fefffff 	.word	0x7fefffff
 8004e80:	080077f8 	.word	0x080077f8
 8004e84:	080077f4 	.word	0x080077f4
 8004e88:	08007800 	.word	0x08007800
 8004e8c:	080077fc 	.word	0x080077fc
 8004e90:	08007804 	.word	0x08007804
 8004e94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e9a:	4553      	cmp	r3, sl
 8004e9c:	bfa8      	it	ge
 8004e9e:	4653      	movge	r3, sl
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	4699      	mov	r9, r3
 8004ea4:	dc36      	bgt.n	8004f14 <_printf_float+0x360>
 8004ea6:	f04f 0b00 	mov.w	fp, #0
 8004eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eae:	f104 021a 	add.w	r2, r4, #26
 8004eb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004eb4:	9306      	str	r3, [sp, #24]
 8004eb6:	eba3 0309 	sub.w	r3, r3, r9
 8004eba:	455b      	cmp	r3, fp
 8004ebc:	dc31      	bgt.n	8004f22 <_printf_float+0x36e>
 8004ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ec0:	459a      	cmp	sl, r3
 8004ec2:	dc3a      	bgt.n	8004f3a <_printf_float+0x386>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	07da      	lsls	r2, r3, #31
 8004ec8:	d437      	bmi.n	8004f3a <_printf_float+0x386>
 8004eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ecc:	ebaa 0903 	sub.w	r9, sl, r3
 8004ed0:	9b06      	ldr	r3, [sp, #24]
 8004ed2:	ebaa 0303 	sub.w	r3, sl, r3
 8004ed6:	4599      	cmp	r9, r3
 8004ed8:	bfa8      	it	ge
 8004eda:	4699      	movge	r9, r3
 8004edc:	f1b9 0f00 	cmp.w	r9, #0
 8004ee0:	dc33      	bgt.n	8004f4a <_printf_float+0x396>
 8004ee2:	f04f 0800 	mov.w	r8, #0
 8004ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eea:	f104 0b1a 	add.w	fp, r4, #26
 8004eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef0:	ebaa 0303 	sub.w	r3, sl, r3
 8004ef4:	eba3 0309 	sub.w	r3, r3, r9
 8004ef8:	4543      	cmp	r3, r8
 8004efa:	f77f af79 	ble.w	8004df0 <_printf_float+0x23c>
 8004efe:	2301      	movs	r3, #1
 8004f00:	465a      	mov	r2, fp
 8004f02:	4631      	mov	r1, r6
 8004f04:	4628      	mov	r0, r5
 8004f06:	47b8      	blx	r7
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f43f aeae 	beq.w	8004c6a <_printf_float+0xb6>
 8004f0e:	f108 0801 	add.w	r8, r8, #1
 8004f12:	e7ec      	b.n	8004eee <_printf_float+0x33a>
 8004f14:	4642      	mov	r2, r8
 8004f16:	4631      	mov	r1, r6
 8004f18:	4628      	mov	r0, r5
 8004f1a:	47b8      	blx	r7
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d1c2      	bne.n	8004ea6 <_printf_float+0x2f2>
 8004f20:	e6a3      	b.n	8004c6a <_printf_float+0xb6>
 8004f22:	2301      	movs	r3, #1
 8004f24:	4631      	mov	r1, r6
 8004f26:	4628      	mov	r0, r5
 8004f28:	9206      	str	r2, [sp, #24]
 8004f2a:	47b8      	blx	r7
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	f43f ae9c 	beq.w	8004c6a <_printf_float+0xb6>
 8004f32:	9a06      	ldr	r2, [sp, #24]
 8004f34:	f10b 0b01 	add.w	fp, fp, #1
 8004f38:	e7bb      	b.n	8004eb2 <_printf_float+0x2fe>
 8004f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b8      	blx	r7
 8004f44:	3001      	adds	r0, #1
 8004f46:	d1c0      	bne.n	8004eca <_printf_float+0x316>
 8004f48:	e68f      	b.n	8004c6a <_printf_float+0xb6>
 8004f4a:	9a06      	ldr	r2, [sp, #24]
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	4442      	add	r2, r8
 8004f50:	4631      	mov	r1, r6
 8004f52:	4628      	mov	r0, r5
 8004f54:	47b8      	blx	r7
 8004f56:	3001      	adds	r0, #1
 8004f58:	d1c3      	bne.n	8004ee2 <_printf_float+0x32e>
 8004f5a:	e686      	b.n	8004c6a <_printf_float+0xb6>
 8004f5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f60:	f1ba 0f01 	cmp.w	sl, #1
 8004f64:	dc01      	bgt.n	8004f6a <_printf_float+0x3b6>
 8004f66:	07db      	lsls	r3, r3, #31
 8004f68:	d536      	bpl.n	8004fd8 <_printf_float+0x424>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	f43f ae78 	beq.w	8004c6a <_printf_float+0xb6>
 8004f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	f43f ae70 	beq.w	8004c6a <_printf_float+0xb6>
 8004f8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2300      	movs	r3, #0
 8004f92:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004f96:	f7fb fd9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f9a:	b9c0      	cbnz	r0, 8004fce <_printf_float+0x41a>
 8004f9c:	4653      	mov	r3, sl
 8004f9e:	f108 0201 	add.w	r2, r8, #1
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d10c      	bne.n	8004fc6 <_printf_float+0x412>
 8004fac:	e65d      	b.n	8004c6a <_printf_float+0xb6>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	465a      	mov	r2, fp
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f43f ae56 	beq.w	8004c6a <_printf_float+0xb6>
 8004fbe:	f108 0801 	add.w	r8, r8, #1
 8004fc2:	45d0      	cmp	r8, sl
 8004fc4:	dbf3      	blt.n	8004fae <_printf_float+0x3fa>
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004fcc:	e6df      	b.n	8004d8e <_printf_float+0x1da>
 8004fce:	f04f 0800 	mov.w	r8, #0
 8004fd2:	f104 0b1a 	add.w	fp, r4, #26
 8004fd6:	e7f4      	b.n	8004fc2 <_printf_float+0x40e>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	4642      	mov	r2, r8
 8004fdc:	e7e1      	b.n	8004fa2 <_printf_float+0x3ee>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	464a      	mov	r2, r9
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b8      	blx	r7
 8004fe8:	3001      	adds	r0, #1
 8004fea:	f43f ae3e 	beq.w	8004c6a <_printf_float+0xb6>
 8004fee:	f108 0801 	add.w	r8, r8, #1
 8004ff2:	68e3      	ldr	r3, [r4, #12]
 8004ff4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004ff6:	1a5b      	subs	r3, r3, r1
 8004ff8:	4543      	cmp	r3, r8
 8004ffa:	dcf0      	bgt.n	8004fde <_printf_float+0x42a>
 8004ffc:	e6fc      	b.n	8004df8 <_printf_float+0x244>
 8004ffe:	f04f 0800 	mov.w	r8, #0
 8005002:	f104 0919 	add.w	r9, r4, #25
 8005006:	e7f4      	b.n	8004ff2 <_printf_float+0x43e>

08005008 <_printf_common>:
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	4616      	mov	r6, r2
 800500e:	4698      	mov	r8, r3
 8005010:	688a      	ldr	r2, [r1, #8]
 8005012:	690b      	ldr	r3, [r1, #16]
 8005014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005018:	4293      	cmp	r3, r2
 800501a:	bfb8      	it	lt
 800501c:	4613      	movlt	r3, r2
 800501e:	6033      	str	r3, [r6, #0]
 8005020:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005024:	4607      	mov	r7, r0
 8005026:	460c      	mov	r4, r1
 8005028:	b10a      	cbz	r2, 800502e <_printf_common+0x26>
 800502a:	3301      	adds	r3, #1
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	0699      	lsls	r1, r3, #26
 8005032:	bf42      	ittt	mi
 8005034:	6833      	ldrmi	r3, [r6, #0]
 8005036:	3302      	addmi	r3, #2
 8005038:	6033      	strmi	r3, [r6, #0]
 800503a:	6825      	ldr	r5, [r4, #0]
 800503c:	f015 0506 	ands.w	r5, r5, #6
 8005040:	d106      	bne.n	8005050 <_printf_common+0x48>
 8005042:	f104 0a19 	add.w	sl, r4, #25
 8005046:	68e3      	ldr	r3, [r4, #12]
 8005048:	6832      	ldr	r2, [r6, #0]
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	42ab      	cmp	r3, r5
 800504e:	dc26      	bgt.n	800509e <_printf_common+0x96>
 8005050:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005054:	6822      	ldr	r2, [r4, #0]
 8005056:	3b00      	subs	r3, #0
 8005058:	bf18      	it	ne
 800505a:	2301      	movne	r3, #1
 800505c:	0692      	lsls	r2, r2, #26
 800505e:	d42b      	bmi.n	80050b8 <_printf_common+0xb0>
 8005060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005064:	4641      	mov	r1, r8
 8005066:	4638      	mov	r0, r7
 8005068:	47c8      	blx	r9
 800506a:	3001      	adds	r0, #1
 800506c:	d01e      	beq.n	80050ac <_printf_common+0xa4>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	6922      	ldr	r2, [r4, #16]
 8005072:	f003 0306 	and.w	r3, r3, #6
 8005076:	2b04      	cmp	r3, #4
 8005078:	bf02      	ittt	eq
 800507a:	68e5      	ldreq	r5, [r4, #12]
 800507c:	6833      	ldreq	r3, [r6, #0]
 800507e:	1aed      	subeq	r5, r5, r3
 8005080:	68a3      	ldr	r3, [r4, #8]
 8005082:	bf0c      	ite	eq
 8005084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005088:	2500      	movne	r5, #0
 800508a:	4293      	cmp	r3, r2
 800508c:	bfc4      	itt	gt
 800508e:	1a9b      	subgt	r3, r3, r2
 8005090:	18ed      	addgt	r5, r5, r3
 8005092:	2600      	movs	r6, #0
 8005094:	341a      	adds	r4, #26
 8005096:	42b5      	cmp	r5, r6
 8005098:	d11a      	bne.n	80050d0 <_printf_common+0xc8>
 800509a:	2000      	movs	r0, #0
 800509c:	e008      	b.n	80050b0 <_printf_common+0xa8>
 800509e:	2301      	movs	r3, #1
 80050a0:	4652      	mov	r2, sl
 80050a2:	4641      	mov	r1, r8
 80050a4:	4638      	mov	r0, r7
 80050a6:	47c8      	blx	r9
 80050a8:	3001      	adds	r0, #1
 80050aa:	d103      	bne.n	80050b4 <_printf_common+0xac>
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	3501      	adds	r5, #1
 80050b6:	e7c6      	b.n	8005046 <_printf_common+0x3e>
 80050b8:	18e1      	adds	r1, r4, r3
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	2030      	movs	r0, #48	@ 0x30
 80050be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050c2:	4422      	add	r2, r4
 80050c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050cc:	3302      	adds	r3, #2
 80050ce:	e7c7      	b.n	8005060 <_printf_common+0x58>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4622      	mov	r2, r4
 80050d4:	4641      	mov	r1, r8
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c8      	blx	r9
 80050da:	3001      	adds	r0, #1
 80050dc:	d0e6      	beq.n	80050ac <_printf_common+0xa4>
 80050de:	3601      	adds	r6, #1
 80050e0:	e7d9      	b.n	8005096 <_printf_common+0x8e>
	...

080050e4 <_printf_i>:
 80050e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	7e0f      	ldrb	r7, [r1, #24]
 80050ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050ec:	2f78      	cmp	r7, #120	@ 0x78
 80050ee:	4691      	mov	r9, r2
 80050f0:	4680      	mov	r8, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	469a      	mov	sl, r3
 80050f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050fa:	d807      	bhi.n	800510c <_printf_i+0x28>
 80050fc:	2f62      	cmp	r7, #98	@ 0x62
 80050fe:	d80a      	bhi.n	8005116 <_printf_i+0x32>
 8005100:	2f00      	cmp	r7, #0
 8005102:	f000 80d1 	beq.w	80052a8 <_printf_i+0x1c4>
 8005106:	2f58      	cmp	r7, #88	@ 0x58
 8005108:	f000 80b8 	beq.w	800527c <_printf_i+0x198>
 800510c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005110:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005114:	e03a      	b.n	800518c <_printf_i+0xa8>
 8005116:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800511a:	2b15      	cmp	r3, #21
 800511c:	d8f6      	bhi.n	800510c <_printf_i+0x28>
 800511e:	a101      	add	r1, pc, #4	@ (adr r1, 8005124 <_printf_i+0x40>)
 8005120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005124:	0800517d 	.word	0x0800517d
 8005128:	08005191 	.word	0x08005191
 800512c:	0800510d 	.word	0x0800510d
 8005130:	0800510d 	.word	0x0800510d
 8005134:	0800510d 	.word	0x0800510d
 8005138:	0800510d 	.word	0x0800510d
 800513c:	08005191 	.word	0x08005191
 8005140:	0800510d 	.word	0x0800510d
 8005144:	0800510d 	.word	0x0800510d
 8005148:	0800510d 	.word	0x0800510d
 800514c:	0800510d 	.word	0x0800510d
 8005150:	0800528f 	.word	0x0800528f
 8005154:	080051bb 	.word	0x080051bb
 8005158:	08005249 	.word	0x08005249
 800515c:	0800510d 	.word	0x0800510d
 8005160:	0800510d 	.word	0x0800510d
 8005164:	080052b1 	.word	0x080052b1
 8005168:	0800510d 	.word	0x0800510d
 800516c:	080051bb 	.word	0x080051bb
 8005170:	0800510d 	.word	0x0800510d
 8005174:	0800510d 	.word	0x0800510d
 8005178:	08005251 	.word	0x08005251
 800517c:	6833      	ldr	r3, [r6, #0]
 800517e:	1d1a      	adds	r2, r3, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6032      	str	r2, [r6, #0]
 8005184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005188:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800518c:	2301      	movs	r3, #1
 800518e:	e09c      	b.n	80052ca <_printf_i+0x1e6>
 8005190:	6833      	ldr	r3, [r6, #0]
 8005192:	6820      	ldr	r0, [r4, #0]
 8005194:	1d19      	adds	r1, r3, #4
 8005196:	6031      	str	r1, [r6, #0]
 8005198:	0606      	lsls	r6, r0, #24
 800519a:	d501      	bpl.n	80051a0 <_printf_i+0xbc>
 800519c:	681d      	ldr	r5, [r3, #0]
 800519e:	e003      	b.n	80051a8 <_printf_i+0xc4>
 80051a0:	0645      	lsls	r5, r0, #25
 80051a2:	d5fb      	bpl.n	800519c <_printf_i+0xb8>
 80051a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051a8:	2d00      	cmp	r5, #0
 80051aa:	da03      	bge.n	80051b4 <_printf_i+0xd0>
 80051ac:	232d      	movs	r3, #45	@ 0x2d
 80051ae:	426d      	negs	r5, r5
 80051b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051b4:	4858      	ldr	r0, [pc, #352]	@ (8005318 <_printf_i+0x234>)
 80051b6:	230a      	movs	r3, #10
 80051b8:	e011      	b.n	80051de <_printf_i+0xfa>
 80051ba:	6821      	ldr	r1, [r4, #0]
 80051bc:	6833      	ldr	r3, [r6, #0]
 80051be:	0608      	lsls	r0, r1, #24
 80051c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80051c4:	d402      	bmi.n	80051cc <_printf_i+0xe8>
 80051c6:	0649      	lsls	r1, r1, #25
 80051c8:	bf48      	it	mi
 80051ca:	b2ad      	uxthmi	r5, r5
 80051cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80051ce:	4852      	ldr	r0, [pc, #328]	@ (8005318 <_printf_i+0x234>)
 80051d0:	6033      	str	r3, [r6, #0]
 80051d2:	bf14      	ite	ne
 80051d4:	230a      	movne	r3, #10
 80051d6:	2308      	moveq	r3, #8
 80051d8:	2100      	movs	r1, #0
 80051da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051de:	6866      	ldr	r6, [r4, #4]
 80051e0:	60a6      	str	r6, [r4, #8]
 80051e2:	2e00      	cmp	r6, #0
 80051e4:	db05      	blt.n	80051f2 <_printf_i+0x10e>
 80051e6:	6821      	ldr	r1, [r4, #0]
 80051e8:	432e      	orrs	r6, r5
 80051ea:	f021 0104 	bic.w	r1, r1, #4
 80051ee:	6021      	str	r1, [r4, #0]
 80051f0:	d04b      	beq.n	800528a <_printf_i+0x1a6>
 80051f2:	4616      	mov	r6, r2
 80051f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80051f8:	fb03 5711 	mls	r7, r3, r1, r5
 80051fc:	5dc7      	ldrb	r7, [r0, r7]
 80051fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005202:	462f      	mov	r7, r5
 8005204:	42bb      	cmp	r3, r7
 8005206:	460d      	mov	r5, r1
 8005208:	d9f4      	bls.n	80051f4 <_printf_i+0x110>
 800520a:	2b08      	cmp	r3, #8
 800520c:	d10b      	bne.n	8005226 <_printf_i+0x142>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	07df      	lsls	r7, r3, #31
 8005212:	d508      	bpl.n	8005226 <_printf_i+0x142>
 8005214:	6923      	ldr	r3, [r4, #16]
 8005216:	6861      	ldr	r1, [r4, #4]
 8005218:	4299      	cmp	r1, r3
 800521a:	bfde      	ittt	le
 800521c:	2330      	movle	r3, #48	@ 0x30
 800521e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005222:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005226:	1b92      	subs	r2, r2, r6
 8005228:	6122      	str	r2, [r4, #16]
 800522a:	f8cd a000 	str.w	sl, [sp]
 800522e:	464b      	mov	r3, r9
 8005230:	aa03      	add	r2, sp, #12
 8005232:	4621      	mov	r1, r4
 8005234:	4640      	mov	r0, r8
 8005236:	f7ff fee7 	bl	8005008 <_printf_common>
 800523a:	3001      	adds	r0, #1
 800523c:	d14a      	bne.n	80052d4 <_printf_i+0x1f0>
 800523e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005242:	b004      	add	sp, #16
 8005244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	f043 0320 	orr.w	r3, r3, #32
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	4832      	ldr	r0, [pc, #200]	@ (800531c <_printf_i+0x238>)
 8005252:	2778      	movs	r7, #120	@ 0x78
 8005254:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	6831      	ldr	r1, [r6, #0]
 800525c:	061f      	lsls	r7, r3, #24
 800525e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005262:	d402      	bmi.n	800526a <_printf_i+0x186>
 8005264:	065f      	lsls	r7, r3, #25
 8005266:	bf48      	it	mi
 8005268:	b2ad      	uxthmi	r5, r5
 800526a:	6031      	str	r1, [r6, #0]
 800526c:	07d9      	lsls	r1, r3, #31
 800526e:	bf44      	itt	mi
 8005270:	f043 0320 	orrmi.w	r3, r3, #32
 8005274:	6023      	strmi	r3, [r4, #0]
 8005276:	b11d      	cbz	r5, 8005280 <_printf_i+0x19c>
 8005278:	2310      	movs	r3, #16
 800527a:	e7ad      	b.n	80051d8 <_printf_i+0xf4>
 800527c:	4826      	ldr	r0, [pc, #152]	@ (8005318 <_printf_i+0x234>)
 800527e:	e7e9      	b.n	8005254 <_printf_i+0x170>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f023 0320 	bic.w	r3, r3, #32
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	e7f6      	b.n	8005278 <_printf_i+0x194>
 800528a:	4616      	mov	r6, r2
 800528c:	e7bd      	b.n	800520a <_printf_i+0x126>
 800528e:	6833      	ldr	r3, [r6, #0]
 8005290:	6825      	ldr	r5, [r4, #0]
 8005292:	6961      	ldr	r1, [r4, #20]
 8005294:	1d18      	adds	r0, r3, #4
 8005296:	6030      	str	r0, [r6, #0]
 8005298:	062e      	lsls	r6, r5, #24
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	d501      	bpl.n	80052a2 <_printf_i+0x1be>
 800529e:	6019      	str	r1, [r3, #0]
 80052a0:	e002      	b.n	80052a8 <_printf_i+0x1c4>
 80052a2:	0668      	lsls	r0, r5, #25
 80052a4:	d5fb      	bpl.n	800529e <_printf_i+0x1ba>
 80052a6:	8019      	strh	r1, [r3, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	6123      	str	r3, [r4, #16]
 80052ac:	4616      	mov	r6, r2
 80052ae:	e7bc      	b.n	800522a <_printf_i+0x146>
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	1d1a      	adds	r2, r3, #4
 80052b4:	6032      	str	r2, [r6, #0]
 80052b6:	681e      	ldr	r6, [r3, #0]
 80052b8:	6862      	ldr	r2, [r4, #4]
 80052ba:	2100      	movs	r1, #0
 80052bc:	4630      	mov	r0, r6
 80052be:	f7fa ff8f 	bl	80001e0 <memchr>
 80052c2:	b108      	cbz	r0, 80052c8 <_printf_i+0x1e4>
 80052c4:	1b80      	subs	r0, r0, r6
 80052c6:	6060      	str	r0, [r4, #4]
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	6123      	str	r3, [r4, #16]
 80052cc:	2300      	movs	r3, #0
 80052ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d2:	e7aa      	b.n	800522a <_printf_i+0x146>
 80052d4:	6923      	ldr	r3, [r4, #16]
 80052d6:	4632      	mov	r2, r6
 80052d8:	4649      	mov	r1, r9
 80052da:	4640      	mov	r0, r8
 80052dc:	47d0      	blx	sl
 80052de:	3001      	adds	r0, #1
 80052e0:	d0ad      	beq.n	800523e <_printf_i+0x15a>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	079b      	lsls	r3, r3, #30
 80052e6:	d413      	bmi.n	8005310 <_printf_i+0x22c>
 80052e8:	68e0      	ldr	r0, [r4, #12]
 80052ea:	9b03      	ldr	r3, [sp, #12]
 80052ec:	4298      	cmp	r0, r3
 80052ee:	bfb8      	it	lt
 80052f0:	4618      	movlt	r0, r3
 80052f2:	e7a6      	b.n	8005242 <_printf_i+0x15e>
 80052f4:	2301      	movs	r3, #1
 80052f6:	4632      	mov	r2, r6
 80052f8:	4649      	mov	r1, r9
 80052fa:	4640      	mov	r0, r8
 80052fc:	47d0      	blx	sl
 80052fe:	3001      	adds	r0, #1
 8005300:	d09d      	beq.n	800523e <_printf_i+0x15a>
 8005302:	3501      	adds	r5, #1
 8005304:	68e3      	ldr	r3, [r4, #12]
 8005306:	9903      	ldr	r1, [sp, #12]
 8005308:	1a5b      	subs	r3, r3, r1
 800530a:	42ab      	cmp	r3, r5
 800530c:	dcf2      	bgt.n	80052f4 <_printf_i+0x210>
 800530e:	e7eb      	b.n	80052e8 <_printf_i+0x204>
 8005310:	2500      	movs	r5, #0
 8005312:	f104 0619 	add.w	r6, r4, #25
 8005316:	e7f5      	b.n	8005304 <_printf_i+0x220>
 8005318:	08007806 	.word	0x08007806
 800531c:	08007817 	.word	0x08007817

08005320 <siprintf>:
 8005320:	b40e      	push	{r1, r2, r3}
 8005322:	b510      	push	{r4, lr}
 8005324:	b09d      	sub	sp, #116	@ 0x74
 8005326:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005328:	9002      	str	r0, [sp, #8]
 800532a:	9006      	str	r0, [sp, #24]
 800532c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005330:	480a      	ldr	r0, [pc, #40]	@ (800535c <siprintf+0x3c>)
 8005332:	9107      	str	r1, [sp, #28]
 8005334:	9104      	str	r1, [sp, #16]
 8005336:	490a      	ldr	r1, [pc, #40]	@ (8005360 <siprintf+0x40>)
 8005338:	f853 2b04 	ldr.w	r2, [r3], #4
 800533c:	9105      	str	r1, [sp, #20]
 800533e:	2400      	movs	r4, #0
 8005340:	a902      	add	r1, sp, #8
 8005342:	6800      	ldr	r0, [r0, #0]
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005348:	f000 ffbe 	bl	80062c8 <_svfiprintf_r>
 800534c:	9b02      	ldr	r3, [sp, #8]
 800534e:	701c      	strb	r4, [r3, #0]
 8005350:	b01d      	add	sp, #116	@ 0x74
 8005352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005356:	b003      	add	sp, #12
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000018 	.word	0x20000018
 8005360:	ffff0208 	.word	0xffff0208

08005364 <std>:
 8005364:	2300      	movs	r3, #0
 8005366:	b510      	push	{r4, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	e9c0 3300 	strd	r3, r3, [r0]
 800536e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005372:	6083      	str	r3, [r0, #8]
 8005374:	8181      	strh	r1, [r0, #12]
 8005376:	6643      	str	r3, [r0, #100]	@ 0x64
 8005378:	81c2      	strh	r2, [r0, #14]
 800537a:	6183      	str	r3, [r0, #24]
 800537c:	4619      	mov	r1, r3
 800537e:	2208      	movs	r2, #8
 8005380:	305c      	adds	r0, #92	@ 0x5c
 8005382:	f000 f8b1 	bl	80054e8 <memset>
 8005386:	4b0d      	ldr	r3, [pc, #52]	@ (80053bc <std+0x58>)
 8005388:	6263      	str	r3, [r4, #36]	@ 0x24
 800538a:	4b0d      	ldr	r3, [pc, #52]	@ (80053c0 <std+0x5c>)
 800538c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800538e:	4b0d      	ldr	r3, [pc, #52]	@ (80053c4 <std+0x60>)
 8005390:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005392:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <std+0x64>)
 8005394:	6323      	str	r3, [r4, #48]	@ 0x30
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <std+0x68>)
 8005398:	6224      	str	r4, [r4, #32]
 800539a:	429c      	cmp	r4, r3
 800539c:	d006      	beq.n	80053ac <std+0x48>
 800539e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053a2:	4294      	cmp	r4, r2
 80053a4:	d002      	beq.n	80053ac <std+0x48>
 80053a6:	33d0      	adds	r3, #208	@ 0xd0
 80053a8:	429c      	cmp	r4, r3
 80053aa:	d105      	bne.n	80053b8 <std+0x54>
 80053ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b4:	f000 b8ca 	b.w	800554c <__retarget_lock_init_recursive>
 80053b8:	bd10      	pop	{r4, pc}
 80053ba:	bf00      	nop
 80053bc:	08006e79 	.word	0x08006e79
 80053c0:	08006e9b 	.word	0x08006e9b
 80053c4:	08006ed3 	.word	0x08006ed3
 80053c8:	08006ef7 	.word	0x08006ef7
 80053cc:	200002e4 	.word	0x200002e4

080053d0 <stdio_exit_handler>:
 80053d0:	4a02      	ldr	r2, [pc, #8]	@ (80053dc <stdio_exit_handler+0xc>)
 80053d2:	4903      	ldr	r1, [pc, #12]	@ (80053e0 <stdio_exit_handler+0x10>)
 80053d4:	4803      	ldr	r0, [pc, #12]	@ (80053e4 <stdio_exit_handler+0x14>)
 80053d6:	f000 b869 	b.w	80054ac <_fwalk_sglue>
 80053da:	bf00      	nop
 80053dc:	2000000c 	.word	0x2000000c
 80053e0:	0800671d 	.word	0x0800671d
 80053e4:	2000001c 	.word	0x2000001c

080053e8 <cleanup_stdio>:
 80053e8:	6841      	ldr	r1, [r0, #4]
 80053ea:	4b0c      	ldr	r3, [pc, #48]	@ (800541c <cleanup_stdio+0x34>)
 80053ec:	4299      	cmp	r1, r3
 80053ee:	b510      	push	{r4, lr}
 80053f0:	4604      	mov	r4, r0
 80053f2:	d001      	beq.n	80053f8 <cleanup_stdio+0x10>
 80053f4:	f001 f992 	bl	800671c <_fflush_r>
 80053f8:	68a1      	ldr	r1, [r4, #8]
 80053fa:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <cleanup_stdio+0x38>)
 80053fc:	4299      	cmp	r1, r3
 80053fe:	d002      	beq.n	8005406 <cleanup_stdio+0x1e>
 8005400:	4620      	mov	r0, r4
 8005402:	f001 f98b 	bl	800671c <_fflush_r>
 8005406:	68e1      	ldr	r1, [r4, #12]
 8005408:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <cleanup_stdio+0x3c>)
 800540a:	4299      	cmp	r1, r3
 800540c:	d004      	beq.n	8005418 <cleanup_stdio+0x30>
 800540e:	4620      	mov	r0, r4
 8005410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005414:	f001 b982 	b.w	800671c <_fflush_r>
 8005418:	bd10      	pop	{r4, pc}
 800541a:	bf00      	nop
 800541c:	200002e4 	.word	0x200002e4
 8005420:	2000034c 	.word	0x2000034c
 8005424:	200003b4 	.word	0x200003b4

08005428 <global_stdio_init.part.0>:
 8005428:	b510      	push	{r4, lr}
 800542a:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <global_stdio_init.part.0+0x30>)
 800542c:	4c0b      	ldr	r4, [pc, #44]	@ (800545c <global_stdio_init.part.0+0x34>)
 800542e:	4a0c      	ldr	r2, [pc, #48]	@ (8005460 <global_stdio_init.part.0+0x38>)
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	4620      	mov	r0, r4
 8005434:	2200      	movs	r2, #0
 8005436:	2104      	movs	r1, #4
 8005438:	f7ff ff94 	bl	8005364 <std>
 800543c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005440:	2201      	movs	r2, #1
 8005442:	2109      	movs	r1, #9
 8005444:	f7ff ff8e 	bl	8005364 <std>
 8005448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800544c:	2202      	movs	r2, #2
 800544e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005452:	2112      	movs	r1, #18
 8005454:	f7ff bf86 	b.w	8005364 <std>
 8005458:	2000041c 	.word	0x2000041c
 800545c:	200002e4 	.word	0x200002e4
 8005460:	080053d1 	.word	0x080053d1

08005464 <__sfp_lock_acquire>:
 8005464:	4801      	ldr	r0, [pc, #4]	@ (800546c <__sfp_lock_acquire+0x8>)
 8005466:	f000 b872 	b.w	800554e <__retarget_lock_acquire_recursive>
 800546a:	bf00      	nop
 800546c:	20000421 	.word	0x20000421

08005470 <__sfp_lock_release>:
 8005470:	4801      	ldr	r0, [pc, #4]	@ (8005478 <__sfp_lock_release+0x8>)
 8005472:	f000 b86d 	b.w	8005550 <__retarget_lock_release_recursive>
 8005476:	bf00      	nop
 8005478:	20000421 	.word	0x20000421

0800547c <__sinit>:
 800547c:	b510      	push	{r4, lr}
 800547e:	4604      	mov	r4, r0
 8005480:	f7ff fff0 	bl	8005464 <__sfp_lock_acquire>
 8005484:	6a23      	ldr	r3, [r4, #32]
 8005486:	b11b      	cbz	r3, 8005490 <__sinit+0x14>
 8005488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800548c:	f7ff bff0 	b.w	8005470 <__sfp_lock_release>
 8005490:	4b04      	ldr	r3, [pc, #16]	@ (80054a4 <__sinit+0x28>)
 8005492:	6223      	str	r3, [r4, #32]
 8005494:	4b04      	ldr	r3, [pc, #16]	@ (80054a8 <__sinit+0x2c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f5      	bne.n	8005488 <__sinit+0xc>
 800549c:	f7ff ffc4 	bl	8005428 <global_stdio_init.part.0>
 80054a0:	e7f2      	b.n	8005488 <__sinit+0xc>
 80054a2:	bf00      	nop
 80054a4:	080053e9 	.word	0x080053e9
 80054a8:	2000041c 	.word	0x2000041c

080054ac <_fwalk_sglue>:
 80054ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b0:	4607      	mov	r7, r0
 80054b2:	4688      	mov	r8, r1
 80054b4:	4614      	mov	r4, r2
 80054b6:	2600      	movs	r6, #0
 80054b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054bc:	f1b9 0901 	subs.w	r9, r9, #1
 80054c0:	d505      	bpl.n	80054ce <_fwalk_sglue+0x22>
 80054c2:	6824      	ldr	r4, [r4, #0]
 80054c4:	2c00      	cmp	r4, #0
 80054c6:	d1f7      	bne.n	80054b8 <_fwalk_sglue+0xc>
 80054c8:	4630      	mov	r0, r6
 80054ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ce:	89ab      	ldrh	r3, [r5, #12]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d907      	bls.n	80054e4 <_fwalk_sglue+0x38>
 80054d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054d8:	3301      	adds	r3, #1
 80054da:	d003      	beq.n	80054e4 <_fwalk_sglue+0x38>
 80054dc:	4629      	mov	r1, r5
 80054de:	4638      	mov	r0, r7
 80054e0:	47c0      	blx	r8
 80054e2:	4306      	orrs	r6, r0
 80054e4:	3568      	adds	r5, #104	@ 0x68
 80054e6:	e7e9      	b.n	80054bc <_fwalk_sglue+0x10>

080054e8 <memset>:
 80054e8:	4402      	add	r2, r0
 80054ea:	4603      	mov	r3, r0
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d100      	bne.n	80054f2 <memset+0xa>
 80054f0:	4770      	bx	lr
 80054f2:	f803 1b01 	strb.w	r1, [r3], #1
 80054f6:	e7f9      	b.n	80054ec <memset+0x4>

080054f8 <__errno>:
 80054f8:	4b01      	ldr	r3, [pc, #4]	@ (8005500 <__errno+0x8>)
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000018 	.word	0x20000018

08005504 <__libc_init_array>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	4d0d      	ldr	r5, [pc, #52]	@ (800553c <__libc_init_array+0x38>)
 8005508:	4c0d      	ldr	r4, [pc, #52]	@ (8005540 <__libc_init_array+0x3c>)
 800550a:	1b64      	subs	r4, r4, r5
 800550c:	10a4      	asrs	r4, r4, #2
 800550e:	2600      	movs	r6, #0
 8005510:	42a6      	cmp	r6, r4
 8005512:	d109      	bne.n	8005528 <__libc_init_array+0x24>
 8005514:	4d0b      	ldr	r5, [pc, #44]	@ (8005544 <__libc_init_array+0x40>)
 8005516:	4c0c      	ldr	r4, [pc, #48]	@ (8005548 <__libc_init_array+0x44>)
 8005518:	f002 f8f8 	bl	800770c <_init>
 800551c:	1b64      	subs	r4, r4, r5
 800551e:	10a4      	asrs	r4, r4, #2
 8005520:	2600      	movs	r6, #0
 8005522:	42a6      	cmp	r6, r4
 8005524:	d105      	bne.n	8005532 <__libc_init_array+0x2e>
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	f855 3b04 	ldr.w	r3, [r5], #4
 800552c:	4798      	blx	r3
 800552e:	3601      	adds	r6, #1
 8005530:	e7ee      	b.n	8005510 <__libc_init_array+0xc>
 8005532:	f855 3b04 	ldr.w	r3, [r5], #4
 8005536:	4798      	blx	r3
 8005538:	3601      	adds	r6, #1
 800553a:	e7f2      	b.n	8005522 <__libc_init_array+0x1e>
 800553c:	08007b74 	.word	0x08007b74
 8005540:	08007b74 	.word	0x08007b74
 8005544:	08007b74 	.word	0x08007b74
 8005548:	08007b78 	.word	0x08007b78

0800554c <__retarget_lock_init_recursive>:
 800554c:	4770      	bx	lr

0800554e <__retarget_lock_acquire_recursive>:
 800554e:	4770      	bx	lr

08005550 <__retarget_lock_release_recursive>:
 8005550:	4770      	bx	lr
	...

08005554 <_localeconv_r>:
 8005554:	4800      	ldr	r0, [pc, #0]	@ (8005558 <_localeconv_r+0x4>)
 8005556:	4770      	bx	lr
 8005558:	20000158 	.word	0x20000158

0800555c <quorem>:
 800555c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	6903      	ldr	r3, [r0, #16]
 8005562:	690c      	ldr	r4, [r1, #16]
 8005564:	42a3      	cmp	r3, r4
 8005566:	4607      	mov	r7, r0
 8005568:	db7e      	blt.n	8005668 <quorem+0x10c>
 800556a:	3c01      	subs	r4, #1
 800556c:	f101 0814 	add.w	r8, r1, #20
 8005570:	00a3      	lsls	r3, r4, #2
 8005572:	f100 0514 	add.w	r5, r0, #20
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800557c:	9301      	str	r3, [sp, #4]
 800557e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005582:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005586:	3301      	adds	r3, #1
 8005588:	429a      	cmp	r2, r3
 800558a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800558e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005592:	d32e      	bcc.n	80055f2 <quorem+0x96>
 8005594:	f04f 0a00 	mov.w	sl, #0
 8005598:	46c4      	mov	ip, r8
 800559a:	46ae      	mov	lr, r5
 800559c:	46d3      	mov	fp, sl
 800559e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055a2:	b298      	uxth	r0, r3
 80055a4:	fb06 a000 	mla	r0, r6, r0, sl
 80055a8:	0c02      	lsrs	r2, r0, #16
 80055aa:	0c1b      	lsrs	r3, r3, #16
 80055ac:	fb06 2303 	mla	r3, r6, r3, r2
 80055b0:	f8de 2000 	ldr.w	r2, [lr]
 80055b4:	b280      	uxth	r0, r0
 80055b6:	b292      	uxth	r2, r2
 80055b8:	1a12      	subs	r2, r2, r0
 80055ba:	445a      	add	r2, fp
 80055bc:	f8de 0000 	ldr.w	r0, [lr]
 80055c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055ce:	b292      	uxth	r2, r2
 80055d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055d4:	45e1      	cmp	r9, ip
 80055d6:	f84e 2b04 	str.w	r2, [lr], #4
 80055da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055de:	d2de      	bcs.n	800559e <quorem+0x42>
 80055e0:	9b00      	ldr	r3, [sp, #0]
 80055e2:	58eb      	ldr	r3, [r5, r3]
 80055e4:	b92b      	cbnz	r3, 80055f2 <quorem+0x96>
 80055e6:	9b01      	ldr	r3, [sp, #4]
 80055e8:	3b04      	subs	r3, #4
 80055ea:	429d      	cmp	r5, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	d32f      	bcc.n	8005650 <quorem+0xf4>
 80055f0:	613c      	str	r4, [r7, #16]
 80055f2:	4638      	mov	r0, r7
 80055f4:	f001 fb38 	bl	8006c68 <__mcmp>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	db25      	blt.n	8005648 <quorem+0xec>
 80055fc:	4629      	mov	r1, r5
 80055fe:	2000      	movs	r0, #0
 8005600:	f858 2b04 	ldr.w	r2, [r8], #4
 8005604:	f8d1 c000 	ldr.w	ip, [r1]
 8005608:	fa1f fe82 	uxth.w	lr, r2
 800560c:	fa1f f38c 	uxth.w	r3, ip
 8005610:	eba3 030e 	sub.w	r3, r3, lr
 8005614:	4403      	add	r3, r0
 8005616:	0c12      	lsrs	r2, r2, #16
 8005618:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800561c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005620:	b29b      	uxth	r3, r3
 8005622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005626:	45c1      	cmp	r9, r8
 8005628:	f841 3b04 	str.w	r3, [r1], #4
 800562c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005630:	d2e6      	bcs.n	8005600 <quorem+0xa4>
 8005632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005636:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800563a:	b922      	cbnz	r2, 8005646 <quorem+0xea>
 800563c:	3b04      	subs	r3, #4
 800563e:	429d      	cmp	r5, r3
 8005640:	461a      	mov	r2, r3
 8005642:	d30b      	bcc.n	800565c <quorem+0x100>
 8005644:	613c      	str	r4, [r7, #16]
 8005646:	3601      	adds	r6, #1
 8005648:	4630      	mov	r0, r6
 800564a:	b003      	add	sp, #12
 800564c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	3b04      	subs	r3, #4
 8005654:	2a00      	cmp	r2, #0
 8005656:	d1cb      	bne.n	80055f0 <quorem+0x94>
 8005658:	3c01      	subs	r4, #1
 800565a:	e7c6      	b.n	80055ea <quorem+0x8e>
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	3b04      	subs	r3, #4
 8005660:	2a00      	cmp	r2, #0
 8005662:	d1ef      	bne.n	8005644 <quorem+0xe8>
 8005664:	3c01      	subs	r4, #1
 8005666:	e7ea      	b.n	800563e <quorem+0xe2>
 8005668:	2000      	movs	r0, #0
 800566a:	e7ee      	b.n	800564a <quorem+0xee>
 800566c:	0000      	movs	r0, r0
	...

08005670 <_dtoa_r>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	69c7      	ldr	r7, [r0, #28]
 8005676:	b097      	sub	sp, #92	@ 0x5c
 8005678:	ed8d 0b04 	vstr	d0, [sp, #16]
 800567c:	ec55 4b10 	vmov	r4, r5, d0
 8005680:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005682:	9107      	str	r1, [sp, #28]
 8005684:	4681      	mov	r9, r0
 8005686:	920c      	str	r2, [sp, #48]	@ 0x30
 8005688:	9311      	str	r3, [sp, #68]	@ 0x44
 800568a:	b97f      	cbnz	r7, 80056ac <_dtoa_r+0x3c>
 800568c:	2010      	movs	r0, #16
 800568e:	f000 ff17 	bl	80064c0 <malloc>
 8005692:	4602      	mov	r2, r0
 8005694:	f8c9 001c 	str.w	r0, [r9, #28]
 8005698:	b920      	cbnz	r0, 80056a4 <_dtoa_r+0x34>
 800569a:	4ba9      	ldr	r3, [pc, #676]	@ (8005940 <_dtoa_r+0x2d0>)
 800569c:	21ef      	movs	r1, #239	@ 0xef
 800569e:	48a9      	ldr	r0, [pc, #676]	@ (8005944 <_dtoa_r+0x2d4>)
 80056a0:	f001 fcda 	bl	8007058 <__assert_func>
 80056a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056a8:	6007      	str	r7, [r0, #0]
 80056aa:	60c7      	str	r7, [r0, #12]
 80056ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056b0:	6819      	ldr	r1, [r3, #0]
 80056b2:	b159      	cbz	r1, 80056cc <_dtoa_r+0x5c>
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	604a      	str	r2, [r1, #4]
 80056b8:	2301      	movs	r3, #1
 80056ba:	4093      	lsls	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
 80056be:	4648      	mov	r0, r9
 80056c0:	f001 f8a0 	bl	8006804 <_Bfree>
 80056c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	1e2b      	subs	r3, r5, #0
 80056ce:	bfb9      	ittee	lt
 80056d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056d4:	9305      	strlt	r3, [sp, #20]
 80056d6:	2300      	movge	r3, #0
 80056d8:	6033      	strge	r3, [r6, #0]
 80056da:	9f05      	ldr	r7, [sp, #20]
 80056dc:	4b9a      	ldr	r3, [pc, #616]	@ (8005948 <_dtoa_r+0x2d8>)
 80056de:	bfbc      	itt	lt
 80056e0:	2201      	movlt	r2, #1
 80056e2:	6032      	strlt	r2, [r6, #0]
 80056e4:	43bb      	bics	r3, r7
 80056e6:	d112      	bne.n	800570e <_dtoa_r+0x9e>
 80056e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80056ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056f4:	4323      	orrs	r3, r4
 80056f6:	f000 855a 	beq.w	80061ae <_dtoa_r+0xb3e>
 80056fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800595c <_dtoa_r+0x2ec>
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 855c 	beq.w	80061be <_dtoa_r+0xb4e>
 8005706:	f10a 0303 	add.w	r3, sl, #3
 800570a:	f000 bd56 	b.w	80061ba <_dtoa_r+0xb4a>
 800570e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005712:	2200      	movs	r2, #0
 8005714:	ec51 0b17 	vmov	r0, r1, d7
 8005718:	2300      	movs	r3, #0
 800571a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800571e:	f7fb f9db 	bl	8000ad8 <__aeabi_dcmpeq>
 8005722:	4680      	mov	r8, r0
 8005724:	b158      	cbz	r0, 800573e <_dtoa_r+0xce>
 8005726:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005728:	2301      	movs	r3, #1
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800572e:	b113      	cbz	r3, 8005736 <_dtoa_r+0xc6>
 8005730:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005732:	4b86      	ldr	r3, [pc, #536]	@ (800594c <_dtoa_r+0x2dc>)
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005960 <_dtoa_r+0x2f0>
 800573a:	f000 bd40 	b.w	80061be <_dtoa_r+0xb4e>
 800573e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005742:	aa14      	add	r2, sp, #80	@ 0x50
 8005744:	a915      	add	r1, sp, #84	@ 0x54
 8005746:	4648      	mov	r0, r9
 8005748:	f001 fb3e 	bl	8006dc8 <__d2b>
 800574c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005750:	9002      	str	r0, [sp, #8]
 8005752:	2e00      	cmp	r6, #0
 8005754:	d078      	beq.n	8005848 <_dtoa_r+0x1d8>
 8005756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005758:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800575c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005760:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005764:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005768:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800576c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005770:	4619      	mov	r1, r3
 8005772:	2200      	movs	r2, #0
 8005774:	4b76      	ldr	r3, [pc, #472]	@ (8005950 <_dtoa_r+0x2e0>)
 8005776:	f7fa fd8f 	bl	8000298 <__aeabi_dsub>
 800577a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005928 <_dtoa_r+0x2b8>)
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f7fa ff42 	bl	8000608 <__aeabi_dmul>
 8005784:	a36a      	add	r3, pc, #424	@ (adr r3, 8005930 <_dtoa_r+0x2c0>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fa fd87 	bl	800029c <__adddf3>
 800578e:	4604      	mov	r4, r0
 8005790:	4630      	mov	r0, r6
 8005792:	460d      	mov	r5, r1
 8005794:	f7fa fece 	bl	8000534 <__aeabi_i2d>
 8005798:	a367      	add	r3, pc, #412	@ (adr r3, 8005938 <_dtoa_r+0x2c8>)
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	f7fa ff33 	bl	8000608 <__aeabi_dmul>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4620      	mov	r0, r4
 80057a8:	4629      	mov	r1, r5
 80057aa:	f7fa fd77 	bl	800029c <__adddf3>
 80057ae:	4604      	mov	r4, r0
 80057b0:	460d      	mov	r5, r1
 80057b2:	f7fb f9d9 	bl	8000b68 <__aeabi_d2iz>
 80057b6:	2200      	movs	r2, #0
 80057b8:	4607      	mov	r7, r0
 80057ba:	2300      	movs	r3, #0
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f7fb f994 	bl	8000aec <__aeabi_dcmplt>
 80057c4:	b140      	cbz	r0, 80057d8 <_dtoa_r+0x168>
 80057c6:	4638      	mov	r0, r7
 80057c8:	f7fa feb4 	bl	8000534 <__aeabi_i2d>
 80057cc:	4622      	mov	r2, r4
 80057ce:	462b      	mov	r3, r5
 80057d0:	f7fb f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80057d4:	b900      	cbnz	r0, 80057d8 <_dtoa_r+0x168>
 80057d6:	3f01      	subs	r7, #1
 80057d8:	2f16      	cmp	r7, #22
 80057da:	d852      	bhi.n	8005882 <_dtoa_r+0x212>
 80057dc:	4b5d      	ldr	r3, [pc, #372]	@ (8005954 <_dtoa_r+0x2e4>)
 80057de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80057ea:	f7fb f97f 	bl	8000aec <__aeabi_dcmplt>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d049      	beq.n	8005886 <_dtoa_r+0x216>
 80057f2:	3f01      	subs	r7, #1
 80057f4:	2300      	movs	r3, #0
 80057f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80057f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057fa:	1b9b      	subs	r3, r3, r6
 80057fc:	1e5a      	subs	r2, r3, #1
 80057fe:	bf45      	ittet	mi
 8005800:	f1c3 0301 	rsbmi	r3, r3, #1
 8005804:	9300      	strmi	r3, [sp, #0]
 8005806:	2300      	movpl	r3, #0
 8005808:	2300      	movmi	r3, #0
 800580a:	9206      	str	r2, [sp, #24]
 800580c:	bf54      	ite	pl
 800580e:	9300      	strpl	r3, [sp, #0]
 8005810:	9306      	strmi	r3, [sp, #24]
 8005812:	2f00      	cmp	r7, #0
 8005814:	db39      	blt.n	800588a <_dtoa_r+0x21a>
 8005816:	9b06      	ldr	r3, [sp, #24]
 8005818:	970d      	str	r7, [sp, #52]	@ 0x34
 800581a:	443b      	add	r3, r7
 800581c:	9306      	str	r3, [sp, #24]
 800581e:	2300      	movs	r3, #0
 8005820:	9308      	str	r3, [sp, #32]
 8005822:	9b07      	ldr	r3, [sp, #28]
 8005824:	2b09      	cmp	r3, #9
 8005826:	d863      	bhi.n	80058f0 <_dtoa_r+0x280>
 8005828:	2b05      	cmp	r3, #5
 800582a:	bfc4      	itt	gt
 800582c:	3b04      	subgt	r3, #4
 800582e:	9307      	strgt	r3, [sp, #28]
 8005830:	9b07      	ldr	r3, [sp, #28]
 8005832:	f1a3 0302 	sub.w	r3, r3, #2
 8005836:	bfcc      	ite	gt
 8005838:	2400      	movgt	r4, #0
 800583a:	2401      	movle	r4, #1
 800583c:	2b03      	cmp	r3, #3
 800583e:	d863      	bhi.n	8005908 <_dtoa_r+0x298>
 8005840:	e8df f003 	tbb	[pc, r3]
 8005844:	2b375452 	.word	0x2b375452
 8005848:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800584c:	441e      	add	r6, r3
 800584e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005852:	2b20      	cmp	r3, #32
 8005854:	bfc1      	itttt	gt
 8005856:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800585a:	409f      	lslgt	r7, r3
 800585c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005860:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005864:	bfd6      	itet	le
 8005866:	f1c3 0320 	rsble	r3, r3, #32
 800586a:	ea47 0003 	orrgt.w	r0, r7, r3
 800586e:	fa04 f003 	lslle.w	r0, r4, r3
 8005872:	f7fa fe4f 	bl	8000514 <__aeabi_ui2d>
 8005876:	2201      	movs	r2, #1
 8005878:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800587c:	3e01      	subs	r6, #1
 800587e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005880:	e776      	b.n	8005770 <_dtoa_r+0x100>
 8005882:	2301      	movs	r3, #1
 8005884:	e7b7      	b.n	80057f6 <_dtoa_r+0x186>
 8005886:	9010      	str	r0, [sp, #64]	@ 0x40
 8005888:	e7b6      	b.n	80057f8 <_dtoa_r+0x188>
 800588a:	9b00      	ldr	r3, [sp, #0]
 800588c:	1bdb      	subs	r3, r3, r7
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	427b      	negs	r3, r7
 8005892:	9308      	str	r3, [sp, #32]
 8005894:	2300      	movs	r3, #0
 8005896:	930d      	str	r3, [sp, #52]	@ 0x34
 8005898:	e7c3      	b.n	8005822 <_dtoa_r+0x1b2>
 800589a:	2301      	movs	r3, #1
 800589c:	9309      	str	r3, [sp, #36]	@ 0x24
 800589e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058a0:	eb07 0b03 	add.w	fp, r7, r3
 80058a4:	f10b 0301 	add.w	r3, fp, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	9303      	str	r3, [sp, #12]
 80058ac:	bfb8      	it	lt
 80058ae:	2301      	movlt	r3, #1
 80058b0:	e006      	b.n	80058c0 <_dtoa_r+0x250>
 80058b2:	2301      	movs	r3, #1
 80058b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dd28      	ble.n	800590e <_dtoa_r+0x29e>
 80058bc:	469b      	mov	fp, r3
 80058be:	9303      	str	r3, [sp, #12]
 80058c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80058c4:	2100      	movs	r1, #0
 80058c6:	2204      	movs	r2, #4
 80058c8:	f102 0514 	add.w	r5, r2, #20
 80058cc:	429d      	cmp	r5, r3
 80058ce:	d926      	bls.n	800591e <_dtoa_r+0x2ae>
 80058d0:	6041      	str	r1, [r0, #4]
 80058d2:	4648      	mov	r0, r9
 80058d4:	f000 ff56 	bl	8006784 <_Balloc>
 80058d8:	4682      	mov	sl, r0
 80058da:	2800      	cmp	r0, #0
 80058dc:	d142      	bne.n	8005964 <_dtoa_r+0x2f4>
 80058de:	4b1e      	ldr	r3, [pc, #120]	@ (8005958 <_dtoa_r+0x2e8>)
 80058e0:	4602      	mov	r2, r0
 80058e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80058e6:	e6da      	b.n	800569e <_dtoa_r+0x2e>
 80058e8:	2300      	movs	r3, #0
 80058ea:	e7e3      	b.n	80058b4 <_dtoa_r+0x244>
 80058ec:	2300      	movs	r3, #0
 80058ee:	e7d5      	b.n	800589c <_dtoa_r+0x22c>
 80058f0:	2401      	movs	r4, #1
 80058f2:	2300      	movs	r3, #0
 80058f4:	9307      	str	r3, [sp, #28]
 80058f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80058f8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8005902:	2312      	movs	r3, #18
 8005904:	920c      	str	r2, [sp, #48]	@ 0x30
 8005906:	e7db      	b.n	80058c0 <_dtoa_r+0x250>
 8005908:	2301      	movs	r3, #1
 800590a:	9309      	str	r3, [sp, #36]	@ 0x24
 800590c:	e7f4      	b.n	80058f8 <_dtoa_r+0x288>
 800590e:	f04f 0b01 	mov.w	fp, #1
 8005912:	f8cd b00c 	str.w	fp, [sp, #12]
 8005916:	465b      	mov	r3, fp
 8005918:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800591c:	e7d0      	b.n	80058c0 <_dtoa_r+0x250>
 800591e:	3101      	adds	r1, #1
 8005920:	0052      	lsls	r2, r2, #1
 8005922:	e7d1      	b.n	80058c8 <_dtoa_r+0x258>
 8005924:	f3af 8000 	nop.w
 8005928:	636f4361 	.word	0x636f4361
 800592c:	3fd287a7 	.word	0x3fd287a7
 8005930:	8b60c8b3 	.word	0x8b60c8b3
 8005934:	3fc68a28 	.word	0x3fc68a28
 8005938:	509f79fb 	.word	0x509f79fb
 800593c:	3fd34413 	.word	0x3fd34413
 8005940:	08007835 	.word	0x08007835
 8005944:	0800784c 	.word	0x0800784c
 8005948:	7ff00000 	.word	0x7ff00000
 800594c:	08007805 	.word	0x08007805
 8005950:	3ff80000 	.word	0x3ff80000
 8005954:	080079a0 	.word	0x080079a0
 8005958:	080078a4 	.word	0x080078a4
 800595c:	08007831 	.word	0x08007831
 8005960:	08007804 	.word	0x08007804
 8005964:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005968:	6018      	str	r0, [r3, #0]
 800596a:	9b03      	ldr	r3, [sp, #12]
 800596c:	2b0e      	cmp	r3, #14
 800596e:	f200 80a1 	bhi.w	8005ab4 <_dtoa_r+0x444>
 8005972:	2c00      	cmp	r4, #0
 8005974:	f000 809e 	beq.w	8005ab4 <_dtoa_r+0x444>
 8005978:	2f00      	cmp	r7, #0
 800597a:	dd33      	ble.n	80059e4 <_dtoa_r+0x374>
 800597c:	4b9c      	ldr	r3, [pc, #624]	@ (8005bf0 <_dtoa_r+0x580>)
 800597e:	f007 020f 	and.w	r2, r7, #15
 8005982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005986:	ed93 7b00 	vldr	d7, [r3]
 800598a:	05f8      	lsls	r0, r7, #23
 800598c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005990:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005994:	d516      	bpl.n	80059c4 <_dtoa_r+0x354>
 8005996:	4b97      	ldr	r3, [pc, #604]	@ (8005bf4 <_dtoa_r+0x584>)
 8005998:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800599c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059a0:	f7fa ff5c 	bl	800085c <__aeabi_ddiv>
 80059a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059a8:	f004 040f 	and.w	r4, r4, #15
 80059ac:	2603      	movs	r6, #3
 80059ae:	4d91      	ldr	r5, [pc, #580]	@ (8005bf4 <_dtoa_r+0x584>)
 80059b0:	b954      	cbnz	r4, 80059c8 <_dtoa_r+0x358>
 80059b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ba:	f7fa ff4f 	bl	800085c <__aeabi_ddiv>
 80059be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059c2:	e028      	b.n	8005a16 <_dtoa_r+0x3a6>
 80059c4:	2602      	movs	r6, #2
 80059c6:	e7f2      	b.n	80059ae <_dtoa_r+0x33e>
 80059c8:	07e1      	lsls	r1, r4, #31
 80059ca:	d508      	bpl.n	80059de <_dtoa_r+0x36e>
 80059cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80059d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059d4:	f7fa fe18 	bl	8000608 <__aeabi_dmul>
 80059d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059dc:	3601      	adds	r6, #1
 80059de:	1064      	asrs	r4, r4, #1
 80059e0:	3508      	adds	r5, #8
 80059e2:	e7e5      	b.n	80059b0 <_dtoa_r+0x340>
 80059e4:	f000 80af 	beq.w	8005b46 <_dtoa_r+0x4d6>
 80059e8:	427c      	negs	r4, r7
 80059ea:	4b81      	ldr	r3, [pc, #516]	@ (8005bf0 <_dtoa_r+0x580>)
 80059ec:	4d81      	ldr	r5, [pc, #516]	@ (8005bf4 <_dtoa_r+0x584>)
 80059ee:	f004 020f 	and.w	r2, r4, #15
 80059f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80059fe:	f7fa fe03 	bl	8000608 <__aeabi_dmul>
 8005a02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a06:	1124      	asrs	r4, r4, #4
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2602      	movs	r6, #2
 8005a0c:	2c00      	cmp	r4, #0
 8005a0e:	f040 808f 	bne.w	8005b30 <_dtoa_r+0x4c0>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1d3      	bne.n	80059be <_dtoa_r+0x34e>
 8005a16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a18:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8094 	beq.w	8005b4a <_dtoa_r+0x4da>
 8005a22:	4b75      	ldr	r3, [pc, #468]	@ (8005bf8 <_dtoa_r+0x588>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fb f85f 	bl	8000aec <__aeabi_dcmplt>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f000 808b 	beq.w	8005b4a <_dtoa_r+0x4da>
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 8087 	beq.w	8005b4a <_dtoa_r+0x4da>
 8005a3c:	f1bb 0f00 	cmp.w	fp, #0
 8005a40:	dd34      	ble.n	8005aac <_dtoa_r+0x43c>
 8005a42:	4620      	mov	r0, r4
 8005a44:	4b6d      	ldr	r3, [pc, #436]	@ (8005bfc <_dtoa_r+0x58c>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	4629      	mov	r1, r5
 8005a4a:	f7fa fddd 	bl	8000608 <__aeabi_dmul>
 8005a4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a52:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005a56:	3601      	adds	r6, #1
 8005a58:	465c      	mov	r4, fp
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7fa fd6a 	bl	8000534 <__aeabi_i2d>
 8005a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a64:	f7fa fdd0 	bl	8000608 <__aeabi_dmul>
 8005a68:	4b65      	ldr	r3, [pc, #404]	@ (8005c00 <_dtoa_r+0x590>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f7fa fc16 	bl	800029c <__adddf3>
 8005a70:	4605      	mov	r5, r0
 8005a72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	d16a      	bne.n	8005b50 <_dtoa_r+0x4e0>
 8005a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a7e:	4b61      	ldr	r3, [pc, #388]	@ (8005c04 <_dtoa_r+0x594>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	f7fa fc09 	bl	8000298 <__aeabi_dsub>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a8e:	462a      	mov	r2, r5
 8005a90:	4633      	mov	r3, r6
 8005a92:	f7fb f849 	bl	8000b28 <__aeabi_dcmpgt>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	f040 8298 	bne.w	8005fcc <_dtoa_r+0x95c>
 8005a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005aa6:	f7fb f821 	bl	8000aec <__aeabi_dcmplt>
 8005aaa:	bb38      	cbnz	r0, 8005afc <_dtoa_r+0x48c>
 8005aac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005ab0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ab4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f2c0 8157 	blt.w	8005d6a <_dtoa_r+0x6fa>
 8005abc:	2f0e      	cmp	r7, #14
 8005abe:	f300 8154 	bgt.w	8005d6a <_dtoa_r+0x6fa>
 8005ac2:	4b4b      	ldr	r3, [pc, #300]	@ (8005bf0 <_dtoa_r+0x580>)
 8005ac4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ac8:	ed93 7b00 	vldr	d7, [r3]
 8005acc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	ed8d 7b00 	vstr	d7, [sp]
 8005ad4:	f280 80e5 	bge.w	8005ca2 <_dtoa_r+0x632>
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f300 80e1 	bgt.w	8005ca2 <_dtoa_r+0x632>
 8005ae0:	d10c      	bne.n	8005afc <_dtoa_r+0x48c>
 8005ae2:	4b48      	ldr	r3, [pc, #288]	@ (8005c04 <_dtoa_r+0x594>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	ec51 0b17 	vmov	r0, r1, d7
 8005aea:	f7fa fd8d 	bl	8000608 <__aeabi_dmul>
 8005aee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005af2:	f7fb f80f 	bl	8000b14 <__aeabi_dcmpge>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	f000 8266 	beq.w	8005fc8 <_dtoa_r+0x958>
 8005afc:	2400      	movs	r4, #0
 8005afe:	4625      	mov	r5, r4
 8005b00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b02:	4656      	mov	r6, sl
 8005b04:	ea6f 0803 	mvn.w	r8, r3
 8005b08:	2700      	movs	r7, #0
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	4648      	mov	r0, r9
 8005b0e:	f000 fe79 	bl	8006804 <_Bfree>
 8005b12:	2d00      	cmp	r5, #0
 8005b14:	f000 80bd 	beq.w	8005c92 <_dtoa_r+0x622>
 8005b18:	b12f      	cbz	r7, 8005b26 <_dtoa_r+0x4b6>
 8005b1a:	42af      	cmp	r7, r5
 8005b1c:	d003      	beq.n	8005b26 <_dtoa_r+0x4b6>
 8005b1e:	4639      	mov	r1, r7
 8005b20:	4648      	mov	r0, r9
 8005b22:	f000 fe6f 	bl	8006804 <_Bfree>
 8005b26:	4629      	mov	r1, r5
 8005b28:	4648      	mov	r0, r9
 8005b2a:	f000 fe6b 	bl	8006804 <_Bfree>
 8005b2e:	e0b0      	b.n	8005c92 <_dtoa_r+0x622>
 8005b30:	07e2      	lsls	r2, r4, #31
 8005b32:	d505      	bpl.n	8005b40 <_dtoa_r+0x4d0>
 8005b34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b38:	f7fa fd66 	bl	8000608 <__aeabi_dmul>
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	2301      	movs	r3, #1
 8005b40:	1064      	asrs	r4, r4, #1
 8005b42:	3508      	adds	r5, #8
 8005b44:	e762      	b.n	8005a0c <_dtoa_r+0x39c>
 8005b46:	2602      	movs	r6, #2
 8005b48:	e765      	b.n	8005a16 <_dtoa_r+0x3a6>
 8005b4a:	9c03      	ldr	r4, [sp, #12]
 8005b4c:	46b8      	mov	r8, r7
 8005b4e:	e784      	b.n	8005a5a <_dtoa_r+0x3ea>
 8005b50:	4b27      	ldr	r3, [pc, #156]	@ (8005bf0 <_dtoa_r+0x580>)
 8005b52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b5c:	4454      	add	r4, sl
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	d054      	beq.n	8005c0c <_dtoa_r+0x59c>
 8005b62:	4929      	ldr	r1, [pc, #164]	@ (8005c08 <_dtoa_r+0x598>)
 8005b64:	2000      	movs	r0, #0
 8005b66:	f7fa fe79 	bl	800085c <__aeabi_ddiv>
 8005b6a:	4633      	mov	r3, r6
 8005b6c:	462a      	mov	r2, r5
 8005b6e:	f7fa fb93 	bl	8000298 <__aeabi_dsub>
 8005b72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b76:	4656      	mov	r6, sl
 8005b78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b7c:	f7fa fff4 	bl	8000b68 <__aeabi_d2iz>
 8005b80:	4605      	mov	r5, r0
 8005b82:	f7fa fcd7 	bl	8000534 <__aeabi_i2d>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b8e:	f7fa fb83 	bl	8000298 <__aeabi_dsub>
 8005b92:	3530      	adds	r5, #48	@ 0x30
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b9c:	f806 5b01 	strb.w	r5, [r6], #1
 8005ba0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005ba4:	f7fa ffa2 	bl	8000aec <__aeabi_dcmplt>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d172      	bne.n	8005c92 <_dtoa_r+0x622>
 8005bac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bb0:	4911      	ldr	r1, [pc, #68]	@ (8005bf8 <_dtoa_r+0x588>)
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	f7fa fb70 	bl	8000298 <__aeabi_dsub>
 8005bb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005bbc:	f7fa ff96 	bl	8000aec <__aeabi_dcmplt>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	f040 80b4 	bne.w	8005d2e <_dtoa_r+0x6be>
 8005bc6:	42a6      	cmp	r6, r4
 8005bc8:	f43f af70 	beq.w	8005aac <_dtoa_r+0x43c>
 8005bcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bfc <_dtoa_r+0x58c>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f7fa fd18 	bl	8000608 <__aeabi_dmul>
 8005bd8:	4b08      	ldr	r3, [pc, #32]	@ (8005bfc <_dtoa_r+0x58c>)
 8005bda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005bde:	2200      	movs	r2, #0
 8005be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005be4:	f7fa fd10 	bl	8000608 <__aeabi_dmul>
 8005be8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bec:	e7c4      	b.n	8005b78 <_dtoa_r+0x508>
 8005bee:	bf00      	nop
 8005bf0:	080079a0 	.word	0x080079a0
 8005bf4:	08007978 	.word	0x08007978
 8005bf8:	3ff00000 	.word	0x3ff00000
 8005bfc:	40240000 	.word	0x40240000
 8005c00:	401c0000 	.word	0x401c0000
 8005c04:	40140000 	.word	0x40140000
 8005c08:	3fe00000 	.word	0x3fe00000
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f7fa fcfa 	bl	8000608 <__aeabi_dmul>
 8005c14:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c18:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005c1a:	4656      	mov	r6, sl
 8005c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c20:	f7fa ffa2 	bl	8000b68 <__aeabi_d2iz>
 8005c24:	4605      	mov	r5, r0
 8005c26:	f7fa fc85 	bl	8000534 <__aeabi_i2d>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c32:	f7fa fb31 	bl	8000298 <__aeabi_dsub>
 8005c36:	3530      	adds	r5, #48	@ 0x30
 8005c38:	f806 5b01 	strb.w	r5, [r6], #1
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	42a6      	cmp	r6, r4
 8005c42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	d124      	bne.n	8005c96 <_dtoa_r+0x626>
 8005c4c:	4baf      	ldr	r3, [pc, #700]	@ (8005f0c <_dtoa_r+0x89c>)
 8005c4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005c52:	f7fa fb23 	bl	800029c <__adddf3>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c5e:	f7fa ff63 	bl	8000b28 <__aeabi_dcmpgt>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d163      	bne.n	8005d2e <_dtoa_r+0x6be>
 8005c66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c6a:	49a8      	ldr	r1, [pc, #672]	@ (8005f0c <_dtoa_r+0x89c>)
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	f7fa fb13 	bl	8000298 <__aeabi_dsub>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c7a:	f7fa ff37 	bl	8000aec <__aeabi_dcmplt>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	f43f af14 	beq.w	8005aac <_dtoa_r+0x43c>
 8005c84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c86:	1e73      	subs	r3, r6, #1
 8005c88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c8e:	2b30      	cmp	r3, #48	@ 0x30
 8005c90:	d0f8      	beq.n	8005c84 <_dtoa_r+0x614>
 8005c92:	4647      	mov	r7, r8
 8005c94:	e03b      	b.n	8005d0e <_dtoa_r+0x69e>
 8005c96:	4b9e      	ldr	r3, [pc, #632]	@ (8005f10 <_dtoa_r+0x8a0>)
 8005c98:	f7fa fcb6 	bl	8000608 <__aeabi_dmul>
 8005c9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ca0:	e7bc      	b.n	8005c1c <_dtoa_r+0x5ac>
 8005ca2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005ca6:	4656      	mov	r6, sl
 8005ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cac:	4620      	mov	r0, r4
 8005cae:	4629      	mov	r1, r5
 8005cb0:	f7fa fdd4 	bl	800085c <__aeabi_ddiv>
 8005cb4:	f7fa ff58 	bl	8000b68 <__aeabi_d2iz>
 8005cb8:	4680      	mov	r8, r0
 8005cba:	f7fa fc3b 	bl	8000534 <__aeabi_i2d>
 8005cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cc2:	f7fa fca1 	bl	8000608 <__aeabi_dmul>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4620      	mov	r0, r4
 8005ccc:	4629      	mov	r1, r5
 8005cce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005cd2:	f7fa fae1 	bl	8000298 <__aeabi_dsub>
 8005cd6:	f806 4b01 	strb.w	r4, [r6], #1
 8005cda:	9d03      	ldr	r5, [sp, #12]
 8005cdc:	eba6 040a 	sub.w	r4, r6, sl
 8005ce0:	42a5      	cmp	r5, r4
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	d133      	bne.n	8005d50 <_dtoa_r+0x6e0>
 8005ce8:	f7fa fad8 	bl	800029c <__adddf3>
 8005cec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	460d      	mov	r5, r1
 8005cf4:	f7fa ff18 	bl	8000b28 <__aeabi_dcmpgt>
 8005cf8:	b9c0      	cbnz	r0, 8005d2c <_dtoa_r+0x6bc>
 8005cfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cfe:	4620      	mov	r0, r4
 8005d00:	4629      	mov	r1, r5
 8005d02:	f7fa fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d06:	b110      	cbz	r0, 8005d0e <_dtoa_r+0x69e>
 8005d08:	f018 0f01 	tst.w	r8, #1
 8005d0c:	d10e      	bne.n	8005d2c <_dtoa_r+0x6bc>
 8005d0e:	9902      	ldr	r1, [sp, #8]
 8005d10:	4648      	mov	r0, r9
 8005d12:	f000 fd77 	bl	8006804 <_Bfree>
 8005d16:	2300      	movs	r3, #0
 8005d18:	7033      	strb	r3, [r6, #0]
 8005d1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d1c:	3701      	adds	r7, #1
 8005d1e:	601f      	str	r7, [r3, #0]
 8005d20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 824b 	beq.w	80061be <_dtoa_r+0xb4e>
 8005d28:	601e      	str	r6, [r3, #0]
 8005d2a:	e248      	b.n	80061be <_dtoa_r+0xb4e>
 8005d2c:	46b8      	mov	r8, r7
 8005d2e:	4633      	mov	r3, r6
 8005d30:	461e      	mov	r6, r3
 8005d32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d36:	2a39      	cmp	r2, #57	@ 0x39
 8005d38:	d106      	bne.n	8005d48 <_dtoa_r+0x6d8>
 8005d3a:	459a      	cmp	sl, r3
 8005d3c:	d1f8      	bne.n	8005d30 <_dtoa_r+0x6c0>
 8005d3e:	2230      	movs	r2, #48	@ 0x30
 8005d40:	f108 0801 	add.w	r8, r8, #1
 8005d44:	f88a 2000 	strb.w	r2, [sl]
 8005d48:	781a      	ldrb	r2, [r3, #0]
 8005d4a:	3201      	adds	r2, #1
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	e7a0      	b.n	8005c92 <_dtoa_r+0x622>
 8005d50:	4b6f      	ldr	r3, [pc, #444]	@ (8005f10 <_dtoa_r+0x8a0>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	f7fa fc58 	bl	8000608 <__aeabi_dmul>
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	460d      	mov	r5, r1
 8005d60:	f7fa feba 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d09f      	beq.n	8005ca8 <_dtoa_r+0x638>
 8005d68:	e7d1      	b.n	8005d0e <_dtoa_r+0x69e>
 8005d6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	f000 80ea 	beq.w	8005f46 <_dtoa_r+0x8d6>
 8005d72:	9a07      	ldr	r2, [sp, #28]
 8005d74:	2a01      	cmp	r2, #1
 8005d76:	f300 80cd 	bgt.w	8005f14 <_dtoa_r+0x8a4>
 8005d7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	f000 80c1 	beq.w	8005f04 <_dtoa_r+0x894>
 8005d82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d86:	9c08      	ldr	r4, [sp, #32]
 8005d88:	9e00      	ldr	r6, [sp, #0]
 8005d8a:	9a00      	ldr	r2, [sp, #0]
 8005d8c:	441a      	add	r2, r3
 8005d8e:	9200      	str	r2, [sp, #0]
 8005d90:	9a06      	ldr	r2, [sp, #24]
 8005d92:	2101      	movs	r1, #1
 8005d94:	441a      	add	r2, r3
 8005d96:	4648      	mov	r0, r9
 8005d98:	9206      	str	r2, [sp, #24]
 8005d9a:	f000 fde7 	bl	800696c <__i2b>
 8005d9e:	4605      	mov	r5, r0
 8005da0:	b166      	cbz	r6, 8005dbc <_dtoa_r+0x74c>
 8005da2:	9b06      	ldr	r3, [sp, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	dd09      	ble.n	8005dbc <_dtoa_r+0x74c>
 8005da8:	42b3      	cmp	r3, r6
 8005daa:	9a00      	ldr	r2, [sp, #0]
 8005dac:	bfa8      	it	ge
 8005dae:	4633      	movge	r3, r6
 8005db0:	1ad2      	subs	r2, r2, r3
 8005db2:	9200      	str	r2, [sp, #0]
 8005db4:	9a06      	ldr	r2, [sp, #24]
 8005db6:	1af6      	subs	r6, r6, r3
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	9306      	str	r3, [sp, #24]
 8005dbc:	9b08      	ldr	r3, [sp, #32]
 8005dbe:	b30b      	cbz	r3, 8005e04 <_dtoa_r+0x794>
 8005dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 80c6 	beq.w	8005f54 <_dtoa_r+0x8e4>
 8005dc8:	2c00      	cmp	r4, #0
 8005dca:	f000 80c0 	beq.w	8005f4e <_dtoa_r+0x8de>
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	4648      	mov	r0, r9
 8005dd4:	f000 fe82 	bl	8006adc <__pow5mult>
 8005dd8:	9a02      	ldr	r2, [sp, #8]
 8005dda:	4601      	mov	r1, r0
 8005ddc:	4605      	mov	r5, r0
 8005dde:	4648      	mov	r0, r9
 8005de0:	f000 fdda 	bl	8006998 <__multiply>
 8005de4:	9902      	ldr	r1, [sp, #8]
 8005de6:	4680      	mov	r8, r0
 8005de8:	4648      	mov	r0, r9
 8005dea:	f000 fd0b 	bl	8006804 <_Bfree>
 8005dee:	9b08      	ldr	r3, [sp, #32]
 8005df0:	1b1b      	subs	r3, r3, r4
 8005df2:	9308      	str	r3, [sp, #32]
 8005df4:	f000 80b1 	beq.w	8005f5a <_dtoa_r+0x8ea>
 8005df8:	9a08      	ldr	r2, [sp, #32]
 8005dfa:	4641      	mov	r1, r8
 8005dfc:	4648      	mov	r0, r9
 8005dfe:	f000 fe6d 	bl	8006adc <__pow5mult>
 8005e02:	9002      	str	r0, [sp, #8]
 8005e04:	2101      	movs	r1, #1
 8005e06:	4648      	mov	r0, r9
 8005e08:	f000 fdb0 	bl	800696c <__i2b>
 8005e0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e0e:	4604      	mov	r4, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 81d8 	beq.w	80061c6 <_dtoa_r+0xb56>
 8005e16:	461a      	mov	r2, r3
 8005e18:	4601      	mov	r1, r0
 8005e1a:	4648      	mov	r0, r9
 8005e1c:	f000 fe5e 	bl	8006adc <__pow5mult>
 8005e20:	9b07      	ldr	r3, [sp, #28]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	4604      	mov	r4, r0
 8005e26:	f300 809f 	bgt.w	8005f68 <_dtoa_r+0x8f8>
 8005e2a:	9b04      	ldr	r3, [sp, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f040 8097 	bne.w	8005f60 <_dtoa_r+0x8f0>
 8005e32:	9b05      	ldr	r3, [sp, #20]
 8005e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f040 8093 	bne.w	8005f64 <_dtoa_r+0x8f4>
 8005e3e:	9b05      	ldr	r3, [sp, #20]
 8005e40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e44:	0d1b      	lsrs	r3, r3, #20
 8005e46:	051b      	lsls	r3, r3, #20
 8005e48:	b133      	cbz	r3, 8005e58 <_dtoa_r+0x7e8>
 8005e4a:	9b00      	ldr	r3, [sp, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	9b06      	ldr	r3, [sp, #24]
 8005e52:	3301      	adds	r3, #1
 8005e54:	9306      	str	r3, [sp, #24]
 8005e56:	2301      	movs	r3, #1
 8005e58:	9308      	str	r3, [sp, #32]
 8005e5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 81b8 	beq.w	80061d2 <_dtoa_r+0xb62>
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e68:	6918      	ldr	r0, [r3, #16]
 8005e6a:	f000 fd33 	bl	80068d4 <__hi0bits>
 8005e6e:	f1c0 0020 	rsb	r0, r0, #32
 8005e72:	9b06      	ldr	r3, [sp, #24]
 8005e74:	4418      	add	r0, r3
 8005e76:	f010 001f 	ands.w	r0, r0, #31
 8005e7a:	f000 8082 	beq.w	8005f82 <_dtoa_r+0x912>
 8005e7e:	f1c0 0320 	rsb	r3, r0, #32
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	dd73      	ble.n	8005f6e <_dtoa_r+0x8fe>
 8005e86:	9b00      	ldr	r3, [sp, #0]
 8005e88:	f1c0 001c 	rsb	r0, r0, #28
 8005e8c:	4403      	add	r3, r0
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	9b06      	ldr	r3, [sp, #24]
 8005e92:	4403      	add	r3, r0
 8005e94:	4406      	add	r6, r0
 8005e96:	9306      	str	r3, [sp, #24]
 8005e98:	9b00      	ldr	r3, [sp, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	dd05      	ble.n	8005eaa <_dtoa_r+0x83a>
 8005e9e:	9902      	ldr	r1, [sp, #8]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4648      	mov	r0, r9
 8005ea4:	f000 fe74 	bl	8006b90 <__lshift>
 8005ea8:	9002      	str	r0, [sp, #8]
 8005eaa:	9b06      	ldr	r3, [sp, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	dd05      	ble.n	8005ebc <_dtoa_r+0x84c>
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	4648      	mov	r0, r9
 8005eb6:	f000 fe6b 	bl	8006b90 <__lshift>
 8005eba:	4604      	mov	r4, r0
 8005ebc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d061      	beq.n	8005f86 <_dtoa_r+0x916>
 8005ec2:	9802      	ldr	r0, [sp, #8]
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	f000 fecf 	bl	8006c68 <__mcmp>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	da5b      	bge.n	8005f86 <_dtoa_r+0x916>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9902      	ldr	r1, [sp, #8]
 8005ed2:	220a      	movs	r2, #10
 8005ed4:	4648      	mov	r0, r9
 8005ed6:	f000 fcb7 	bl	8006848 <__multadd>
 8005eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005edc:	9002      	str	r0, [sp, #8]
 8005ede:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8177 	beq.w	80061d6 <_dtoa_r+0xb66>
 8005ee8:	4629      	mov	r1, r5
 8005eea:	2300      	movs	r3, #0
 8005eec:	220a      	movs	r2, #10
 8005eee:	4648      	mov	r0, r9
 8005ef0:	f000 fcaa 	bl	8006848 <__multadd>
 8005ef4:	f1bb 0f00 	cmp.w	fp, #0
 8005ef8:	4605      	mov	r5, r0
 8005efa:	dc6f      	bgt.n	8005fdc <_dtoa_r+0x96c>
 8005efc:	9b07      	ldr	r3, [sp, #28]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	dc49      	bgt.n	8005f96 <_dtoa_r+0x926>
 8005f02:	e06b      	b.n	8005fdc <_dtoa_r+0x96c>
 8005f04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f0a:	e73c      	b.n	8005d86 <_dtoa_r+0x716>
 8005f0c:	3fe00000 	.word	0x3fe00000
 8005f10:	40240000 	.word	0x40240000
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	1e5c      	subs	r4, r3, #1
 8005f18:	9b08      	ldr	r3, [sp, #32]
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	db09      	blt.n	8005f32 <_dtoa_r+0x8c2>
 8005f1e:	1b1c      	subs	r4, r3, r4
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f6bf af30 	bge.w	8005d88 <_dtoa_r+0x718>
 8005f28:	9b00      	ldr	r3, [sp, #0]
 8005f2a:	9a03      	ldr	r2, [sp, #12]
 8005f2c:	1a9e      	subs	r6, r3, r2
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e72b      	b.n	8005d8a <_dtoa_r+0x71a>
 8005f32:	9b08      	ldr	r3, [sp, #32]
 8005f34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005f36:	9408      	str	r4, [sp, #32]
 8005f38:	1ae3      	subs	r3, r4, r3
 8005f3a:	441a      	add	r2, r3
 8005f3c:	9e00      	ldr	r6, [sp, #0]
 8005f3e:	9b03      	ldr	r3, [sp, #12]
 8005f40:	920d      	str	r2, [sp, #52]	@ 0x34
 8005f42:	2400      	movs	r4, #0
 8005f44:	e721      	b.n	8005d8a <_dtoa_r+0x71a>
 8005f46:	9c08      	ldr	r4, [sp, #32]
 8005f48:	9e00      	ldr	r6, [sp, #0]
 8005f4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005f4c:	e728      	b.n	8005da0 <_dtoa_r+0x730>
 8005f4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005f52:	e751      	b.n	8005df8 <_dtoa_r+0x788>
 8005f54:	9a08      	ldr	r2, [sp, #32]
 8005f56:	9902      	ldr	r1, [sp, #8]
 8005f58:	e750      	b.n	8005dfc <_dtoa_r+0x78c>
 8005f5a:	f8cd 8008 	str.w	r8, [sp, #8]
 8005f5e:	e751      	b.n	8005e04 <_dtoa_r+0x794>
 8005f60:	2300      	movs	r3, #0
 8005f62:	e779      	b.n	8005e58 <_dtoa_r+0x7e8>
 8005f64:	9b04      	ldr	r3, [sp, #16]
 8005f66:	e777      	b.n	8005e58 <_dtoa_r+0x7e8>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	9308      	str	r3, [sp, #32]
 8005f6c:	e779      	b.n	8005e62 <_dtoa_r+0x7f2>
 8005f6e:	d093      	beq.n	8005e98 <_dtoa_r+0x828>
 8005f70:	9a00      	ldr	r2, [sp, #0]
 8005f72:	331c      	adds	r3, #28
 8005f74:	441a      	add	r2, r3
 8005f76:	9200      	str	r2, [sp, #0]
 8005f78:	9a06      	ldr	r2, [sp, #24]
 8005f7a:	441a      	add	r2, r3
 8005f7c:	441e      	add	r6, r3
 8005f7e:	9206      	str	r2, [sp, #24]
 8005f80:	e78a      	b.n	8005e98 <_dtoa_r+0x828>
 8005f82:	4603      	mov	r3, r0
 8005f84:	e7f4      	b.n	8005f70 <_dtoa_r+0x900>
 8005f86:	9b03      	ldr	r3, [sp, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	46b8      	mov	r8, r7
 8005f8c:	dc20      	bgt.n	8005fd0 <_dtoa_r+0x960>
 8005f8e:	469b      	mov	fp, r3
 8005f90:	9b07      	ldr	r3, [sp, #28]
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	dd1e      	ble.n	8005fd4 <_dtoa_r+0x964>
 8005f96:	f1bb 0f00 	cmp.w	fp, #0
 8005f9a:	f47f adb1 	bne.w	8005b00 <_dtoa_r+0x490>
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	465b      	mov	r3, fp
 8005fa2:	2205      	movs	r2, #5
 8005fa4:	4648      	mov	r0, r9
 8005fa6:	f000 fc4f 	bl	8006848 <__multadd>
 8005faa:	4601      	mov	r1, r0
 8005fac:	4604      	mov	r4, r0
 8005fae:	9802      	ldr	r0, [sp, #8]
 8005fb0:	f000 fe5a 	bl	8006c68 <__mcmp>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	f77f ada3 	ble.w	8005b00 <_dtoa_r+0x490>
 8005fba:	4656      	mov	r6, sl
 8005fbc:	2331      	movs	r3, #49	@ 0x31
 8005fbe:	f806 3b01 	strb.w	r3, [r6], #1
 8005fc2:	f108 0801 	add.w	r8, r8, #1
 8005fc6:	e59f      	b.n	8005b08 <_dtoa_r+0x498>
 8005fc8:	9c03      	ldr	r4, [sp, #12]
 8005fca:	46b8      	mov	r8, r7
 8005fcc:	4625      	mov	r5, r4
 8005fce:	e7f4      	b.n	8005fba <_dtoa_r+0x94a>
 8005fd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 8101 	beq.w	80061de <_dtoa_r+0xb6e>
 8005fdc:	2e00      	cmp	r6, #0
 8005fde:	dd05      	ble.n	8005fec <_dtoa_r+0x97c>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4632      	mov	r2, r6
 8005fe4:	4648      	mov	r0, r9
 8005fe6:	f000 fdd3 	bl	8006b90 <__lshift>
 8005fea:	4605      	mov	r5, r0
 8005fec:	9b08      	ldr	r3, [sp, #32]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d05c      	beq.n	80060ac <_dtoa_r+0xa3c>
 8005ff2:	6869      	ldr	r1, [r5, #4]
 8005ff4:	4648      	mov	r0, r9
 8005ff6:	f000 fbc5 	bl	8006784 <_Balloc>
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	b928      	cbnz	r0, 800600a <_dtoa_r+0x99a>
 8005ffe:	4b82      	ldr	r3, [pc, #520]	@ (8006208 <_dtoa_r+0xb98>)
 8006000:	4602      	mov	r2, r0
 8006002:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006006:	f7ff bb4a 	b.w	800569e <_dtoa_r+0x2e>
 800600a:	692a      	ldr	r2, [r5, #16]
 800600c:	3202      	adds	r2, #2
 800600e:	0092      	lsls	r2, r2, #2
 8006010:	f105 010c 	add.w	r1, r5, #12
 8006014:	300c      	adds	r0, #12
 8006016:	f001 f811 	bl	800703c <memcpy>
 800601a:	2201      	movs	r2, #1
 800601c:	4631      	mov	r1, r6
 800601e:	4648      	mov	r0, r9
 8006020:	f000 fdb6 	bl	8006b90 <__lshift>
 8006024:	f10a 0301 	add.w	r3, sl, #1
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	eb0a 030b 	add.w	r3, sl, fp
 800602e:	9308      	str	r3, [sp, #32]
 8006030:	9b04      	ldr	r3, [sp, #16]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	462f      	mov	r7, r5
 8006038:	9306      	str	r3, [sp, #24]
 800603a:	4605      	mov	r5, r0
 800603c:	9b00      	ldr	r3, [sp, #0]
 800603e:	9802      	ldr	r0, [sp, #8]
 8006040:	4621      	mov	r1, r4
 8006042:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006046:	f7ff fa89 	bl	800555c <quorem>
 800604a:	4603      	mov	r3, r0
 800604c:	3330      	adds	r3, #48	@ 0x30
 800604e:	9003      	str	r0, [sp, #12]
 8006050:	4639      	mov	r1, r7
 8006052:	9802      	ldr	r0, [sp, #8]
 8006054:	9309      	str	r3, [sp, #36]	@ 0x24
 8006056:	f000 fe07 	bl	8006c68 <__mcmp>
 800605a:	462a      	mov	r2, r5
 800605c:	9004      	str	r0, [sp, #16]
 800605e:	4621      	mov	r1, r4
 8006060:	4648      	mov	r0, r9
 8006062:	f000 fe1d 	bl	8006ca0 <__mdiff>
 8006066:	68c2      	ldr	r2, [r0, #12]
 8006068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800606a:	4606      	mov	r6, r0
 800606c:	bb02      	cbnz	r2, 80060b0 <_dtoa_r+0xa40>
 800606e:	4601      	mov	r1, r0
 8006070:	9802      	ldr	r0, [sp, #8]
 8006072:	f000 fdf9 	bl	8006c68 <__mcmp>
 8006076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006078:	4602      	mov	r2, r0
 800607a:	4631      	mov	r1, r6
 800607c:	4648      	mov	r0, r9
 800607e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006080:	9309      	str	r3, [sp, #36]	@ 0x24
 8006082:	f000 fbbf 	bl	8006804 <_Bfree>
 8006086:	9b07      	ldr	r3, [sp, #28]
 8006088:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800608a:	9e00      	ldr	r6, [sp, #0]
 800608c:	ea42 0103 	orr.w	r1, r2, r3
 8006090:	9b06      	ldr	r3, [sp, #24]
 8006092:	4319      	orrs	r1, r3
 8006094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006096:	d10d      	bne.n	80060b4 <_dtoa_r+0xa44>
 8006098:	2b39      	cmp	r3, #57	@ 0x39
 800609a:	d027      	beq.n	80060ec <_dtoa_r+0xa7c>
 800609c:	9a04      	ldr	r2, [sp, #16]
 800609e:	2a00      	cmp	r2, #0
 80060a0:	dd01      	ble.n	80060a6 <_dtoa_r+0xa36>
 80060a2:	9b03      	ldr	r3, [sp, #12]
 80060a4:	3331      	adds	r3, #49	@ 0x31
 80060a6:	f88b 3000 	strb.w	r3, [fp]
 80060aa:	e52e      	b.n	8005b0a <_dtoa_r+0x49a>
 80060ac:	4628      	mov	r0, r5
 80060ae:	e7b9      	b.n	8006024 <_dtoa_r+0x9b4>
 80060b0:	2201      	movs	r2, #1
 80060b2:	e7e2      	b.n	800607a <_dtoa_r+0xa0a>
 80060b4:	9904      	ldr	r1, [sp, #16]
 80060b6:	2900      	cmp	r1, #0
 80060b8:	db04      	blt.n	80060c4 <_dtoa_r+0xa54>
 80060ba:	9807      	ldr	r0, [sp, #28]
 80060bc:	4301      	orrs	r1, r0
 80060be:	9806      	ldr	r0, [sp, #24]
 80060c0:	4301      	orrs	r1, r0
 80060c2:	d120      	bne.n	8006106 <_dtoa_r+0xa96>
 80060c4:	2a00      	cmp	r2, #0
 80060c6:	ddee      	ble.n	80060a6 <_dtoa_r+0xa36>
 80060c8:	9902      	ldr	r1, [sp, #8]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	2201      	movs	r2, #1
 80060ce:	4648      	mov	r0, r9
 80060d0:	f000 fd5e 	bl	8006b90 <__lshift>
 80060d4:	4621      	mov	r1, r4
 80060d6:	9002      	str	r0, [sp, #8]
 80060d8:	f000 fdc6 	bl	8006c68 <__mcmp>
 80060dc:	2800      	cmp	r0, #0
 80060de:	9b00      	ldr	r3, [sp, #0]
 80060e0:	dc02      	bgt.n	80060e8 <_dtoa_r+0xa78>
 80060e2:	d1e0      	bne.n	80060a6 <_dtoa_r+0xa36>
 80060e4:	07da      	lsls	r2, r3, #31
 80060e6:	d5de      	bpl.n	80060a6 <_dtoa_r+0xa36>
 80060e8:	2b39      	cmp	r3, #57	@ 0x39
 80060ea:	d1da      	bne.n	80060a2 <_dtoa_r+0xa32>
 80060ec:	2339      	movs	r3, #57	@ 0x39
 80060ee:	f88b 3000 	strb.w	r3, [fp]
 80060f2:	4633      	mov	r3, r6
 80060f4:	461e      	mov	r6, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060fc:	2a39      	cmp	r2, #57	@ 0x39
 80060fe:	d04e      	beq.n	800619e <_dtoa_r+0xb2e>
 8006100:	3201      	adds	r2, #1
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	e501      	b.n	8005b0a <_dtoa_r+0x49a>
 8006106:	2a00      	cmp	r2, #0
 8006108:	dd03      	ble.n	8006112 <_dtoa_r+0xaa2>
 800610a:	2b39      	cmp	r3, #57	@ 0x39
 800610c:	d0ee      	beq.n	80060ec <_dtoa_r+0xa7c>
 800610e:	3301      	adds	r3, #1
 8006110:	e7c9      	b.n	80060a6 <_dtoa_r+0xa36>
 8006112:	9a00      	ldr	r2, [sp, #0]
 8006114:	9908      	ldr	r1, [sp, #32]
 8006116:	f802 3c01 	strb.w	r3, [r2, #-1]
 800611a:	428a      	cmp	r2, r1
 800611c:	d028      	beq.n	8006170 <_dtoa_r+0xb00>
 800611e:	9902      	ldr	r1, [sp, #8]
 8006120:	2300      	movs	r3, #0
 8006122:	220a      	movs	r2, #10
 8006124:	4648      	mov	r0, r9
 8006126:	f000 fb8f 	bl	8006848 <__multadd>
 800612a:	42af      	cmp	r7, r5
 800612c:	9002      	str	r0, [sp, #8]
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	f04f 020a 	mov.w	r2, #10
 8006136:	4639      	mov	r1, r7
 8006138:	4648      	mov	r0, r9
 800613a:	d107      	bne.n	800614c <_dtoa_r+0xadc>
 800613c:	f000 fb84 	bl	8006848 <__multadd>
 8006140:	4607      	mov	r7, r0
 8006142:	4605      	mov	r5, r0
 8006144:	9b00      	ldr	r3, [sp, #0]
 8006146:	3301      	adds	r3, #1
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	e777      	b.n	800603c <_dtoa_r+0x9cc>
 800614c:	f000 fb7c 	bl	8006848 <__multadd>
 8006150:	4629      	mov	r1, r5
 8006152:	4607      	mov	r7, r0
 8006154:	2300      	movs	r3, #0
 8006156:	220a      	movs	r2, #10
 8006158:	4648      	mov	r0, r9
 800615a:	f000 fb75 	bl	8006848 <__multadd>
 800615e:	4605      	mov	r5, r0
 8006160:	e7f0      	b.n	8006144 <_dtoa_r+0xad4>
 8006162:	f1bb 0f00 	cmp.w	fp, #0
 8006166:	bfcc      	ite	gt
 8006168:	465e      	movgt	r6, fp
 800616a:	2601      	movle	r6, #1
 800616c:	4456      	add	r6, sl
 800616e:	2700      	movs	r7, #0
 8006170:	9902      	ldr	r1, [sp, #8]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	2201      	movs	r2, #1
 8006176:	4648      	mov	r0, r9
 8006178:	f000 fd0a 	bl	8006b90 <__lshift>
 800617c:	4621      	mov	r1, r4
 800617e:	9002      	str	r0, [sp, #8]
 8006180:	f000 fd72 	bl	8006c68 <__mcmp>
 8006184:	2800      	cmp	r0, #0
 8006186:	dcb4      	bgt.n	80060f2 <_dtoa_r+0xa82>
 8006188:	d102      	bne.n	8006190 <_dtoa_r+0xb20>
 800618a:	9b00      	ldr	r3, [sp, #0]
 800618c:	07db      	lsls	r3, r3, #31
 800618e:	d4b0      	bmi.n	80060f2 <_dtoa_r+0xa82>
 8006190:	4633      	mov	r3, r6
 8006192:	461e      	mov	r6, r3
 8006194:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006198:	2a30      	cmp	r2, #48	@ 0x30
 800619a:	d0fa      	beq.n	8006192 <_dtoa_r+0xb22>
 800619c:	e4b5      	b.n	8005b0a <_dtoa_r+0x49a>
 800619e:	459a      	cmp	sl, r3
 80061a0:	d1a8      	bne.n	80060f4 <_dtoa_r+0xa84>
 80061a2:	2331      	movs	r3, #49	@ 0x31
 80061a4:	f108 0801 	add.w	r8, r8, #1
 80061a8:	f88a 3000 	strb.w	r3, [sl]
 80061ac:	e4ad      	b.n	8005b0a <_dtoa_r+0x49a>
 80061ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800620c <_dtoa_r+0xb9c>
 80061b4:	b11b      	cbz	r3, 80061be <_dtoa_r+0xb4e>
 80061b6:	f10a 0308 	add.w	r3, sl, #8
 80061ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	4650      	mov	r0, sl
 80061c0:	b017      	add	sp, #92	@ 0x5c
 80061c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c6:	9b07      	ldr	r3, [sp, #28]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	f77f ae2e 	ble.w	8005e2a <_dtoa_r+0x7ba>
 80061ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061d0:	9308      	str	r3, [sp, #32]
 80061d2:	2001      	movs	r0, #1
 80061d4:	e64d      	b.n	8005e72 <_dtoa_r+0x802>
 80061d6:	f1bb 0f00 	cmp.w	fp, #0
 80061da:	f77f aed9 	ble.w	8005f90 <_dtoa_r+0x920>
 80061de:	4656      	mov	r6, sl
 80061e0:	9802      	ldr	r0, [sp, #8]
 80061e2:	4621      	mov	r1, r4
 80061e4:	f7ff f9ba 	bl	800555c <quorem>
 80061e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80061ec:	f806 3b01 	strb.w	r3, [r6], #1
 80061f0:	eba6 020a 	sub.w	r2, r6, sl
 80061f4:	4593      	cmp	fp, r2
 80061f6:	ddb4      	ble.n	8006162 <_dtoa_r+0xaf2>
 80061f8:	9902      	ldr	r1, [sp, #8]
 80061fa:	2300      	movs	r3, #0
 80061fc:	220a      	movs	r2, #10
 80061fe:	4648      	mov	r0, r9
 8006200:	f000 fb22 	bl	8006848 <__multadd>
 8006204:	9002      	str	r0, [sp, #8]
 8006206:	e7eb      	b.n	80061e0 <_dtoa_r+0xb70>
 8006208:	080078a4 	.word	0x080078a4
 800620c:	08007828 	.word	0x08007828

08006210 <__ssputs_r>:
 8006210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006214:	688e      	ldr	r6, [r1, #8]
 8006216:	461f      	mov	r7, r3
 8006218:	42be      	cmp	r6, r7
 800621a:	680b      	ldr	r3, [r1, #0]
 800621c:	4682      	mov	sl, r0
 800621e:	460c      	mov	r4, r1
 8006220:	4690      	mov	r8, r2
 8006222:	d82d      	bhi.n	8006280 <__ssputs_r+0x70>
 8006224:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006228:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800622c:	d026      	beq.n	800627c <__ssputs_r+0x6c>
 800622e:	6965      	ldr	r5, [r4, #20]
 8006230:	6909      	ldr	r1, [r1, #16]
 8006232:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006236:	eba3 0901 	sub.w	r9, r3, r1
 800623a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800623e:	1c7b      	adds	r3, r7, #1
 8006240:	444b      	add	r3, r9
 8006242:	106d      	asrs	r5, r5, #1
 8006244:	429d      	cmp	r5, r3
 8006246:	bf38      	it	cc
 8006248:	461d      	movcc	r5, r3
 800624a:	0553      	lsls	r3, r2, #21
 800624c:	d527      	bpl.n	800629e <__ssputs_r+0x8e>
 800624e:	4629      	mov	r1, r5
 8006250:	f000 f960 	bl	8006514 <_malloc_r>
 8006254:	4606      	mov	r6, r0
 8006256:	b360      	cbz	r0, 80062b2 <__ssputs_r+0xa2>
 8006258:	6921      	ldr	r1, [r4, #16]
 800625a:	464a      	mov	r2, r9
 800625c:	f000 feee 	bl	800703c <memcpy>
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800626a:	81a3      	strh	r3, [r4, #12]
 800626c:	6126      	str	r6, [r4, #16]
 800626e:	6165      	str	r5, [r4, #20]
 8006270:	444e      	add	r6, r9
 8006272:	eba5 0509 	sub.w	r5, r5, r9
 8006276:	6026      	str	r6, [r4, #0]
 8006278:	60a5      	str	r5, [r4, #8]
 800627a:	463e      	mov	r6, r7
 800627c:	42be      	cmp	r6, r7
 800627e:	d900      	bls.n	8006282 <__ssputs_r+0x72>
 8006280:	463e      	mov	r6, r7
 8006282:	6820      	ldr	r0, [r4, #0]
 8006284:	4632      	mov	r2, r6
 8006286:	4641      	mov	r1, r8
 8006288:	f000 fe67 	bl	8006f5a <memmove>
 800628c:	68a3      	ldr	r3, [r4, #8]
 800628e:	1b9b      	subs	r3, r3, r6
 8006290:	60a3      	str	r3, [r4, #8]
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	4433      	add	r3, r6
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	2000      	movs	r0, #0
 800629a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629e:	462a      	mov	r2, r5
 80062a0:	f000 fe2d 	bl	8006efe <_realloc_r>
 80062a4:	4606      	mov	r6, r0
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d1e0      	bne.n	800626c <__ssputs_r+0x5c>
 80062aa:	6921      	ldr	r1, [r4, #16]
 80062ac:	4650      	mov	r0, sl
 80062ae:	f000 ff05 	bl	80070bc <_free_r>
 80062b2:	230c      	movs	r3, #12
 80062b4:	f8ca 3000 	str.w	r3, [sl]
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062be:	81a3      	strh	r3, [r4, #12]
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062c4:	e7e9      	b.n	800629a <__ssputs_r+0x8a>
	...

080062c8 <_svfiprintf_r>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	4698      	mov	r8, r3
 80062ce:	898b      	ldrh	r3, [r1, #12]
 80062d0:	061b      	lsls	r3, r3, #24
 80062d2:	b09d      	sub	sp, #116	@ 0x74
 80062d4:	4607      	mov	r7, r0
 80062d6:	460d      	mov	r5, r1
 80062d8:	4614      	mov	r4, r2
 80062da:	d510      	bpl.n	80062fe <_svfiprintf_r+0x36>
 80062dc:	690b      	ldr	r3, [r1, #16]
 80062de:	b973      	cbnz	r3, 80062fe <_svfiprintf_r+0x36>
 80062e0:	2140      	movs	r1, #64	@ 0x40
 80062e2:	f000 f917 	bl	8006514 <_malloc_r>
 80062e6:	6028      	str	r0, [r5, #0]
 80062e8:	6128      	str	r0, [r5, #16]
 80062ea:	b930      	cbnz	r0, 80062fa <_svfiprintf_r+0x32>
 80062ec:	230c      	movs	r3, #12
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062f4:	b01d      	add	sp, #116	@ 0x74
 80062f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fa:	2340      	movs	r3, #64	@ 0x40
 80062fc:	616b      	str	r3, [r5, #20]
 80062fe:	2300      	movs	r3, #0
 8006300:	9309      	str	r3, [sp, #36]	@ 0x24
 8006302:	2320      	movs	r3, #32
 8006304:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006308:	f8cd 800c 	str.w	r8, [sp, #12]
 800630c:	2330      	movs	r3, #48	@ 0x30
 800630e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80064ac <_svfiprintf_r+0x1e4>
 8006312:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006316:	f04f 0901 	mov.w	r9, #1
 800631a:	4623      	mov	r3, r4
 800631c:	469a      	mov	sl, r3
 800631e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006322:	b10a      	cbz	r2, 8006328 <_svfiprintf_r+0x60>
 8006324:	2a25      	cmp	r2, #37	@ 0x25
 8006326:	d1f9      	bne.n	800631c <_svfiprintf_r+0x54>
 8006328:	ebba 0b04 	subs.w	fp, sl, r4
 800632c:	d00b      	beq.n	8006346 <_svfiprintf_r+0x7e>
 800632e:	465b      	mov	r3, fp
 8006330:	4622      	mov	r2, r4
 8006332:	4629      	mov	r1, r5
 8006334:	4638      	mov	r0, r7
 8006336:	f7ff ff6b 	bl	8006210 <__ssputs_r>
 800633a:	3001      	adds	r0, #1
 800633c:	f000 80a7 	beq.w	800648e <_svfiprintf_r+0x1c6>
 8006340:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006342:	445a      	add	r2, fp
 8006344:	9209      	str	r2, [sp, #36]	@ 0x24
 8006346:	f89a 3000 	ldrb.w	r3, [sl]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 809f 	beq.w	800648e <_svfiprintf_r+0x1c6>
 8006350:	2300      	movs	r3, #0
 8006352:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800635a:	f10a 0a01 	add.w	sl, sl, #1
 800635e:	9304      	str	r3, [sp, #16]
 8006360:	9307      	str	r3, [sp, #28]
 8006362:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006366:	931a      	str	r3, [sp, #104]	@ 0x68
 8006368:	4654      	mov	r4, sl
 800636a:	2205      	movs	r2, #5
 800636c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006370:	484e      	ldr	r0, [pc, #312]	@ (80064ac <_svfiprintf_r+0x1e4>)
 8006372:	f7f9 ff35 	bl	80001e0 <memchr>
 8006376:	9a04      	ldr	r2, [sp, #16]
 8006378:	b9d8      	cbnz	r0, 80063b2 <_svfiprintf_r+0xea>
 800637a:	06d0      	lsls	r0, r2, #27
 800637c:	bf44      	itt	mi
 800637e:	2320      	movmi	r3, #32
 8006380:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006384:	0711      	lsls	r1, r2, #28
 8006386:	bf44      	itt	mi
 8006388:	232b      	movmi	r3, #43	@ 0x2b
 800638a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800638e:	f89a 3000 	ldrb.w	r3, [sl]
 8006392:	2b2a      	cmp	r3, #42	@ 0x2a
 8006394:	d015      	beq.n	80063c2 <_svfiprintf_r+0xfa>
 8006396:	9a07      	ldr	r2, [sp, #28]
 8006398:	4654      	mov	r4, sl
 800639a:	2000      	movs	r0, #0
 800639c:	f04f 0c0a 	mov.w	ip, #10
 80063a0:	4621      	mov	r1, r4
 80063a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a6:	3b30      	subs	r3, #48	@ 0x30
 80063a8:	2b09      	cmp	r3, #9
 80063aa:	d94b      	bls.n	8006444 <_svfiprintf_r+0x17c>
 80063ac:	b1b0      	cbz	r0, 80063dc <_svfiprintf_r+0x114>
 80063ae:	9207      	str	r2, [sp, #28]
 80063b0:	e014      	b.n	80063dc <_svfiprintf_r+0x114>
 80063b2:	eba0 0308 	sub.w	r3, r0, r8
 80063b6:	fa09 f303 	lsl.w	r3, r9, r3
 80063ba:	4313      	orrs	r3, r2
 80063bc:	9304      	str	r3, [sp, #16]
 80063be:	46a2      	mov	sl, r4
 80063c0:	e7d2      	b.n	8006368 <_svfiprintf_r+0xa0>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	1d19      	adds	r1, r3, #4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	9103      	str	r1, [sp, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bfbb      	ittet	lt
 80063ce:	425b      	neglt	r3, r3
 80063d0:	f042 0202 	orrlt.w	r2, r2, #2
 80063d4:	9307      	strge	r3, [sp, #28]
 80063d6:	9307      	strlt	r3, [sp, #28]
 80063d8:	bfb8      	it	lt
 80063da:	9204      	strlt	r2, [sp, #16]
 80063dc:	7823      	ldrb	r3, [r4, #0]
 80063de:	2b2e      	cmp	r3, #46	@ 0x2e
 80063e0:	d10a      	bne.n	80063f8 <_svfiprintf_r+0x130>
 80063e2:	7863      	ldrb	r3, [r4, #1]
 80063e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e6:	d132      	bne.n	800644e <_svfiprintf_r+0x186>
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	1d1a      	adds	r2, r3, #4
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	9203      	str	r2, [sp, #12]
 80063f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063f4:	3402      	adds	r4, #2
 80063f6:	9305      	str	r3, [sp, #20]
 80063f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064bc <_svfiprintf_r+0x1f4>
 80063fc:	7821      	ldrb	r1, [r4, #0]
 80063fe:	2203      	movs	r2, #3
 8006400:	4650      	mov	r0, sl
 8006402:	f7f9 feed 	bl	80001e0 <memchr>
 8006406:	b138      	cbz	r0, 8006418 <_svfiprintf_r+0x150>
 8006408:	9b04      	ldr	r3, [sp, #16]
 800640a:	eba0 000a 	sub.w	r0, r0, sl
 800640e:	2240      	movs	r2, #64	@ 0x40
 8006410:	4082      	lsls	r2, r0
 8006412:	4313      	orrs	r3, r2
 8006414:	3401      	adds	r4, #1
 8006416:	9304      	str	r3, [sp, #16]
 8006418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800641c:	4824      	ldr	r0, [pc, #144]	@ (80064b0 <_svfiprintf_r+0x1e8>)
 800641e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006422:	2206      	movs	r2, #6
 8006424:	f7f9 fedc 	bl	80001e0 <memchr>
 8006428:	2800      	cmp	r0, #0
 800642a:	d036      	beq.n	800649a <_svfiprintf_r+0x1d2>
 800642c:	4b21      	ldr	r3, [pc, #132]	@ (80064b4 <_svfiprintf_r+0x1ec>)
 800642e:	bb1b      	cbnz	r3, 8006478 <_svfiprintf_r+0x1b0>
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	3307      	adds	r3, #7
 8006434:	f023 0307 	bic.w	r3, r3, #7
 8006438:	3308      	adds	r3, #8
 800643a:	9303      	str	r3, [sp, #12]
 800643c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800643e:	4433      	add	r3, r6
 8006440:	9309      	str	r3, [sp, #36]	@ 0x24
 8006442:	e76a      	b.n	800631a <_svfiprintf_r+0x52>
 8006444:	fb0c 3202 	mla	r2, ip, r2, r3
 8006448:	460c      	mov	r4, r1
 800644a:	2001      	movs	r0, #1
 800644c:	e7a8      	b.n	80063a0 <_svfiprintf_r+0xd8>
 800644e:	2300      	movs	r3, #0
 8006450:	3401      	adds	r4, #1
 8006452:	9305      	str	r3, [sp, #20]
 8006454:	4619      	mov	r1, r3
 8006456:	f04f 0c0a 	mov.w	ip, #10
 800645a:	4620      	mov	r0, r4
 800645c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006460:	3a30      	subs	r2, #48	@ 0x30
 8006462:	2a09      	cmp	r2, #9
 8006464:	d903      	bls.n	800646e <_svfiprintf_r+0x1a6>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0c6      	beq.n	80063f8 <_svfiprintf_r+0x130>
 800646a:	9105      	str	r1, [sp, #20]
 800646c:	e7c4      	b.n	80063f8 <_svfiprintf_r+0x130>
 800646e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006472:	4604      	mov	r4, r0
 8006474:	2301      	movs	r3, #1
 8006476:	e7f0      	b.n	800645a <_svfiprintf_r+0x192>
 8006478:	ab03      	add	r3, sp, #12
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	462a      	mov	r2, r5
 800647e:	4b0e      	ldr	r3, [pc, #56]	@ (80064b8 <_svfiprintf_r+0x1f0>)
 8006480:	a904      	add	r1, sp, #16
 8006482:	4638      	mov	r0, r7
 8006484:	f7fe fb96 	bl	8004bb4 <_printf_float>
 8006488:	1c42      	adds	r2, r0, #1
 800648a:	4606      	mov	r6, r0
 800648c:	d1d6      	bne.n	800643c <_svfiprintf_r+0x174>
 800648e:	89ab      	ldrh	r3, [r5, #12]
 8006490:	065b      	lsls	r3, r3, #25
 8006492:	f53f af2d 	bmi.w	80062f0 <_svfiprintf_r+0x28>
 8006496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006498:	e72c      	b.n	80062f4 <_svfiprintf_r+0x2c>
 800649a:	ab03      	add	r3, sp, #12
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	462a      	mov	r2, r5
 80064a0:	4b05      	ldr	r3, [pc, #20]	@ (80064b8 <_svfiprintf_r+0x1f0>)
 80064a2:	a904      	add	r1, sp, #16
 80064a4:	4638      	mov	r0, r7
 80064a6:	f7fe fe1d 	bl	80050e4 <_printf_i>
 80064aa:	e7ed      	b.n	8006488 <_svfiprintf_r+0x1c0>
 80064ac:	080078b5 	.word	0x080078b5
 80064b0:	080078bf 	.word	0x080078bf
 80064b4:	08004bb5 	.word	0x08004bb5
 80064b8:	08006211 	.word	0x08006211
 80064bc:	080078bb 	.word	0x080078bb

080064c0 <malloc>:
 80064c0:	4b02      	ldr	r3, [pc, #8]	@ (80064cc <malloc+0xc>)
 80064c2:	4601      	mov	r1, r0
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	f000 b825 	b.w	8006514 <_malloc_r>
 80064ca:	bf00      	nop
 80064cc:	20000018 	.word	0x20000018

080064d0 <sbrk_aligned>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006510 <sbrk_aligned+0x40>)
 80064d4:	460c      	mov	r4, r1
 80064d6:	6831      	ldr	r1, [r6, #0]
 80064d8:	4605      	mov	r5, r0
 80064da:	b911      	cbnz	r1, 80064e2 <sbrk_aligned+0x12>
 80064dc:	f000 fd7c 	bl	8006fd8 <_sbrk_r>
 80064e0:	6030      	str	r0, [r6, #0]
 80064e2:	4621      	mov	r1, r4
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 fd77 	bl	8006fd8 <_sbrk_r>
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	d103      	bne.n	80064f6 <sbrk_aligned+0x26>
 80064ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80064f2:	4620      	mov	r0, r4
 80064f4:	bd70      	pop	{r4, r5, r6, pc}
 80064f6:	1cc4      	adds	r4, r0, #3
 80064f8:	f024 0403 	bic.w	r4, r4, #3
 80064fc:	42a0      	cmp	r0, r4
 80064fe:	d0f8      	beq.n	80064f2 <sbrk_aligned+0x22>
 8006500:	1a21      	subs	r1, r4, r0
 8006502:	4628      	mov	r0, r5
 8006504:	f000 fd68 	bl	8006fd8 <_sbrk_r>
 8006508:	3001      	adds	r0, #1
 800650a:	d1f2      	bne.n	80064f2 <sbrk_aligned+0x22>
 800650c:	e7ef      	b.n	80064ee <sbrk_aligned+0x1e>
 800650e:	bf00      	nop
 8006510:	20000424 	.word	0x20000424

08006514 <_malloc_r>:
 8006514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006518:	1ccd      	adds	r5, r1, #3
 800651a:	f025 0503 	bic.w	r5, r5, #3
 800651e:	3508      	adds	r5, #8
 8006520:	2d0c      	cmp	r5, #12
 8006522:	bf38      	it	cc
 8006524:	250c      	movcc	r5, #12
 8006526:	2d00      	cmp	r5, #0
 8006528:	4606      	mov	r6, r0
 800652a:	db01      	blt.n	8006530 <_malloc_r+0x1c>
 800652c:	42a9      	cmp	r1, r5
 800652e:	d904      	bls.n	800653a <_malloc_r+0x26>
 8006530:	230c      	movs	r3, #12
 8006532:	6033      	str	r3, [r6, #0]
 8006534:	2000      	movs	r0, #0
 8006536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800653a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006610 <_malloc_r+0xfc>
 800653e:	f000 f915 	bl	800676c <__malloc_lock>
 8006542:	f8d8 3000 	ldr.w	r3, [r8]
 8006546:	461c      	mov	r4, r3
 8006548:	bb44      	cbnz	r4, 800659c <_malloc_r+0x88>
 800654a:	4629      	mov	r1, r5
 800654c:	4630      	mov	r0, r6
 800654e:	f7ff ffbf 	bl	80064d0 <sbrk_aligned>
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	4604      	mov	r4, r0
 8006556:	d158      	bne.n	800660a <_malloc_r+0xf6>
 8006558:	f8d8 4000 	ldr.w	r4, [r8]
 800655c:	4627      	mov	r7, r4
 800655e:	2f00      	cmp	r7, #0
 8006560:	d143      	bne.n	80065ea <_malloc_r+0xd6>
 8006562:	2c00      	cmp	r4, #0
 8006564:	d04b      	beq.n	80065fe <_malloc_r+0xea>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	4639      	mov	r1, r7
 800656a:	4630      	mov	r0, r6
 800656c:	eb04 0903 	add.w	r9, r4, r3
 8006570:	f000 fd32 	bl	8006fd8 <_sbrk_r>
 8006574:	4581      	cmp	r9, r0
 8006576:	d142      	bne.n	80065fe <_malloc_r+0xea>
 8006578:	6821      	ldr	r1, [r4, #0]
 800657a:	1a6d      	subs	r5, r5, r1
 800657c:	4629      	mov	r1, r5
 800657e:	4630      	mov	r0, r6
 8006580:	f7ff ffa6 	bl	80064d0 <sbrk_aligned>
 8006584:	3001      	adds	r0, #1
 8006586:	d03a      	beq.n	80065fe <_malloc_r+0xea>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	442b      	add	r3, r5
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	f8d8 3000 	ldr.w	r3, [r8]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	bb62      	cbnz	r2, 80065f0 <_malloc_r+0xdc>
 8006596:	f8c8 7000 	str.w	r7, [r8]
 800659a:	e00f      	b.n	80065bc <_malloc_r+0xa8>
 800659c:	6822      	ldr	r2, [r4, #0]
 800659e:	1b52      	subs	r2, r2, r5
 80065a0:	d420      	bmi.n	80065e4 <_malloc_r+0xd0>
 80065a2:	2a0b      	cmp	r2, #11
 80065a4:	d917      	bls.n	80065d6 <_malloc_r+0xc2>
 80065a6:	1961      	adds	r1, r4, r5
 80065a8:	42a3      	cmp	r3, r4
 80065aa:	6025      	str	r5, [r4, #0]
 80065ac:	bf18      	it	ne
 80065ae:	6059      	strne	r1, [r3, #4]
 80065b0:	6863      	ldr	r3, [r4, #4]
 80065b2:	bf08      	it	eq
 80065b4:	f8c8 1000 	streq.w	r1, [r8]
 80065b8:	5162      	str	r2, [r4, r5]
 80065ba:	604b      	str	r3, [r1, #4]
 80065bc:	4630      	mov	r0, r6
 80065be:	f000 f8db 	bl	8006778 <__malloc_unlock>
 80065c2:	f104 000b 	add.w	r0, r4, #11
 80065c6:	1d23      	adds	r3, r4, #4
 80065c8:	f020 0007 	bic.w	r0, r0, #7
 80065cc:	1ac2      	subs	r2, r0, r3
 80065ce:	bf1c      	itt	ne
 80065d0:	1a1b      	subne	r3, r3, r0
 80065d2:	50a3      	strne	r3, [r4, r2]
 80065d4:	e7af      	b.n	8006536 <_malloc_r+0x22>
 80065d6:	6862      	ldr	r2, [r4, #4]
 80065d8:	42a3      	cmp	r3, r4
 80065da:	bf0c      	ite	eq
 80065dc:	f8c8 2000 	streq.w	r2, [r8]
 80065e0:	605a      	strne	r2, [r3, #4]
 80065e2:	e7eb      	b.n	80065bc <_malloc_r+0xa8>
 80065e4:	4623      	mov	r3, r4
 80065e6:	6864      	ldr	r4, [r4, #4]
 80065e8:	e7ae      	b.n	8006548 <_malloc_r+0x34>
 80065ea:	463c      	mov	r4, r7
 80065ec:	687f      	ldr	r7, [r7, #4]
 80065ee:	e7b6      	b.n	800655e <_malloc_r+0x4a>
 80065f0:	461a      	mov	r2, r3
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	d1fb      	bne.n	80065f0 <_malloc_r+0xdc>
 80065f8:	2300      	movs	r3, #0
 80065fa:	6053      	str	r3, [r2, #4]
 80065fc:	e7de      	b.n	80065bc <_malloc_r+0xa8>
 80065fe:	230c      	movs	r3, #12
 8006600:	6033      	str	r3, [r6, #0]
 8006602:	4630      	mov	r0, r6
 8006604:	f000 f8b8 	bl	8006778 <__malloc_unlock>
 8006608:	e794      	b.n	8006534 <_malloc_r+0x20>
 800660a:	6005      	str	r5, [r0, #0]
 800660c:	e7d6      	b.n	80065bc <_malloc_r+0xa8>
 800660e:	bf00      	nop
 8006610:	20000428 	.word	0x20000428

08006614 <__sflush_r>:
 8006614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661c:	0716      	lsls	r6, r2, #28
 800661e:	4605      	mov	r5, r0
 8006620:	460c      	mov	r4, r1
 8006622:	d454      	bmi.n	80066ce <__sflush_r+0xba>
 8006624:	684b      	ldr	r3, [r1, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	dc02      	bgt.n	8006630 <__sflush_r+0x1c>
 800662a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800662c:	2b00      	cmp	r3, #0
 800662e:	dd48      	ble.n	80066c2 <__sflush_r+0xae>
 8006630:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006632:	2e00      	cmp	r6, #0
 8006634:	d045      	beq.n	80066c2 <__sflush_r+0xae>
 8006636:	2300      	movs	r3, #0
 8006638:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800663c:	682f      	ldr	r7, [r5, #0]
 800663e:	6a21      	ldr	r1, [r4, #32]
 8006640:	602b      	str	r3, [r5, #0]
 8006642:	d030      	beq.n	80066a6 <__sflush_r+0x92>
 8006644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	0759      	lsls	r1, r3, #29
 800664a:	d505      	bpl.n	8006658 <__sflush_r+0x44>
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006652:	b10b      	cbz	r3, 8006658 <__sflush_r+0x44>
 8006654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006656:	1ad2      	subs	r2, r2, r3
 8006658:	2300      	movs	r3, #0
 800665a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800665c:	6a21      	ldr	r1, [r4, #32]
 800665e:	4628      	mov	r0, r5
 8006660:	47b0      	blx	r6
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	d106      	bne.n	8006676 <__sflush_r+0x62>
 8006668:	6829      	ldr	r1, [r5, #0]
 800666a:	291d      	cmp	r1, #29
 800666c:	d82b      	bhi.n	80066c6 <__sflush_r+0xb2>
 800666e:	4a2a      	ldr	r2, [pc, #168]	@ (8006718 <__sflush_r+0x104>)
 8006670:	40ca      	lsrs	r2, r1
 8006672:	07d6      	lsls	r6, r2, #31
 8006674:	d527      	bpl.n	80066c6 <__sflush_r+0xb2>
 8006676:	2200      	movs	r2, #0
 8006678:	6062      	str	r2, [r4, #4]
 800667a:	04d9      	lsls	r1, r3, #19
 800667c:	6922      	ldr	r2, [r4, #16]
 800667e:	6022      	str	r2, [r4, #0]
 8006680:	d504      	bpl.n	800668c <__sflush_r+0x78>
 8006682:	1c42      	adds	r2, r0, #1
 8006684:	d101      	bne.n	800668a <__sflush_r+0x76>
 8006686:	682b      	ldr	r3, [r5, #0]
 8006688:	b903      	cbnz	r3, 800668c <__sflush_r+0x78>
 800668a:	6560      	str	r0, [r4, #84]	@ 0x54
 800668c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800668e:	602f      	str	r7, [r5, #0]
 8006690:	b1b9      	cbz	r1, 80066c2 <__sflush_r+0xae>
 8006692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006696:	4299      	cmp	r1, r3
 8006698:	d002      	beq.n	80066a0 <__sflush_r+0x8c>
 800669a:	4628      	mov	r0, r5
 800669c:	f000 fd0e 	bl	80070bc <_free_r>
 80066a0:	2300      	movs	r3, #0
 80066a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80066a4:	e00d      	b.n	80066c2 <__sflush_r+0xae>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b0      	blx	r6
 80066ac:	4602      	mov	r2, r0
 80066ae:	1c50      	adds	r0, r2, #1
 80066b0:	d1c9      	bne.n	8006646 <__sflush_r+0x32>
 80066b2:	682b      	ldr	r3, [r5, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0c6      	beq.n	8006646 <__sflush_r+0x32>
 80066b8:	2b1d      	cmp	r3, #29
 80066ba:	d001      	beq.n	80066c0 <__sflush_r+0xac>
 80066bc:	2b16      	cmp	r3, #22
 80066be:	d11e      	bne.n	80066fe <__sflush_r+0xea>
 80066c0:	602f      	str	r7, [r5, #0]
 80066c2:	2000      	movs	r0, #0
 80066c4:	e022      	b.n	800670c <__sflush_r+0xf8>
 80066c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ca:	b21b      	sxth	r3, r3
 80066cc:	e01b      	b.n	8006706 <__sflush_r+0xf2>
 80066ce:	690f      	ldr	r7, [r1, #16]
 80066d0:	2f00      	cmp	r7, #0
 80066d2:	d0f6      	beq.n	80066c2 <__sflush_r+0xae>
 80066d4:	0793      	lsls	r3, r2, #30
 80066d6:	680e      	ldr	r6, [r1, #0]
 80066d8:	bf08      	it	eq
 80066da:	694b      	ldreq	r3, [r1, #20]
 80066dc:	600f      	str	r7, [r1, #0]
 80066de:	bf18      	it	ne
 80066e0:	2300      	movne	r3, #0
 80066e2:	eba6 0807 	sub.w	r8, r6, r7
 80066e6:	608b      	str	r3, [r1, #8]
 80066e8:	f1b8 0f00 	cmp.w	r8, #0
 80066ec:	dde9      	ble.n	80066c2 <__sflush_r+0xae>
 80066ee:	6a21      	ldr	r1, [r4, #32]
 80066f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066f2:	4643      	mov	r3, r8
 80066f4:	463a      	mov	r2, r7
 80066f6:	4628      	mov	r0, r5
 80066f8:	47b0      	blx	r6
 80066fa:	2800      	cmp	r0, #0
 80066fc:	dc08      	bgt.n	8006710 <__sflush_r+0xfc>
 80066fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006706:	81a3      	strh	r3, [r4, #12]
 8006708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800670c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006710:	4407      	add	r7, r0
 8006712:	eba8 0800 	sub.w	r8, r8, r0
 8006716:	e7e7      	b.n	80066e8 <__sflush_r+0xd4>
 8006718:	20400001 	.word	0x20400001

0800671c <_fflush_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	690b      	ldr	r3, [r1, #16]
 8006720:	4605      	mov	r5, r0
 8006722:	460c      	mov	r4, r1
 8006724:	b913      	cbnz	r3, 800672c <_fflush_r+0x10>
 8006726:	2500      	movs	r5, #0
 8006728:	4628      	mov	r0, r5
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	b118      	cbz	r0, 8006736 <_fflush_r+0x1a>
 800672e:	6a03      	ldr	r3, [r0, #32]
 8006730:	b90b      	cbnz	r3, 8006736 <_fflush_r+0x1a>
 8006732:	f7fe fea3 	bl	800547c <__sinit>
 8006736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f3      	beq.n	8006726 <_fflush_r+0xa>
 800673e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006740:	07d0      	lsls	r0, r2, #31
 8006742:	d404      	bmi.n	800674e <_fflush_r+0x32>
 8006744:	0599      	lsls	r1, r3, #22
 8006746:	d402      	bmi.n	800674e <_fflush_r+0x32>
 8006748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800674a:	f7fe ff00 	bl	800554e <__retarget_lock_acquire_recursive>
 800674e:	4628      	mov	r0, r5
 8006750:	4621      	mov	r1, r4
 8006752:	f7ff ff5f 	bl	8006614 <__sflush_r>
 8006756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006758:	07da      	lsls	r2, r3, #31
 800675a:	4605      	mov	r5, r0
 800675c:	d4e4      	bmi.n	8006728 <_fflush_r+0xc>
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	059b      	lsls	r3, r3, #22
 8006762:	d4e1      	bmi.n	8006728 <_fflush_r+0xc>
 8006764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006766:	f7fe fef3 	bl	8005550 <__retarget_lock_release_recursive>
 800676a:	e7dd      	b.n	8006728 <_fflush_r+0xc>

0800676c <__malloc_lock>:
 800676c:	4801      	ldr	r0, [pc, #4]	@ (8006774 <__malloc_lock+0x8>)
 800676e:	f7fe beee 	b.w	800554e <__retarget_lock_acquire_recursive>
 8006772:	bf00      	nop
 8006774:	20000420 	.word	0x20000420

08006778 <__malloc_unlock>:
 8006778:	4801      	ldr	r0, [pc, #4]	@ (8006780 <__malloc_unlock+0x8>)
 800677a:	f7fe bee9 	b.w	8005550 <__retarget_lock_release_recursive>
 800677e:	bf00      	nop
 8006780:	20000420 	.word	0x20000420

08006784 <_Balloc>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	69c6      	ldr	r6, [r0, #28]
 8006788:	4604      	mov	r4, r0
 800678a:	460d      	mov	r5, r1
 800678c:	b976      	cbnz	r6, 80067ac <_Balloc+0x28>
 800678e:	2010      	movs	r0, #16
 8006790:	f7ff fe96 	bl	80064c0 <malloc>
 8006794:	4602      	mov	r2, r0
 8006796:	61e0      	str	r0, [r4, #28]
 8006798:	b920      	cbnz	r0, 80067a4 <_Balloc+0x20>
 800679a:	4b18      	ldr	r3, [pc, #96]	@ (80067fc <_Balloc+0x78>)
 800679c:	4818      	ldr	r0, [pc, #96]	@ (8006800 <_Balloc+0x7c>)
 800679e:	216b      	movs	r1, #107	@ 0x6b
 80067a0:	f000 fc5a 	bl	8007058 <__assert_func>
 80067a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067a8:	6006      	str	r6, [r0, #0]
 80067aa:	60c6      	str	r6, [r0, #12]
 80067ac:	69e6      	ldr	r6, [r4, #28]
 80067ae:	68f3      	ldr	r3, [r6, #12]
 80067b0:	b183      	cbz	r3, 80067d4 <_Balloc+0x50>
 80067b2:	69e3      	ldr	r3, [r4, #28]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067ba:	b9b8      	cbnz	r0, 80067ec <_Balloc+0x68>
 80067bc:	2101      	movs	r1, #1
 80067be:	fa01 f605 	lsl.w	r6, r1, r5
 80067c2:	1d72      	adds	r2, r6, #5
 80067c4:	0092      	lsls	r2, r2, #2
 80067c6:	4620      	mov	r0, r4
 80067c8:	f000 fc64 	bl	8007094 <_calloc_r>
 80067cc:	b160      	cbz	r0, 80067e8 <_Balloc+0x64>
 80067ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067d2:	e00e      	b.n	80067f2 <_Balloc+0x6e>
 80067d4:	2221      	movs	r2, #33	@ 0x21
 80067d6:	2104      	movs	r1, #4
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 fc5b 	bl	8007094 <_calloc_r>
 80067de:	69e3      	ldr	r3, [r4, #28]
 80067e0:	60f0      	str	r0, [r6, #12]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e4      	bne.n	80067b2 <_Balloc+0x2e>
 80067e8:	2000      	movs	r0, #0
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
 80067ec:	6802      	ldr	r2, [r0, #0]
 80067ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067f2:	2300      	movs	r3, #0
 80067f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067f8:	e7f7      	b.n	80067ea <_Balloc+0x66>
 80067fa:	bf00      	nop
 80067fc:	08007835 	.word	0x08007835
 8006800:	080078c6 	.word	0x080078c6

08006804 <_Bfree>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	69c6      	ldr	r6, [r0, #28]
 8006808:	4605      	mov	r5, r0
 800680a:	460c      	mov	r4, r1
 800680c:	b976      	cbnz	r6, 800682c <_Bfree+0x28>
 800680e:	2010      	movs	r0, #16
 8006810:	f7ff fe56 	bl	80064c0 <malloc>
 8006814:	4602      	mov	r2, r0
 8006816:	61e8      	str	r0, [r5, #28]
 8006818:	b920      	cbnz	r0, 8006824 <_Bfree+0x20>
 800681a:	4b09      	ldr	r3, [pc, #36]	@ (8006840 <_Bfree+0x3c>)
 800681c:	4809      	ldr	r0, [pc, #36]	@ (8006844 <_Bfree+0x40>)
 800681e:	218f      	movs	r1, #143	@ 0x8f
 8006820:	f000 fc1a 	bl	8007058 <__assert_func>
 8006824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006828:	6006      	str	r6, [r0, #0]
 800682a:	60c6      	str	r6, [r0, #12]
 800682c:	b13c      	cbz	r4, 800683e <_Bfree+0x3a>
 800682e:	69eb      	ldr	r3, [r5, #28]
 8006830:	6862      	ldr	r2, [r4, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006838:	6021      	str	r1, [r4, #0]
 800683a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	08007835 	.word	0x08007835
 8006844:	080078c6 	.word	0x080078c6

08006848 <__multadd>:
 8006848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684c:	690d      	ldr	r5, [r1, #16]
 800684e:	4607      	mov	r7, r0
 8006850:	460c      	mov	r4, r1
 8006852:	461e      	mov	r6, r3
 8006854:	f101 0c14 	add.w	ip, r1, #20
 8006858:	2000      	movs	r0, #0
 800685a:	f8dc 3000 	ldr.w	r3, [ip]
 800685e:	b299      	uxth	r1, r3
 8006860:	fb02 6101 	mla	r1, r2, r1, r6
 8006864:	0c1e      	lsrs	r6, r3, #16
 8006866:	0c0b      	lsrs	r3, r1, #16
 8006868:	fb02 3306 	mla	r3, r2, r6, r3
 800686c:	b289      	uxth	r1, r1
 800686e:	3001      	adds	r0, #1
 8006870:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006874:	4285      	cmp	r5, r0
 8006876:	f84c 1b04 	str.w	r1, [ip], #4
 800687a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800687e:	dcec      	bgt.n	800685a <__multadd+0x12>
 8006880:	b30e      	cbz	r6, 80068c6 <__multadd+0x7e>
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	42ab      	cmp	r3, r5
 8006886:	dc19      	bgt.n	80068bc <__multadd+0x74>
 8006888:	6861      	ldr	r1, [r4, #4]
 800688a:	4638      	mov	r0, r7
 800688c:	3101      	adds	r1, #1
 800688e:	f7ff ff79 	bl	8006784 <_Balloc>
 8006892:	4680      	mov	r8, r0
 8006894:	b928      	cbnz	r0, 80068a2 <__multadd+0x5a>
 8006896:	4602      	mov	r2, r0
 8006898:	4b0c      	ldr	r3, [pc, #48]	@ (80068cc <__multadd+0x84>)
 800689a:	480d      	ldr	r0, [pc, #52]	@ (80068d0 <__multadd+0x88>)
 800689c:	21ba      	movs	r1, #186	@ 0xba
 800689e:	f000 fbdb 	bl	8007058 <__assert_func>
 80068a2:	6922      	ldr	r2, [r4, #16]
 80068a4:	3202      	adds	r2, #2
 80068a6:	f104 010c 	add.w	r1, r4, #12
 80068aa:	0092      	lsls	r2, r2, #2
 80068ac:	300c      	adds	r0, #12
 80068ae:	f000 fbc5 	bl	800703c <memcpy>
 80068b2:	4621      	mov	r1, r4
 80068b4:	4638      	mov	r0, r7
 80068b6:	f7ff ffa5 	bl	8006804 <_Bfree>
 80068ba:	4644      	mov	r4, r8
 80068bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068c0:	3501      	adds	r5, #1
 80068c2:	615e      	str	r6, [r3, #20]
 80068c4:	6125      	str	r5, [r4, #16]
 80068c6:	4620      	mov	r0, r4
 80068c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068cc:	080078a4 	.word	0x080078a4
 80068d0:	080078c6 	.word	0x080078c6

080068d4 <__hi0bits>:
 80068d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80068d8:	4603      	mov	r3, r0
 80068da:	bf36      	itet	cc
 80068dc:	0403      	lslcc	r3, r0, #16
 80068de:	2000      	movcs	r0, #0
 80068e0:	2010      	movcc	r0, #16
 80068e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068e6:	bf3c      	itt	cc
 80068e8:	021b      	lslcc	r3, r3, #8
 80068ea:	3008      	addcc	r0, #8
 80068ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068f0:	bf3c      	itt	cc
 80068f2:	011b      	lslcc	r3, r3, #4
 80068f4:	3004      	addcc	r0, #4
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fa:	bf3c      	itt	cc
 80068fc:	009b      	lslcc	r3, r3, #2
 80068fe:	3002      	addcc	r0, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	db05      	blt.n	8006910 <__hi0bits+0x3c>
 8006904:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006908:	f100 0001 	add.w	r0, r0, #1
 800690c:	bf08      	it	eq
 800690e:	2020      	moveq	r0, #32
 8006910:	4770      	bx	lr

08006912 <__lo0bits>:
 8006912:	6803      	ldr	r3, [r0, #0]
 8006914:	4602      	mov	r2, r0
 8006916:	f013 0007 	ands.w	r0, r3, #7
 800691a:	d00b      	beq.n	8006934 <__lo0bits+0x22>
 800691c:	07d9      	lsls	r1, r3, #31
 800691e:	d421      	bmi.n	8006964 <__lo0bits+0x52>
 8006920:	0798      	lsls	r0, r3, #30
 8006922:	bf49      	itett	mi
 8006924:	085b      	lsrmi	r3, r3, #1
 8006926:	089b      	lsrpl	r3, r3, #2
 8006928:	2001      	movmi	r0, #1
 800692a:	6013      	strmi	r3, [r2, #0]
 800692c:	bf5c      	itt	pl
 800692e:	6013      	strpl	r3, [r2, #0]
 8006930:	2002      	movpl	r0, #2
 8006932:	4770      	bx	lr
 8006934:	b299      	uxth	r1, r3
 8006936:	b909      	cbnz	r1, 800693c <__lo0bits+0x2a>
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	2010      	movs	r0, #16
 800693c:	b2d9      	uxtb	r1, r3
 800693e:	b909      	cbnz	r1, 8006944 <__lo0bits+0x32>
 8006940:	3008      	adds	r0, #8
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	0719      	lsls	r1, r3, #28
 8006946:	bf04      	itt	eq
 8006948:	091b      	lsreq	r3, r3, #4
 800694a:	3004      	addeq	r0, #4
 800694c:	0799      	lsls	r1, r3, #30
 800694e:	bf04      	itt	eq
 8006950:	089b      	lsreq	r3, r3, #2
 8006952:	3002      	addeq	r0, #2
 8006954:	07d9      	lsls	r1, r3, #31
 8006956:	d403      	bmi.n	8006960 <__lo0bits+0x4e>
 8006958:	085b      	lsrs	r3, r3, #1
 800695a:	f100 0001 	add.w	r0, r0, #1
 800695e:	d003      	beq.n	8006968 <__lo0bits+0x56>
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	4770      	bx	lr
 8006964:	2000      	movs	r0, #0
 8006966:	4770      	bx	lr
 8006968:	2020      	movs	r0, #32
 800696a:	4770      	bx	lr

0800696c <__i2b>:
 800696c:	b510      	push	{r4, lr}
 800696e:	460c      	mov	r4, r1
 8006970:	2101      	movs	r1, #1
 8006972:	f7ff ff07 	bl	8006784 <_Balloc>
 8006976:	4602      	mov	r2, r0
 8006978:	b928      	cbnz	r0, 8006986 <__i2b+0x1a>
 800697a:	4b05      	ldr	r3, [pc, #20]	@ (8006990 <__i2b+0x24>)
 800697c:	4805      	ldr	r0, [pc, #20]	@ (8006994 <__i2b+0x28>)
 800697e:	f240 1145 	movw	r1, #325	@ 0x145
 8006982:	f000 fb69 	bl	8007058 <__assert_func>
 8006986:	2301      	movs	r3, #1
 8006988:	6144      	str	r4, [r0, #20]
 800698a:	6103      	str	r3, [r0, #16]
 800698c:	bd10      	pop	{r4, pc}
 800698e:	bf00      	nop
 8006990:	080078a4 	.word	0x080078a4
 8006994:	080078c6 	.word	0x080078c6

08006998 <__multiply>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	4617      	mov	r7, r2
 800699e:	690a      	ldr	r2, [r1, #16]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	bfa8      	it	ge
 80069a6:	463b      	movge	r3, r7
 80069a8:	4689      	mov	r9, r1
 80069aa:	bfa4      	itt	ge
 80069ac:	460f      	movge	r7, r1
 80069ae:	4699      	movge	r9, r3
 80069b0:	693d      	ldr	r5, [r7, #16]
 80069b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	eb05 060a 	add.w	r6, r5, sl
 80069be:	42b3      	cmp	r3, r6
 80069c0:	b085      	sub	sp, #20
 80069c2:	bfb8      	it	lt
 80069c4:	3101      	addlt	r1, #1
 80069c6:	f7ff fedd 	bl	8006784 <_Balloc>
 80069ca:	b930      	cbnz	r0, 80069da <__multiply+0x42>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b41      	ldr	r3, [pc, #260]	@ (8006ad4 <__multiply+0x13c>)
 80069d0:	4841      	ldr	r0, [pc, #260]	@ (8006ad8 <__multiply+0x140>)
 80069d2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80069d6:	f000 fb3f 	bl	8007058 <__assert_func>
 80069da:	f100 0414 	add.w	r4, r0, #20
 80069de:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80069e2:	4623      	mov	r3, r4
 80069e4:	2200      	movs	r2, #0
 80069e6:	4573      	cmp	r3, lr
 80069e8:	d320      	bcc.n	8006a2c <__multiply+0x94>
 80069ea:	f107 0814 	add.w	r8, r7, #20
 80069ee:	f109 0114 	add.w	r1, r9, #20
 80069f2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80069f6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80069fa:	9302      	str	r3, [sp, #8]
 80069fc:	1beb      	subs	r3, r5, r7
 80069fe:	3b15      	subs	r3, #21
 8006a00:	f023 0303 	bic.w	r3, r3, #3
 8006a04:	3304      	adds	r3, #4
 8006a06:	3715      	adds	r7, #21
 8006a08:	42bd      	cmp	r5, r7
 8006a0a:	bf38      	it	cc
 8006a0c:	2304      	movcc	r3, #4
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	9b02      	ldr	r3, [sp, #8]
 8006a12:	9103      	str	r1, [sp, #12]
 8006a14:	428b      	cmp	r3, r1
 8006a16:	d80c      	bhi.n	8006a32 <__multiply+0x9a>
 8006a18:	2e00      	cmp	r6, #0
 8006a1a:	dd03      	ble.n	8006a24 <__multiply+0x8c>
 8006a1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d055      	beq.n	8006ad0 <__multiply+0x138>
 8006a24:	6106      	str	r6, [r0, #16]
 8006a26:	b005      	add	sp, #20
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	f843 2b04 	str.w	r2, [r3], #4
 8006a30:	e7d9      	b.n	80069e6 <__multiply+0x4e>
 8006a32:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a36:	f1ba 0f00 	cmp.w	sl, #0
 8006a3a:	d01f      	beq.n	8006a7c <__multiply+0xe4>
 8006a3c:	46c4      	mov	ip, r8
 8006a3e:	46a1      	mov	r9, r4
 8006a40:	2700      	movs	r7, #0
 8006a42:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a46:	f8d9 3000 	ldr.w	r3, [r9]
 8006a4a:	fa1f fb82 	uxth.w	fp, r2
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	fb0a 330b 	mla	r3, sl, fp, r3
 8006a54:	443b      	add	r3, r7
 8006a56:	f8d9 7000 	ldr.w	r7, [r9]
 8006a5a:	0c12      	lsrs	r2, r2, #16
 8006a5c:	0c3f      	lsrs	r7, r7, #16
 8006a5e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006a62:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a6c:	4565      	cmp	r5, ip
 8006a6e:	f849 3b04 	str.w	r3, [r9], #4
 8006a72:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006a76:	d8e4      	bhi.n	8006a42 <__multiply+0xaa>
 8006a78:	9b01      	ldr	r3, [sp, #4]
 8006a7a:	50e7      	str	r7, [r4, r3]
 8006a7c:	9b03      	ldr	r3, [sp, #12]
 8006a7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006a82:	3104      	adds	r1, #4
 8006a84:	f1b9 0f00 	cmp.w	r9, #0
 8006a88:	d020      	beq.n	8006acc <__multiply+0x134>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	4647      	mov	r7, r8
 8006a8e:	46a4      	mov	ip, r4
 8006a90:	f04f 0a00 	mov.w	sl, #0
 8006a94:	f8b7 b000 	ldrh.w	fp, [r7]
 8006a98:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006a9c:	fb09 220b 	mla	r2, r9, fp, r2
 8006aa0:	4452      	add	r2, sl
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa8:	f84c 3b04 	str.w	r3, [ip], #4
 8006aac:	f857 3b04 	ldr.w	r3, [r7], #4
 8006ab0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ab4:	f8bc 3000 	ldrh.w	r3, [ip]
 8006ab8:	fb09 330a 	mla	r3, r9, sl, r3
 8006abc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006ac0:	42bd      	cmp	r5, r7
 8006ac2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ac6:	d8e5      	bhi.n	8006a94 <__multiply+0xfc>
 8006ac8:	9a01      	ldr	r2, [sp, #4]
 8006aca:	50a3      	str	r3, [r4, r2]
 8006acc:	3404      	adds	r4, #4
 8006ace:	e79f      	b.n	8006a10 <__multiply+0x78>
 8006ad0:	3e01      	subs	r6, #1
 8006ad2:	e7a1      	b.n	8006a18 <__multiply+0x80>
 8006ad4:	080078a4 	.word	0x080078a4
 8006ad8:	080078c6 	.word	0x080078c6

08006adc <__pow5mult>:
 8006adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae0:	4615      	mov	r5, r2
 8006ae2:	f012 0203 	ands.w	r2, r2, #3
 8006ae6:	4607      	mov	r7, r0
 8006ae8:	460e      	mov	r6, r1
 8006aea:	d007      	beq.n	8006afc <__pow5mult+0x20>
 8006aec:	4c25      	ldr	r4, [pc, #148]	@ (8006b84 <__pow5mult+0xa8>)
 8006aee:	3a01      	subs	r2, #1
 8006af0:	2300      	movs	r3, #0
 8006af2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006af6:	f7ff fea7 	bl	8006848 <__multadd>
 8006afa:	4606      	mov	r6, r0
 8006afc:	10ad      	asrs	r5, r5, #2
 8006afe:	d03d      	beq.n	8006b7c <__pow5mult+0xa0>
 8006b00:	69fc      	ldr	r4, [r7, #28]
 8006b02:	b97c      	cbnz	r4, 8006b24 <__pow5mult+0x48>
 8006b04:	2010      	movs	r0, #16
 8006b06:	f7ff fcdb 	bl	80064c0 <malloc>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	61f8      	str	r0, [r7, #28]
 8006b0e:	b928      	cbnz	r0, 8006b1c <__pow5mult+0x40>
 8006b10:	4b1d      	ldr	r3, [pc, #116]	@ (8006b88 <__pow5mult+0xac>)
 8006b12:	481e      	ldr	r0, [pc, #120]	@ (8006b8c <__pow5mult+0xb0>)
 8006b14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006b18:	f000 fa9e 	bl	8007058 <__assert_func>
 8006b1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b20:	6004      	str	r4, [r0, #0]
 8006b22:	60c4      	str	r4, [r0, #12]
 8006b24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b2c:	b94c      	cbnz	r4, 8006b42 <__pow5mult+0x66>
 8006b2e:	f240 2171 	movw	r1, #625	@ 0x271
 8006b32:	4638      	mov	r0, r7
 8006b34:	f7ff ff1a 	bl	800696c <__i2b>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b3e:	4604      	mov	r4, r0
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	f04f 0900 	mov.w	r9, #0
 8006b46:	07eb      	lsls	r3, r5, #31
 8006b48:	d50a      	bpl.n	8006b60 <__pow5mult+0x84>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	4638      	mov	r0, r7
 8006b50:	f7ff ff22 	bl	8006998 <__multiply>
 8006b54:	4631      	mov	r1, r6
 8006b56:	4680      	mov	r8, r0
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff fe53 	bl	8006804 <_Bfree>
 8006b5e:	4646      	mov	r6, r8
 8006b60:	106d      	asrs	r5, r5, #1
 8006b62:	d00b      	beq.n	8006b7c <__pow5mult+0xa0>
 8006b64:	6820      	ldr	r0, [r4, #0]
 8006b66:	b938      	cbnz	r0, 8006b78 <__pow5mult+0x9c>
 8006b68:	4622      	mov	r2, r4
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	f7ff ff13 	bl	8006998 <__multiply>
 8006b72:	6020      	str	r0, [r4, #0]
 8006b74:	f8c0 9000 	str.w	r9, [r0]
 8006b78:	4604      	mov	r4, r0
 8006b7a:	e7e4      	b.n	8006b46 <__pow5mult+0x6a>
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b82:	bf00      	nop
 8006b84:	08007968 	.word	0x08007968
 8006b88:	08007835 	.word	0x08007835
 8006b8c:	080078c6 	.word	0x080078c6

08006b90 <__lshift>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	460c      	mov	r4, r1
 8006b96:	6849      	ldr	r1, [r1, #4]
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b9e:	68a3      	ldr	r3, [r4, #8]
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	4691      	mov	r9, r2
 8006ba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ba8:	f108 0601 	add.w	r6, r8, #1
 8006bac:	42b3      	cmp	r3, r6
 8006bae:	db0b      	blt.n	8006bc8 <__lshift+0x38>
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f7ff fde7 	bl	8006784 <_Balloc>
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	b948      	cbnz	r0, 8006bce <__lshift+0x3e>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	4b28      	ldr	r3, [pc, #160]	@ (8006c60 <__lshift+0xd0>)
 8006bbe:	4829      	ldr	r0, [pc, #164]	@ (8006c64 <__lshift+0xd4>)
 8006bc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006bc4:	f000 fa48 	bl	8007058 <__assert_func>
 8006bc8:	3101      	adds	r1, #1
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	e7ee      	b.n	8006bac <__lshift+0x1c>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f100 0114 	add.w	r1, r0, #20
 8006bd4:	f100 0210 	add.w	r2, r0, #16
 8006bd8:	4618      	mov	r0, r3
 8006bda:	4553      	cmp	r3, sl
 8006bdc:	db33      	blt.n	8006c46 <__lshift+0xb6>
 8006bde:	6920      	ldr	r0, [r4, #16]
 8006be0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006be4:	f104 0314 	add.w	r3, r4, #20
 8006be8:	f019 091f 	ands.w	r9, r9, #31
 8006bec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bf4:	d02b      	beq.n	8006c4e <__lshift+0xbe>
 8006bf6:	f1c9 0e20 	rsb	lr, r9, #32
 8006bfa:	468a      	mov	sl, r1
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	fa00 f009 	lsl.w	r0, r0, r9
 8006c04:	4310      	orrs	r0, r2
 8006c06:	f84a 0b04 	str.w	r0, [sl], #4
 8006c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c0e:	459c      	cmp	ip, r3
 8006c10:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c14:	d8f3      	bhi.n	8006bfe <__lshift+0x6e>
 8006c16:	ebac 0304 	sub.w	r3, ip, r4
 8006c1a:	3b15      	subs	r3, #21
 8006c1c:	f023 0303 	bic.w	r3, r3, #3
 8006c20:	3304      	adds	r3, #4
 8006c22:	f104 0015 	add.w	r0, r4, #21
 8006c26:	4560      	cmp	r0, ip
 8006c28:	bf88      	it	hi
 8006c2a:	2304      	movhi	r3, #4
 8006c2c:	50ca      	str	r2, [r1, r3]
 8006c2e:	b10a      	cbz	r2, 8006c34 <__lshift+0xa4>
 8006c30:	f108 0602 	add.w	r6, r8, #2
 8006c34:	3e01      	subs	r6, #1
 8006c36:	4638      	mov	r0, r7
 8006c38:	612e      	str	r6, [r5, #16]
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	f7ff fde2 	bl	8006804 <_Bfree>
 8006c40:	4628      	mov	r0, r5
 8006c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c46:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	e7c5      	b.n	8006bda <__lshift+0x4a>
 8006c4e:	3904      	subs	r1, #4
 8006c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c54:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c58:	459c      	cmp	ip, r3
 8006c5a:	d8f9      	bhi.n	8006c50 <__lshift+0xc0>
 8006c5c:	e7ea      	b.n	8006c34 <__lshift+0xa4>
 8006c5e:	bf00      	nop
 8006c60:	080078a4 	.word	0x080078a4
 8006c64:	080078c6 	.word	0x080078c6

08006c68 <__mcmp>:
 8006c68:	690a      	ldr	r2, [r1, #16]
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	6900      	ldr	r0, [r0, #16]
 8006c6e:	1a80      	subs	r0, r0, r2
 8006c70:	b530      	push	{r4, r5, lr}
 8006c72:	d10e      	bne.n	8006c92 <__mcmp+0x2a>
 8006c74:	3314      	adds	r3, #20
 8006c76:	3114      	adds	r1, #20
 8006c78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c88:	4295      	cmp	r5, r2
 8006c8a:	d003      	beq.n	8006c94 <__mcmp+0x2c>
 8006c8c:	d205      	bcs.n	8006c9a <__mcmp+0x32>
 8006c8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c92:	bd30      	pop	{r4, r5, pc}
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	d3f3      	bcc.n	8006c80 <__mcmp+0x18>
 8006c98:	e7fb      	b.n	8006c92 <__mcmp+0x2a>
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	e7f9      	b.n	8006c92 <__mcmp+0x2a>
	...

08006ca0 <__mdiff>:
 8006ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	4689      	mov	r9, r1
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	4611      	mov	r1, r2
 8006caa:	4648      	mov	r0, r9
 8006cac:	4614      	mov	r4, r2
 8006cae:	f7ff ffdb 	bl	8006c68 <__mcmp>
 8006cb2:	1e05      	subs	r5, r0, #0
 8006cb4:	d112      	bne.n	8006cdc <__mdiff+0x3c>
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f7ff fd63 	bl	8006784 <_Balloc>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	b928      	cbnz	r0, 8006cce <__mdiff+0x2e>
 8006cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8006dc0 <__mdiff+0x120>)
 8006cc4:	f240 2137 	movw	r1, #567	@ 0x237
 8006cc8:	483e      	ldr	r0, [pc, #248]	@ (8006dc4 <__mdiff+0x124>)
 8006cca:	f000 f9c5 	bl	8007058 <__assert_func>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	b003      	add	sp, #12
 8006cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cdc:	bfbc      	itt	lt
 8006cde:	464b      	movlt	r3, r9
 8006ce0:	46a1      	movlt	r9, r4
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ce8:	bfba      	itte	lt
 8006cea:	461c      	movlt	r4, r3
 8006cec:	2501      	movlt	r5, #1
 8006cee:	2500      	movge	r5, #0
 8006cf0:	f7ff fd48 	bl	8006784 <_Balloc>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	b918      	cbnz	r0, 8006d00 <__mdiff+0x60>
 8006cf8:	4b31      	ldr	r3, [pc, #196]	@ (8006dc0 <__mdiff+0x120>)
 8006cfa:	f240 2145 	movw	r1, #581	@ 0x245
 8006cfe:	e7e3      	b.n	8006cc8 <__mdiff+0x28>
 8006d00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d04:	6926      	ldr	r6, [r4, #16]
 8006d06:	60c5      	str	r5, [r0, #12]
 8006d08:	f109 0310 	add.w	r3, r9, #16
 8006d0c:	f109 0514 	add.w	r5, r9, #20
 8006d10:	f104 0e14 	add.w	lr, r4, #20
 8006d14:	f100 0b14 	add.w	fp, r0, #20
 8006d18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006d1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006d20:	9301      	str	r3, [sp, #4]
 8006d22:	46d9      	mov	r9, fp
 8006d24:	f04f 0c00 	mov.w	ip, #0
 8006d28:	9b01      	ldr	r3, [sp, #4]
 8006d2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	fa1f f38a 	uxth.w	r3, sl
 8006d38:	4619      	mov	r1, r3
 8006d3a:	b283      	uxth	r3, r0
 8006d3c:	1acb      	subs	r3, r1, r3
 8006d3e:	0c00      	lsrs	r0, r0, #16
 8006d40:	4463      	add	r3, ip
 8006d42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d50:	4576      	cmp	r6, lr
 8006d52:	f849 3b04 	str.w	r3, [r9], #4
 8006d56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d5a:	d8e5      	bhi.n	8006d28 <__mdiff+0x88>
 8006d5c:	1b33      	subs	r3, r6, r4
 8006d5e:	3b15      	subs	r3, #21
 8006d60:	f023 0303 	bic.w	r3, r3, #3
 8006d64:	3415      	adds	r4, #21
 8006d66:	3304      	adds	r3, #4
 8006d68:	42a6      	cmp	r6, r4
 8006d6a:	bf38      	it	cc
 8006d6c:	2304      	movcc	r3, #4
 8006d6e:	441d      	add	r5, r3
 8006d70:	445b      	add	r3, fp
 8006d72:	461e      	mov	r6, r3
 8006d74:	462c      	mov	r4, r5
 8006d76:	4544      	cmp	r4, r8
 8006d78:	d30e      	bcc.n	8006d98 <__mdiff+0xf8>
 8006d7a:	f108 0103 	add.w	r1, r8, #3
 8006d7e:	1b49      	subs	r1, r1, r5
 8006d80:	f021 0103 	bic.w	r1, r1, #3
 8006d84:	3d03      	subs	r5, #3
 8006d86:	45a8      	cmp	r8, r5
 8006d88:	bf38      	it	cc
 8006d8a:	2100      	movcc	r1, #0
 8006d8c:	440b      	add	r3, r1
 8006d8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d92:	b191      	cbz	r1, 8006dba <__mdiff+0x11a>
 8006d94:	6117      	str	r7, [r2, #16]
 8006d96:	e79d      	b.n	8006cd4 <__mdiff+0x34>
 8006d98:	f854 1b04 	ldr.w	r1, [r4], #4
 8006d9c:	46e6      	mov	lr, ip
 8006d9e:	0c08      	lsrs	r0, r1, #16
 8006da0:	fa1c fc81 	uxtah	ip, ip, r1
 8006da4:	4471      	add	r1, lr
 8006da6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006daa:	b289      	uxth	r1, r1
 8006dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006db0:	f846 1b04 	str.w	r1, [r6], #4
 8006db4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006db8:	e7dd      	b.n	8006d76 <__mdiff+0xd6>
 8006dba:	3f01      	subs	r7, #1
 8006dbc:	e7e7      	b.n	8006d8e <__mdiff+0xee>
 8006dbe:	bf00      	nop
 8006dc0:	080078a4 	.word	0x080078a4
 8006dc4:	080078c6 	.word	0x080078c6

08006dc8 <__d2b>:
 8006dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006dcc:	460f      	mov	r7, r1
 8006dce:	2101      	movs	r1, #1
 8006dd0:	ec59 8b10 	vmov	r8, r9, d0
 8006dd4:	4616      	mov	r6, r2
 8006dd6:	f7ff fcd5 	bl	8006784 <_Balloc>
 8006dda:	4604      	mov	r4, r0
 8006ddc:	b930      	cbnz	r0, 8006dec <__d2b+0x24>
 8006dde:	4602      	mov	r2, r0
 8006de0:	4b23      	ldr	r3, [pc, #140]	@ (8006e70 <__d2b+0xa8>)
 8006de2:	4824      	ldr	r0, [pc, #144]	@ (8006e74 <__d2b+0xac>)
 8006de4:	f240 310f 	movw	r1, #783	@ 0x30f
 8006de8:	f000 f936 	bl	8007058 <__assert_func>
 8006dec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006df0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006df4:	b10d      	cbz	r5, 8006dfa <__d2b+0x32>
 8006df6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	f1b8 0300 	subs.w	r3, r8, #0
 8006e00:	d023      	beq.n	8006e4a <__d2b+0x82>
 8006e02:	4668      	mov	r0, sp
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	f7ff fd84 	bl	8006912 <__lo0bits>
 8006e0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e0e:	b1d0      	cbz	r0, 8006e46 <__d2b+0x7e>
 8006e10:	f1c0 0320 	rsb	r3, r0, #32
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	40c2      	lsrs	r2, r0
 8006e1c:	6163      	str	r3, [r4, #20]
 8006e1e:	9201      	str	r2, [sp, #4]
 8006e20:	9b01      	ldr	r3, [sp, #4]
 8006e22:	61a3      	str	r3, [r4, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bf0c      	ite	eq
 8006e28:	2201      	moveq	r2, #1
 8006e2a:	2202      	movne	r2, #2
 8006e2c:	6122      	str	r2, [r4, #16]
 8006e2e:	b1a5      	cbz	r5, 8006e5a <__d2b+0x92>
 8006e30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e34:	4405      	add	r5, r0
 8006e36:	603d      	str	r5, [r7, #0]
 8006e38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006e3c:	6030      	str	r0, [r6, #0]
 8006e3e:	4620      	mov	r0, r4
 8006e40:	b003      	add	sp, #12
 8006e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e46:	6161      	str	r1, [r4, #20]
 8006e48:	e7ea      	b.n	8006e20 <__d2b+0x58>
 8006e4a:	a801      	add	r0, sp, #4
 8006e4c:	f7ff fd61 	bl	8006912 <__lo0bits>
 8006e50:	9b01      	ldr	r3, [sp, #4]
 8006e52:	6163      	str	r3, [r4, #20]
 8006e54:	3020      	adds	r0, #32
 8006e56:	2201      	movs	r2, #1
 8006e58:	e7e8      	b.n	8006e2c <__d2b+0x64>
 8006e5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006e62:	6038      	str	r0, [r7, #0]
 8006e64:	6918      	ldr	r0, [r3, #16]
 8006e66:	f7ff fd35 	bl	80068d4 <__hi0bits>
 8006e6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e6e:	e7e5      	b.n	8006e3c <__d2b+0x74>
 8006e70:	080078a4 	.word	0x080078a4
 8006e74:	080078c6 	.word	0x080078c6

08006e78 <__sread>:
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e80:	f000 f898 	bl	8006fb4 <_read_r>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	bfab      	itete	ge
 8006e88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e8c:	181b      	addge	r3, r3, r0
 8006e8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e92:	bfac      	ite	ge
 8006e94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e96:	81a3      	strhlt	r3, [r4, #12]
 8006e98:	bd10      	pop	{r4, pc}

08006e9a <__swrite>:
 8006e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9e:	461f      	mov	r7, r3
 8006ea0:	898b      	ldrh	r3, [r1, #12]
 8006ea2:	05db      	lsls	r3, r3, #23
 8006ea4:	4605      	mov	r5, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	4616      	mov	r6, r2
 8006eaa:	d505      	bpl.n	8006eb8 <__swrite+0x1e>
 8006eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f000 f86c 	bl	8006f90 <_lseek_r>
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ebe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	4628      	mov	r0, r5
 8006eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ece:	f000 b893 	b.w	8006ff8 <_write_r>

08006ed2 <__sseek>:
 8006ed2:	b510      	push	{r4, lr}
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eda:	f000 f859 	bl	8006f90 <_lseek_r>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	bf15      	itete	ne
 8006ee4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ee6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eee:	81a3      	strheq	r3, [r4, #12]
 8006ef0:	bf18      	it	ne
 8006ef2:	81a3      	strhne	r3, [r4, #12]
 8006ef4:	bd10      	pop	{r4, pc}

08006ef6 <__sclose>:
 8006ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efa:	f000 b88f 	b.w	800701c <_close_r>

08006efe <_realloc_r>:
 8006efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f02:	4607      	mov	r7, r0
 8006f04:	4614      	mov	r4, r2
 8006f06:	460d      	mov	r5, r1
 8006f08:	b921      	cbnz	r1, 8006f14 <_realloc_r+0x16>
 8006f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0e:	4611      	mov	r1, r2
 8006f10:	f7ff bb00 	b.w	8006514 <_malloc_r>
 8006f14:	b92a      	cbnz	r2, 8006f22 <_realloc_r+0x24>
 8006f16:	f000 f8d1 	bl	80070bc <_free_r>
 8006f1a:	4625      	mov	r5, r4
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f22:	f000 f927 	bl	8007174 <_malloc_usable_size_r>
 8006f26:	4284      	cmp	r4, r0
 8006f28:	4606      	mov	r6, r0
 8006f2a:	d802      	bhi.n	8006f32 <_realloc_r+0x34>
 8006f2c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f30:	d8f4      	bhi.n	8006f1c <_realloc_r+0x1e>
 8006f32:	4621      	mov	r1, r4
 8006f34:	4638      	mov	r0, r7
 8006f36:	f7ff faed 	bl	8006514 <_malloc_r>
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	b908      	cbnz	r0, 8006f42 <_realloc_r+0x44>
 8006f3e:	4645      	mov	r5, r8
 8006f40:	e7ec      	b.n	8006f1c <_realloc_r+0x1e>
 8006f42:	42b4      	cmp	r4, r6
 8006f44:	4622      	mov	r2, r4
 8006f46:	4629      	mov	r1, r5
 8006f48:	bf28      	it	cs
 8006f4a:	4632      	movcs	r2, r6
 8006f4c:	f000 f876 	bl	800703c <memcpy>
 8006f50:	4629      	mov	r1, r5
 8006f52:	4638      	mov	r0, r7
 8006f54:	f000 f8b2 	bl	80070bc <_free_r>
 8006f58:	e7f1      	b.n	8006f3e <_realloc_r+0x40>

08006f5a <memmove>:
 8006f5a:	4288      	cmp	r0, r1
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	eb01 0402 	add.w	r4, r1, r2
 8006f62:	d902      	bls.n	8006f6a <memmove+0x10>
 8006f64:	4284      	cmp	r4, r0
 8006f66:	4623      	mov	r3, r4
 8006f68:	d807      	bhi.n	8006f7a <memmove+0x20>
 8006f6a:	1e43      	subs	r3, r0, #1
 8006f6c:	42a1      	cmp	r1, r4
 8006f6e:	d008      	beq.n	8006f82 <memmove+0x28>
 8006f70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f74:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f78:	e7f8      	b.n	8006f6c <memmove+0x12>
 8006f7a:	4402      	add	r2, r0
 8006f7c:	4601      	mov	r1, r0
 8006f7e:	428a      	cmp	r2, r1
 8006f80:	d100      	bne.n	8006f84 <memmove+0x2a>
 8006f82:	bd10      	pop	{r4, pc}
 8006f84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f88:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f8c:	e7f7      	b.n	8006f7e <memmove+0x24>
	...

08006f90 <_lseek_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4d07      	ldr	r5, [pc, #28]	@ (8006fb0 <_lseek_r+0x20>)
 8006f94:	4604      	mov	r4, r0
 8006f96:	4608      	mov	r0, r1
 8006f98:	4611      	mov	r1, r2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	602a      	str	r2, [r5, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f7fa faee 	bl	8001580 <_lseek>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_lseek_r+0x1e>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_lseek_r+0x1e>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	2000042c 	.word	0x2000042c

08006fb4 <_read_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4d07      	ldr	r5, [pc, #28]	@ (8006fd4 <_read_r+0x20>)
 8006fb8:	4604      	mov	r4, r0
 8006fba:	4608      	mov	r0, r1
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	602a      	str	r2, [r5, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f7fa fa7c 	bl	80014c0 <_read>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d102      	bne.n	8006fd2 <_read_r+0x1e>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	b103      	cbz	r3, 8006fd2 <_read_r+0x1e>
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	2000042c 	.word	0x2000042c

08006fd8 <_sbrk_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d06      	ldr	r5, [pc, #24]	@ (8006ff4 <_sbrk_r+0x1c>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fa fada 	bl	800159c <_sbrk>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_sbrk_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_sbrk_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	2000042c 	.word	0x2000042c

08006ff8 <_write_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d07      	ldr	r5, [pc, #28]	@ (8007018 <_write_r+0x20>)
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	4608      	mov	r0, r1
 8007000:	4611      	mov	r1, r2
 8007002:	2200      	movs	r2, #0
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	f7fa fa77 	bl	80014fa <_write>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_write_r+0x1e>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_write_r+0x1e>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	2000042c 	.word	0x2000042c

0800701c <_close_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d06      	ldr	r5, [pc, #24]	@ (8007038 <_close_r+0x1c>)
 8007020:	2300      	movs	r3, #0
 8007022:	4604      	mov	r4, r0
 8007024:	4608      	mov	r0, r1
 8007026:	602b      	str	r3, [r5, #0]
 8007028:	f7fa fa83 	bl	8001532 <_close>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d102      	bne.n	8007036 <_close_r+0x1a>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	b103      	cbz	r3, 8007036 <_close_r+0x1a>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	2000042c 	.word	0x2000042c

0800703c <memcpy>:
 800703c:	440a      	add	r2, r1
 800703e:	4291      	cmp	r1, r2
 8007040:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007044:	d100      	bne.n	8007048 <memcpy+0xc>
 8007046:	4770      	bx	lr
 8007048:	b510      	push	{r4, lr}
 800704a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800704e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007052:	4291      	cmp	r1, r2
 8007054:	d1f9      	bne.n	800704a <memcpy+0xe>
 8007056:	bd10      	pop	{r4, pc}

08007058 <__assert_func>:
 8007058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800705a:	4614      	mov	r4, r2
 800705c:	461a      	mov	r2, r3
 800705e:	4b09      	ldr	r3, [pc, #36]	@ (8007084 <__assert_func+0x2c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4605      	mov	r5, r0
 8007064:	68d8      	ldr	r0, [r3, #12]
 8007066:	b14c      	cbz	r4, 800707c <__assert_func+0x24>
 8007068:	4b07      	ldr	r3, [pc, #28]	@ (8007088 <__assert_func+0x30>)
 800706a:	9100      	str	r1, [sp, #0]
 800706c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007070:	4906      	ldr	r1, [pc, #24]	@ (800708c <__assert_func+0x34>)
 8007072:	462b      	mov	r3, r5
 8007074:	f000 f886 	bl	8007184 <fiprintf>
 8007078:	f000 f8a3 	bl	80071c2 <abort>
 800707c:	4b04      	ldr	r3, [pc, #16]	@ (8007090 <__assert_func+0x38>)
 800707e:	461c      	mov	r4, r3
 8007080:	e7f3      	b.n	800706a <__assert_func+0x12>
 8007082:	bf00      	nop
 8007084:	20000018 	.word	0x20000018
 8007088:	08007929 	.word	0x08007929
 800708c:	08007936 	.word	0x08007936
 8007090:	08007964 	.word	0x08007964

08007094 <_calloc_r>:
 8007094:	b570      	push	{r4, r5, r6, lr}
 8007096:	fba1 5402 	umull	r5, r4, r1, r2
 800709a:	b934      	cbnz	r4, 80070aa <_calloc_r+0x16>
 800709c:	4629      	mov	r1, r5
 800709e:	f7ff fa39 	bl	8006514 <_malloc_r>
 80070a2:	4606      	mov	r6, r0
 80070a4:	b928      	cbnz	r0, 80070b2 <_calloc_r+0x1e>
 80070a6:	4630      	mov	r0, r6
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	220c      	movs	r2, #12
 80070ac:	6002      	str	r2, [r0, #0]
 80070ae:	2600      	movs	r6, #0
 80070b0:	e7f9      	b.n	80070a6 <_calloc_r+0x12>
 80070b2:	462a      	mov	r2, r5
 80070b4:	4621      	mov	r1, r4
 80070b6:	f7fe fa17 	bl	80054e8 <memset>
 80070ba:	e7f4      	b.n	80070a6 <_calloc_r+0x12>

080070bc <_free_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4605      	mov	r5, r0
 80070c0:	2900      	cmp	r1, #0
 80070c2:	d041      	beq.n	8007148 <_free_r+0x8c>
 80070c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c8:	1f0c      	subs	r4, r1, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	bfb8      	it	lt
 80070ce:	18e4      	addlt	r4, r4, r3
 80070d0:	f7ff fb4c 	bl	800676c <__malloc_lock>
 80070d4:	4a1d      	ldr	r2, [pc, #116]	@ (800714c <_free_r+0x90>)
 80070d6:	6813      	ldr	r3, [r2, #0]
 80070d8:	b933      	cbnz	r3, 80070e8 <_free_r+0x2c>
 80070da:	6063      	str	r3, [r4, #4]
 80070dc:	6014      	str	r4, [r2, #0]
 80070de:	4628      	mov	r0, r5
 80070e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e4:	f7ff bb48 	b.w	8006778 <__malloc_unlock>
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	d908      	bls.n	80070fe <_free_r+0x42>
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	1821      	adds	r1, r4, r0
 80070f0:	428b      	cmp	r3, r1
 80070f2:	bf01      	itttt	eq
 80070f4:	6819      	ldreq	r1, [r3, #0]
 80070f6:	685b      	ldreq	r3, [r3, #4]
 80070f8:	1809      	addeq	r1, r1, r0
 80070fa:	6021      	streq	r1, [r4, #0]
 80070fc:	e7ed      	b.n	80070da <_free_r+0x1e>
 80070fe:	461a      	mov	r2, r3
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	b10b      	cbz	r3, 8007108 <_free_r+0x4c>
 8007104:	42a3      	cmp	r3, r4
 8007106:	d9fa      	bls.n	80070fe <_free_r+0x42>
 8007108:	6811      	ldr	r1, [r2, #0]
 800710a:	1850      	adds	r0, r2, r1
 800710c:	42a0      	cmp	r0, r4
 800710e:	d10b      	bne.n	8007128 <_free_r+0x6c>
 8007110:	6820      	ldr	r0, [r4, #0]
 8007112:	4401      	add	r1, r0
 8007114:	1850      	adds	r0, r2, r1
 8007116:	4283      	cmp	r3, r0
 8007118:	6011      	str	r1, [r2, #0]
 800711a:	d1e0      	bne.n	80070de <_free_r+0x22>
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	6053      	str	r3, [r2, #4]
 8007122:	4408      	add	r0, r1
 8007124:	6010      	str	r0, [r2, #0]
 8007126:	e7da      	b.n	80070de <_free_r+0x22>
 8007128:	d902      	bls.n	8007130 <_free_r+0x74>
 800712a:	230c      	movs	r3, #12
 800712c:	602b      	str	r3, [r5, #0]
 800712e:	e7d6      	b.n	80070de <_free_r+0x22>
 8007130:	6820      	ldr	r0, [r4, #0]
 8007132:	1821      	adds	r1, r4, r0
 8007134:	428b      	cmp	r3, r1
 8007136:	bf04      	itt	eq
 8007138:	6819      	ldreq	r1, [r3, #0]
 800713a:	685b      	ldreq	r3, [r3, #4]
 800713c:	6063      	str	r3, [r4, #4]
 800713e:	bf04      	itt	eq
 8007140:	1809      	addeq	r1, r1, r0
 8007142:	6021      	streq	r1, [r4, #0]
 8007144:	6054      	str	r4, [r2, #4]
 8007146:	e7ca      	b.n	80070de <_free_r+0x22>
 8007148:	bd38      	pop	{r3, r4, r5, pc}
 800714a:	bf00      	nop
 800714c:	20000428 	.word	0x20000428

08007150 <__ascii_mbtowc>:
 8007150:	b082      	sub	sp, #8
 8007152:	b901      	cbnz	r1, 8007156 <__ascii_mbtowc+0x6>
 8007154:	a901      	add	r1, sp, #4
 8007156:	b142      	cbz	r2, 800716a <__ascii_mbtowc+0x1a>
 8007158:	b14b      	cbz	r3, 800716e <__ascii_mbtowc+0x1e>
 800715a:	7813      	ldrb	r3, [r2, #0]
 800715c:	600b      	str	r3, [r1, #0]
 800715e:	7812      	ldrb	r2, [r2, #0]
 8007160:	1e10      	subs	r0, r2, #0
 8007162:	bf18      	it	ne
 8007164:	2001      	movne	r0, #1
 8007166:	b002      	add	sp, #8
 8007168:	4770      	bx	lr
 800716a:	4610      	mov	r0, r2
 800716c:	e7fb      	b.n	8007166 <__ascii_mbtowc+0x16>
 800716e:	f06f 0001 	mvn.w	r0, #1
 8007172:	e7f8      	b.n	8007166 <__ascii_mbtowc+0x16>

08007174 <_malloc_usable_size_r>:
 8007174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007178:	1f18      	subs	r0, r3, #4
 800717a:	2b00      	cmp	r3, #0
 800717c:	bfbc      	itt	lt
 800717e:	580b      	ldrlt	r3, [r1, r0]
 8007180:	18c0      	addlt	r0, r0, r3
 8007182:	4770      	bx	lr

08007184 <fiprintf>:
 8007184:	b40e      	push	{r1, r2, r3}
 8007186:	b503      	push	{r0, r1, lr}
 8007188:	4601      	mov	r1, r0
 800718a:	ab03      	add	r3, sp, #12
 800718c:	4805      	ldr	r0, [pc, #20]	@ (80071a4 <fiprintf+0x20>)
 800718e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007192:	6800      	ldr	r0, [r0, #0]
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	f000 f845 	bl	8007224 <_vfiprintf_r>
 800719a:	b002      	add	sp, #8
 800719c:	f85d eb04 	ldr.w	lr, [sp], #4
 80071a0:	b003      	add	sp, #12
 80071a2:	4770      	bx	lr
 80071a4:	20000018 	.word	0x20000018

080071a8 <__ascii_wctomb>:
 80071a8:	4603      	mov	r3, r0
 80071aa:	4608      	mov	r0, r1
 80071ac:	b141      	cbz	r1, 80071c0 <__ascii_wctomb+0x18>
 80071ae:	2aff      	cmp	r2, #255	@ 0xff
 80071b0:	d904      	bls.n	80071bc <__ascii_wctomb+0x14>
 80071b2:	228a      	movs	r2, #138	@ 0x8a
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071ba:	4770      	bx	lr
 80071bc:	700a      	strb	r2, [r1, #0]
 80071be:	2001      	movs	r0, #1
 80071c0:	4770      	bx	lr

080071c2 <abort>:
 80071c2:	b508      	push	{r3, lr}
 80071c4:	2006      	movs	r0, #6
 80071c6:	f000 fa63 	bl	8007690 <raise>
 80071ca:	2001      	movs	r0, #1
 80071cc:	f7fa f96d 	bl	80014aa <_exit>

080071d0 <__sfputc_r>:
 80071d0:	6893      	ldr	r3, [r2, #8]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	b410      	push	{r4}
 80071d8:	6093      	str	r3, [r2, #8]
 80071da:	da08      	bge.n	80071ee <__sfputc_r+0x1e>
 80071dc:	6994      	ldr	r4, [r2, #24]
 80071de:	42a3      	cmp	r3, r4
 80071e0:	db01      	blt.n	80071e6 <__sfputc_r+0x16>
 80071e2:	290a      	cmp	r1, #10
 80071e4:	d103      	bne.n	80071ee <__sfputc_r+0x1e>
 80071e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071ea:	f000 b933 	b.w	8007454 <__swbuf_r>
 80071ee:	6813      	ldr	r3, [r2, #0]
 80071f0:	1c58      	adds	r0, r3, #1
 80071f2:	6010      	str	r0, [r2, #0]
 80071f4:	7019      	strb	r1, [r3, #0]
 80071f6:	4608      	mov	r0, r1
 80071f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <__sfputs_r>:
 80071fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007200:	4606      	mov	r6, r0
 8007202:	460f      	mov	r7, r1
 8007204:	4614      	mov	r4, r2
 8007206:	18d5      	adds	r5, r2, r3
 8007208:	42ac      	cmp	r4, r5
 800720a:	d101      	bne.n	8007210 <__sfputs_r+0x12>
 800720c:	2000      	movs	r0, #0
 800720e:	e007      	b.n	8007220 <__sfputs_r+0x22>
 8007210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007214:	463a      	mov	r2, r7
 8007216:	4630      	mov	r0, r6
 8007218:	f7ff ffda 	bl	80071d0 <__sfputc_r>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d1f3      	bne.n	8007208 <__sfputs_r+0xa>
 8007220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007224 <_vfiprintf_r>:
 8007224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007228:	460d      	mov	r5, r1
 800722a:	b09d      	sub	sp, #116	@ 0x74
 800722c:	4614      	mov	r4, r2
 800722e:	4698      	mov	r8, r3
 8007230:	4606      	mov	r6, r0
 8007232:	b118      	cbz	r0, 800723c <_vfiprintf_r+0x18>
 8007234:	6a03      	ldr	r3, [r0, #32]
 8007236:	b90b      	cbnz	r3, 800723c <_vfiprintf_r+0x18>
 8007238:	f7fe f920 	bl	800547c <__sinit>
 800723c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800723e:	07d9      	lsls	r1, r3, #31
 8007240:	d405      	bmi.n	800724e <_vfiprintf_r+0x2a>
 8007242:	89ab      	ldrh	r3, [r5, #12]
 8007244:	059a      	lsls	r2, r3, #22
 8007246:	d402      	bmi.n	800724e <_vfiprintf_r+0x2a>
 8007248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800724a:	f7fe f980 	bl	800554e <__retarget_lock_acquire_recursive>
 800724e:	89ab      	ldrh	r3, [r5, #12]
 8007250:	071b      	lsls	r3, r3, #28
 8007252:	d501      	bpl.n	8007258 <_vfiprintf_r+0x34>
 8007254:	692b      	ldr	r3, [r5, #16]
 8007256:	b99b      	cbnz	r3, 8007280 <_vfiprintf_r+0x5c>
 8007258:	4629      	mov	r1, r5
 800725a:	4630      	mov	r0, r6
 800725c:	f000 f938 	bl	80074d0 <__swsetup_r>
 8007260:	b170      	cbz	r0, 8007280 <_vfiprintf_r+0x5c>
 8007262:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007264:	07dc      	lsls	r4, r3, #31
 8007266:	d504      	bpl.n	8007272 <_vfiprintf_r+0x4e>
 8007268:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800726c:	b01d      	add	sp, #116	@ 0x74
 800726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007272:	89ab      	ldrh	r3, [r5, #12]
 8007274:	0598      	lsls	r0, r3, #22
 8007276:	d4f7      	bmi.n	8007268 <_vfiprintf_r+0x44>
 8007278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800727a:	f7fe f969 	bl	8005550 <__retarget_lock_release_recursive>
 800727e:	e7f3      	b.n	8007268 <_vfiprintf_r+0x44>
 8007280:	2300      	movs	r3, #0
 8007282:	9309      	str	r3, [sp, #36]	@ 0x24
 8007284:	2320      	movs	r3, #32
 8007286:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800728a:	f8cd 800c 	str.w	r8, [sp, #12]
 800728e:	2330      	movs	r3, #48	@ 0x30
 8007290:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007440 <_vfiprintf_r+0x21c>
 8007294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007298:	f04f 0901 	mov.w	r9, #1
 800729c:	4623      	mov	r3, r4
 800729e:	469a      	mov	sl, r3
 80072a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072a4:	b10a      	cbz	r2, 80072aa <_vfiprintf_r+0x86>
 80072a6:	2a25      	cmp	r2, #37	@ 0x25
 80072a8:	d1f9      	bne.n	800729e <_vfiprintf_r+0x7a>
 80072aa:	ebba 0b04 	subs.w	fp, sl, r4
 80072ae:	d00b      	beq.n	80072c8 <_vfiprintf_r+0xa4>
 80072b0:	465b      	mov	r3, fp
 80072b2:	4622      	mov	r2, r4
 80072b4:	4629      	mov	r1, r5
 80072b6:	4630      	mov	r0, r6
 80072b8:	f7ff ffa1 	bl	80071fe <__sfputs_r>
 80072bc:	3001      	adds	r0, #1
 80072be:	f000 80a7 	beq.w	8007410 <_vfiprintf_r+0x1ec>
 80072c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072c4:	445a      	add	r2, fp
 80072c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80072c8:	f89a 3000 	ldrb.w	r3, [sl]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 809f 	beq.w	8007410 <_vfiprintf_r+0x1ec>
 80072d2:	2300      	movs	r3, #0
 80072d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072dc:	f10a 0a01 	add.w	sl, sl, #1
 80072e0:	9304      	str	r3, [sp, #16]
 80072e2:	9307      	str	r3, [sp, #28]
 80072e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80072ea:	4654      	mov	r4, sl
 80072ec:	2205      	movs	r2, #5
 80072ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f2:	4853      	ldr	r0, [pc, #332]	@ (8007440 <_vfiprintf_r+0x21c>)
 80072f4:	f7f8 ff74 	bl	80001e0 <memchr>
 80072f8:	9a04      	ldr	r2, [sp, #16]
 80072fa:	b9d8      	cbnz	r0, 8007334 <_vfiprintf_r+0x110>
 80072fc:	06d1      	lsls	r1, r2, #27
 80072fe:	bf44      	itt	mi
 8007300:	2320      	movmi	r3, #32
 8007302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007306:	0713      	lsls	r3, r2, #28
 8007308:	bf44      	itt	mi
 800730a:	232b      	movmi	r3, #43	@ 0x2b
 800730c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007310:	f89a 3000 	ldrb.w	r3, [sl]
 8007314:	2b2a      	cmp	r3, #42	@ 0x2a
 8007316:	d015      	beq.n	8007344 <_vfiprintf_r+0x120>
 8007318:	9a07      	ldr	r2, [sp, #28]
 800731a:	4654      	mov	r4, sl
 800731c:	2000      	movs	r0, #0
 800731e:	f04f 0c0a 	mov.w	ip, #10
 8007322:	4621      	mov	r1, r4
 8007324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007328:	3b30      	subs	r3, #48	@ 0x30
 800732a:	2b09      	cmp	r3, #9
 800732c:	d94b      	bls.n	80073c6 <_vfiprintf_r+0x1a2>
 800732e:	b1b0      	cbz	r0, 800735e <_vfiprintf_r+0x13a>
 8007330:	9207      	str	r2, [sp, #28]
 8007332:	e014      	b.n	800735e <_vfiprintf_r+0x13a>
 8007334:	eba0 0308 	sub.w	r3, r0, r8
 8007338:	fa09 f303 	lsl.w	r3, r9, r3
 800733c:	4313      	orrs	r3, r2
 800733e:	9304      	str	r3, [sp, #16]
 8007340:	46a2      	mov	sl, r4
 8007342:	e7d2      	b.n	80072ea <_vfiprintf_r+0xc6>
 8007344:	9b03      	ldr	r3, [sp, #12]
 8007346:	1d19      	adds	r1, r3, #4
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	9103      	str	r1, [sp, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	bfbb      	ittet	lt
 8007350:	425b      	neglt	r3, r3
 8007352:	f042 0202 	orrlt.w	r2, r2, #2
 8007356:	9307      	strge	r3, [sp, #28]
 8007358:	9307      	strlt	r3, [sp, #28]
 800735a:	bfb8      	it	lt
 800735c:	9204      	strlt	r2, [sp, #16]
 800735e:	7823      	ldrb	r3, [r4, #0]
 8007360:	2b2e      	cmp	r3, #46	@ 0x2e
 8007362:	d10a      	bne.n	800737a <_vfiprintf_r+0x156>
 8007364:	7863      	ldrb	r3, [r4, #1]
 8007366:	2b2a      	cmp	r3, #42	@ 0x2a
 8007368:	d132      	bne.n	80073d0 <_vfiprintf_r+0x1ac>
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	9203      	str	r2, [sp, #12]
 8007372:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007376:	3402      	adds	r4, #2
 8007378:	9305      	str	r3, [sp, #20]
 800737a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007450 <_vfiprintf_r+0x22c>
 800737e:	7821      	ldrb	r1, [r4, #0]
 8007380:	2203      	movs	r2, #3
 8007382:	4650      	mov	r0, sl
 8007384:	f7f8 ff2c 	bl	80001e0 <memchr>
 8007388:	b138      	cbz	r0, 800739a <_vfiprintf_r+0x176>
 800738a:	9b04      	ldr	r3, [sp, #16]
 800738c:	eba0 000a 	sub.w	r0, r0, sl
 8007390:	2240      	movs	r2, #64	@ 0x40
 8007392:	4082      	lsls	r2, r0
 8007394:	4313      	orrs	r3, r2
 8007396:	3401      	adds	r4, #1
 8007398:	9304      	str	r3, [sp, #16]
 800739a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800739e:	4829      	ldr	r0, [pc, #164]	@ (8007444 <_vfiprintf_r+0x220>)
 80073a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073a4:	2206      	movs	r2, #6
 80073a6:	f7f8 ff1b 	bl	80001e0 <memchr>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d03f      	beq.n	800742e <_vfiprintf_r+0x20a>
 80073ae:	4b26      	ldr	r3, [pc, #152]	@ (8007448 <_vfiprintf_r+0x224>)
 80073b0:	bb1b      	cbnz	r3, 80073fa <_vfiprintf_r+0x1d6>
 80073b2:	9b03      	ldr	r3, [sp, #12]
 80073b4:	3307      	adds	r3, #7
 80073b6:	f023 0307 	bic.w	r3, r3, #7
 80073ba:	3308      	adds	r3, #8
 80073bc:	9303      	str	r3, [sp, #12]
 80073be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c0:	443b      	add	r3, r7
 80073c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073c4:	e76a      	b.n	800729c <_vfiprintf_r+0x78>
 80073c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ca:	460c      	mov	r4, r1
 80073cc:	2001      	movs	r0, #1
 80073ce:	e7a8      	b.n	8007322 <_vfiprintf_r+0xfe>
 80073d0:	2300      	movs	r3, #0
 80073d2:	3401      	adds	r4, #1
 80073d4:	9305      	str	r3, [sp, #20]
 80073d6:	4619      	mov	r1, r3
 80073d8:	f04f 0c0a 	mov.w	ip, #10
 80073dc:	4620      	mov	r0, r4
 80073de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073e2:	3a30      	subs	r2, #48	@ 0x30
 80073e4:	2a09      	cmp	r2, #9
 80073e6:	d903      	bls.n	80073f0 <_vfiprintf_r+0x1cc>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0c6      	beq.n	800737a <_vfiprintf_r+0x156>
 80073ec:	9105      	str	r1, [sp, #20]
 80073ee:	e7c4      	b.n	800737a <_vfiprintf_r+0x156>
 80073f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80073f4:	4604      	mov	r4, r0
 80073f6:	2301      	movs	r3, #1
 80073f8:	e7f0      	b.n	80073dc <_vfiprintf_r+0x1b8>
 80073fa:	ab03      	add	r3, sp, #12
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	462a      	mov	r2, r5
 8007400:	4b12      	ldr	r3, [pc, #72]	@ (800744c <_vfiprintf_r+0x228>)
 8007402:	a904      	add	r1, sp, #16
 8007404:	4630      	mov	r0, r6
 8007406:	f7fd fbd5 	bl	8004bb4 <_printf_float>
 800740a:	4607      	mov	r7, r0
 800740c:	1c78      	adds	r0, r7, #1
 800740e:	d1d6      	bne.n	80073be <_vfiprintf_r+0x19a>
 8007410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007412:	07d9      	lsls	r1, r3, #31
 8007414:	d405      	bmi.n	8007422 <_vfiprintf_r+0x1fe>
 8007416:	89ab      	ldrh	r3, [r5, #12]
 8007418:	059a      	lsls	r2, r3, #22
 800741a:	d402      	bmi.n	8007422 <_vfiprintf_r+0x1fe>
 800741c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800741e:	f7fe f897 	bl	8005550 <__retarget_lock_release_recursive>
 8007422:	89ab      	ldrh	r3, [r5, #12]
 8007424:	065b      	lsls	r3, r3, #25
 8007426:	f53f af1f 	bmi.w	8007268 <_vfiprintf_r+0x44>
 800742a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800742c:	e71e      	b.n	800726c <_vfiprintf_r+0x48>
 800742e:	ab03      	add	r3, sp, #12
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	462a      	mov	r2, r5
 8007434:	4b05      	ldr	r3, [pc, #20]	@ (800744c <_vfiprintf_r+0x228>)
 8007436:	a904      	add	r1, sp, #16
 8007438:	4630      	mov	r0, r6
 800743a:	f7fd fe53 	bl	80050e4 <_printf_i>
 800743e:	e7e4      	b.n	800740a <_vfiprintf_r+0x1e6>
 8007440:	080078b5 	.word	0x080078b5
 8007444:	080078bf 	.word	0x080078bf
 8007448:	08004bb5 	.word	0x08004bb5
 800744c:	080071ff 	.word	0x080071ff
 8007450:	080078bb 	.word	0x080078bb

08007454 <__swbuf_r>:
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007456:	460e      	mov	r6, r1
 8007458:	4614      	mov	r4, r2
 800745a:	4605      	mov	r5, r0
 800745c:	b118      	cbz	r0, 8007466 <__swbuf_r+0x12>
 800745e:	6a03      	ldr	r3, [r0, #32]
 8007460:	b90b      	cbnz	r3, 8007466 <__swbuf_r+0x12>
 8007462:	f7fe f80b 	bl	800547c <__sinit>
 8007466:	69a3      	ldr	r3, [r4, #24]
 8007468:	60a3      	str	r3, [r4, #8]
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	071a      	lsls	r2, r3, #28
 800746e:	d501      	bpl.n	8007474 <__swbuf_r+0x20>
 8007470:	6923      	ldr	r3, [r4, #16]
 8007472:	b943      	cbnz	r3, 8007486 <__swbuf_r+0x32>
 8007474:	4621      	mov	r1, r4
 8007476:	4628      	mov	r0, r5
 8007478:	f000 f82a 	bl	80074d0 <__swsetup_r>
 800747c:	b118      	cbz	r0, 8007486 <__swbuf_r+0x32>
 800747e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007482:	4638      	mov	r0, r7
 8007484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	6922      	ldr	r2, [r4, #16]
 800748a:	1a98      	subs	r0, r3, r2
 800748c:	6963      	ldr	r3, [r4, #20]
 800748e:	b2f6      	uxtb	r6, r6
 8007490:	4283      	cmp	r3, r0
 8007492:	4637      	mov	r7, r6
 8007494:	dc05      	bgt.n	80074a2 <__swbuf_r+0x4e>
 8007496:	4621      	mov	r1, r4
 8007498:	4628      	mov	r0, r5
 800749a:	f7ff f93f 	bl	800671c <_fflush_r>
 800749e:	2800      	cmp	r0, #0
 80074a0:	d1ed      	bne.n	800747e <__swbuf_r+0x2a>
 80074a2:	68a3      	ldr	r3, [r4, #8]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	60a3      	str	r3, [r4, #8]
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	6022      	str	r2, [r4, #0]
 80074ae:	701e      	strb	r6, [r3, #0]
 80074b0:	6962      	ldr	r2, [r4, #20]
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d004      	beq.n	80074c2 <__swbuf_r+0x6e>
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	07db      	lsls	r3, r3, #31
 80074bc:	d5e1      	bpl.n	8007482 <__swbuf_r+0x2e>
 80074be:	2e0a      	cmp	r6, #10
 80074c0:	d1df      	bne.n	8007482 <__swbuf_r+0x2e>
 80074c2:	4621      	mov	r1, r4
 80074c4:	4628      	mov	r0, r5
 80074c6:	f7ff f929 	bl	800671c <_fflush_r>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d0d9      	beq.n	8007482 <__swbuf_r+0x2e>
 80074ce:	e7d6      	b.n	800747e <__swbuf_r+0x2a>

080074d0 <__swsetup_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4b29      	ldr	r3, [pc, #164]	@ (8007578 <__swsetup_r+0xa8>)
 80074d4:	4605      	mov	r5, r0
 80074d6:	6818      	ldr	r0, [r3, #0]
 80074d8:	460c      	mov	r4, r1
 80074da:	b118      	cbz	r0, 80074e4 <__swsetup_r+0x14>
 80074dc:	6a03      	ldr	r3, [r0, #32]
 80074de:	b90b      	cbnz	r3, 80074e4 <__swsetup_r+0x14>
 80074e0:	f7fd ffcc 	bl	800547c <__sinit>
 80074e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e8:	0719      	lsls	r1, r3, #28
 80074ea:	d422      	bmi.n	8007532 <__swsetup_r+0x62>
 80074ec:	06da      	lsls	r2, r3, #27
 80074ee:	d407      	bmi.n	8007500 <__swsetup_r+0x30>
 80074f0:	2209      	movs	r2, #9
 80074f2:	602a      	str	r2, [r5, #0]
 80074f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074fe:	e033      	b.n	8007568 <__swsetup_r+0x98>
 8007500:	0758      	lsls	r0, r3, #29
 8007502:	d512      	bpl.n	800752a <__swsetup_r+0x5a>
 8007504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007506:	b141      	cbz	r1, 800751a <__swsetup_r+0x4a>
 8007508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800750c:	4299      	cmp	r1, r3
 800750e:	d002      	beq.n	8007516 <__swsetup_r+0x46>
 8007510:	4628      	mov	r0, r5
 8007512:	f7ff fdd3 	bl	80070bc <_free_r>
 8007516:	2300      	movs	r3, #0
 8007518:	6363      	str	r3, [r4, #52]	@ 0x34
 800751a:	89a3      	ldrh	r3, [r4, #12]
 800751c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007520:	81a3      	strh	r3, [r4, #12]
 8007522:	2300      	movs	r3, #0
 8007524:	6063      	str	r3, [r4, #4]
 8007526:	6923      	ldr	r3, [r4, #16]
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f043 0308 	orr.w	r3, r3, #8
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	6923      	ldr	r3, [r4, #16]
 8007534:	b94b      	cbnz	r3, 800754a <__swsetup_r+0x7a>
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800753c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007540:	d003      	beq.n	800754a <__swsetup_r+0x7a>
 8007542:	4621      	mov	r1, r4
 8007544:	4628      	mov	r0, r5
 8007546:	f000 f83f 	bl	80075c8 <__smakebuf_r>
 800754a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800754e:	f013 0201 	ands.w	r2, r3, #1
 8007552:	d00a      	beq.n	800756a <__swsetup_r+0x9a>
 8007554:	2200      	movs	r2, #0
 8007556:	60a2      	str	r2, [r4, #8]
 8007558:	6962      	ldr	r2, [r4, #20]
 800755a:	4252      	negs	r2, r2
 800755c:	61a2      	str	r2, [r4, #24]
 800755e:	6922      	ldr	r2, [r4, #16]
 8007560:	b942      	cbnz	r2, 8007574 <__swsetup_r+0xa4>
 8007562:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007566:	d1c5      	bne.n	80074f4 <__swsetup_r+0x24>
 8007568:	bd38      	pop	{r3, r4, r5, pc}
 800756a:	0799      	lsls	r1, r3, #30
 800756c:	bf58      	it	pl
 800756e:	6962      	ldrpl	r2, [r4, #20]
 8007570:	60a2      	str	r2, [r4, #8]
 8007572:	e7f4      	b.n	800755e <__swsetup_r+0x8e>
 8007574:	2000      	movs	r0, #0
 8007576:	e7f7      	b.n	8007568 <__swsetup_r+0x98>
 8007578:	20000018 	.word	0x20000018

0800757c <__swhatbuf_r>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	460c      	mov	r4, r1
 8007580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007584:	2900      	cmp	r1, #0
 8007586:	b096      	sub	sp, #88	@ 0x58
 8007588:	4615      	mov	r5, r2
 800758a:	461e      	mov	r6, r3
 800758c:	da0d      	bge.n	80075aa <__swhatbuf_r+0x2e>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007594:	f04f 0100 	mov.w	r1, #0
 8007598:	bf14      	ite	ne
 800759a:	2340      	movne	r3, #64	@ 0x40
 800759c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075a0:	2000      	movs	r0, #0
 80075a2:	6031      	str	r1, [r6, #0]
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	b016      	add	sp, #88	@ 0x58
 80075a8:	bd70      	pop	{r4, r5, r6, pc}
 80075aa:	466a      	mov	r2, sp
 80075ac:	f000 f89c 	bl	80076e8 <_fstat_r>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	dbec      	blt.n	800758e <__swhatbuf_r+0x12>
 80075b4:	9901      	ldr	r1, [sp, #4]
 80075b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075be:	4259      	negs	r1, r3
 80075c0:	4159      	adcs	r1, r3
 80075c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075c6:	e7eb      	b.n	80075a0 <__swhatbuf_r+0x24>

080075c8 <__smakebuf_r>:
 80075c8:	898b      	ldrh	r3, [r1, #12]
 80075ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075cc:	079d      	lsls	r5, r3, #30
 80075ce:	4606      	mov	r6, r0
 80075d0:	460c      	mov	r4, r1
 80075d2:	d507      	bpl.n	80075e4 <__smakebuf_r+0x1c>
 80075d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	6123      	str	r3, [r4, #16]
 80075dc:	2301      	movs	r3, #1
 80075de:	6163      	str	r3, [r4, #20]
 80075e0:	b003      	add	sp, #12
 80075e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e4:	ab01      	add	r3, sp, #4
 80075e6:	466a      	mov	r2, sp
 80075e8:	f7ff ffc8 	bl	800757c <__swhatbuf_r>
 80075ec:	9f00      	ldr	r7, [sp, #0]
 80075ee:	4605      	mov	r5, r0
 80075f0:	4639      	mov	r1, r7
 80075f2:	4630      	mov	r0, r6
 80075f4:	f7fe ff8e 	bl	8006514 <_malloc_r>
 80075f8:	b948      	cbnz	r0, 800760e <__smakebuf_r+0x46>
 80075fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075fe:	059a      	lsls	r2, r3, #22
 8007600:	d4ee      	bmi.n	80075e0 <__smakebuf_r+0x18>
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	f043 0302 	orr.w	r3, r3, #2
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	e7e2      	b.n	80075d4 <__smakebuf_r+0xc>
 800760e:	89a3      	ldrh	r3, [r4, #12]
 8007610:	6020      	str	r0, [r4, #0]
 8007612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	9b01      	ldr	r3, [sp, #4]
 800761a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800761e:	b15b      	cbz	r3, 8007638 <__smakebuf_r+0x70>
 8007620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007624:	4630      	mov	r0, r6
 8007626:	f000 f83b 	bl	80076a0 <_isatty_r>
 800762a:	b128      	cbz	r0, 8007638 <__smakebuf_r+0x70>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	f023 0303 	bic.w	r3, r3, #3
 8007632:	f043 0301 	orr.w	r3, r3, #1
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	431d      	orrs	r5, r3
 800763c:	81a5      	strh	r5, [r4, #12]
 800763e:	e7cf      	b.n	80075e0 <__smakebuf_r+0x18>

08007640 <_raise_r>:
 8007640:	291f      	cmp	r1, #31
 8007642:	b538      	push	{r3, r4, r5, lr}
 8007644:	4605      	mov	r5, r0
 8007646:	460c      	mov	r4, r1
 8007648:	d904      	bls.n	8007654 <_raise_r+0x14>
 800764a:	2316      	movs	r3, #22
 800764c:	6003      	str	r3, [r0, #0]
 800764e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007656:	b112      	cbz	r2, 800765e <_raise_r+0x1e>
 8007658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800765c:	b94b      	cbnz	r3, 8007672 <_raise_r+0x32>
 800765e:	4628      	mov	r0, r5
 8007660:	f000 f840 	bl	80076e4 <_getpid_r>
 8007664:	4622      	mov	r2, r4
 8007666:	4601      	mov	r1, r0
 8007668:	4628      	mov	r0, r5
 800766a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800766e:	f000 b827 	b.w	80076c0 <_kill_r>
 8007672:	2b01      	cmp	r3, #1
 8007674:	d00a      	beq.n	800768c <_raise_r+0x4c>
 8007676:	1c59      	adds	r1, r3, #1
 8007678:	d103      	bne.n	8007682 <_raise_r+0x42>
 800767a:	2316      	movs	r3, #22
 800767c:	6003      	str	r3, [r0, #0]
 800767e:	2001      	movs	r0, #1
 8007680:	e7e7      	b.n	8007652 <_raise_r+0x12>
 8007682:	2100      	movs	r1, #0
 8007684:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007688:	4620      	mov	r0, r4
 800768a:	4798      	blx	r3
 800768c:	2000      	movs	r0, #0
 800768e:	e7e0      	b.n	8007652 <_raise_r+0x12>

08007690 <raise>:
 8007690:	4b02      	ldr	r3, [pc, #8]	@ (800769c <raise+0xc>)
 8007692:	4601      	mov	r1, r0
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	f7ff bfd3 	b.w	8007640 <_raise_r>
 800769a:	bf00      	nop
 800769c:	20000018 	.word	0x20000018

080076a0 <_isatty_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4d06      	ldr	r5, [pc, #24]	@ (80076bc <_isatty_r+0x1c>)
 80076a4:	2300      	movs	r3, #0
 80076a6:	4604      	mov	r4, r0
 80076a8:	4608      	mov	r0, r1
 80076aa:	602b      	str	r3, [r5, #0]
 80076ac:	f7f9 ff5d 	bl	800156a <_isatty>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_isatty_r+0x1a>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_isatty_r+0x1a>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	2000042c 	.word	0x2000042c

080076c0 <_kill_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	4d07      	ldr	r5, [pc, #28]	@ (80076e0 <_kill_r+0x20>)
 80076c4:	2300      	movs	r3, #0
 80076c6:	4604      	mov	r4, r0
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	602b      	str	r3, [r5, #0]
 80076ce:	f7f9 fedc 	bl	800148a <_kill>
 80076d2:	1c43      	adds	r3, r0, #1
 80076d4:	d102      	bne.n	80076dc <_kill_r+0x1c>
 80076d6:	682b      	ldr	r3, [r5, #0]
 80076d8:	b103      	cbz	r3, 80076dc <_kill_r+0x1c>
 80076da:	6023      	str	r3, [r4, #0]
 80076dc:	bd38      	pop	{r3, r4, r5, pc}
 80076de:	bf00      	nop
 80076e0:	2000042c 	.word	0x2000042c

080076e4 <_getpid_r>:
 80076e4:	f7f9 bec9 	b.w	800147a <_getpid>

080076e8 <_fstat_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4d07      	ldr	r5, [pc, #28]	@ (8007708 <_fstat_r+0x20>)
 80076ec:	2300      	movs	r3, #0
 80076ee:	4604      	mov	r4, r0
 80076f0:	4608      	mov	r0, r1
 80076f2:	4611      	mov	r1, r2
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	f7f9 ff28 	bl	800154a <_fstat>
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	d102      	bne.n	8007704 <_fstat_r+0x1c>
 80076fe:	682b      	ldr	r3, [r5, #0]
 8007700:	b103      	cbz	r3, 8007704 <_fstat_r+0x1c>
 8007702:	6023      	str	r3, [r4, #0]
 8007704:	bd38      	pop	{r3, r4, r5, pc}
 8007706:	bf00      	nop
 8007708:	2000042c 	.word	0x2000042c

0800770c <_init>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	bf00      	nop
 8007710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007712:	bc08      	pop	{r3}
 8007714:	469e      	mov	lr, r3
 8007716:	4770      	bx	lr

08007718 <_fini>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	bf00      	nop
 800771c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	469e      	mov	lr, r3
 8007722:	4770      	bx	lr
